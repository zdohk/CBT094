//ZT15XXXX JOB (SZTECH),'XXXX',                                         JOB06127
//             CLASS=U,MSGCLASS=X,NOTIFY=ZT15
//JESDS OUTPUT PAGEDEF=LDUP,FORMDEF=LDUP,JESDS=ALL,FORMS=3H25
//*            DSN's of SYS1.xxxxxxxx map into SMPE DDDEFs of xxxxxxxx
//ASMA90  EXEC PGM=ASMA90,PARM='NODECK,OBJ,RENT'
//STEPLIB   DD DISP=SHR,DSN=SYS1.SASMMOD1,                       HLASM
//  VOL=SER=SR0001,UNIT=SYSDA
//SYSLIB    DD DISP=SHR,DSN=ZTGP01.MJCUTIL.MACLIB              $COMMON
//          DD DISP=SHR,DSN=SYS1.SGLOSAMP,   Allocation Optimizer (AO)
//  VOL=SER=SR0001,UNIT=SYSDA
//          DD DISP=SHR,DSN=SYS1.SASFPMAC,                  BATCHPIPES
//  VOL=SER=SR0001,UNIT=SYSDA
//          DD DISP=SHR,DSN=SYS1.MACLIB,                           BCP
//  VOL=SER=SR0001,UNIT=SYSDA
//          DD DISP=SHR,DSN=SYS1.MODGEN,                           BCP
//  VOL=SER=SR0001,UNIT=SYSDA
//          DD DISP=SHR,DSN=SYS1.SBDTMAC,     Bulk Data Transfer (BDT)
//  VOL=SER=SR0001,UNIT=SYSDA
//          DD DISP=SHR,DSN=SYS1.SEZACMAC,                       TCPIP
//  VOL=SER=SR0001,UNIT=SYSDA
//          DD DISP=SHR,DSN=SYS1.SICEUSER,                      DFSORT
//  VOL=SER=SR0001,UNIT=SYSDA
//          DD DISP=SHR,DSN=SYS1.NFSMAC,                           NFS
//  VOL=SER=SR0001,UNIT=SYSDA
//          DD DISP=SHR,DSN=SYS1.SDVGMAC0,          NetView FTP (NFTP)
//  VOL=SER=SR0001,UNIT=SYSDA
//          DD DISP=SHR,DSN=SYS1.SDBNIMAC,                        RMDS
//  VOL=SER=SR0001,UNIT=SYSDA
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(9,9)),
//             DCB=BUFNO=25
//SYSPRINT  DD SYSOUT=*,OUTPUT=*.JESDS
//SYSLIN    DD DISP=(NEW,PASS),DSN=&&OBJECT,
//             UNIT=SYSDA,SPACE=(CYL,(9,9)),
//             DCB=(BLKSIZE=4080,LRECL=80,RECFM=FB,BUFNO=25)
//SYSIN     DD *
         TITLE 'Dataset Audit Facility (DAF)'
DAF      START 0
**********************************************************************
*                                                                    *
* Name:            Dataset Audit Facility (DAF)                      *
*                                                                    *
* Description:     SMF post processor for dataset activity           *
*                                                                    *
* Function:        Reads standard IBM SMF records, and based upon    *
*                  user supplied selection criteria, generates       *
*                  detailed dataset audit trail reports              *
*                                                                    *
* Contact:         Michael J. Cleary                                 *
*                  IBM Global Services - AmerisourceBergen           *
*                  877-343-1849 (voice)                              *
*                  mailto:michaeljosephcleary@yahoo.com              *
*                  http://www.geocities.com/michaeljosephcleary/     *
*                                                                    *
* Installation:                                                      *
*                                                                    *
* 1) DAF PDS contains the following.                                 *
*                                                                    *
*    Member    Type      Contents                                    *
*    ======    ====      ========                                    *
*    $COMMON   ASM/MACRO Common Macros                               *
*    DAF       ASM/JCL   DAF                                         *
*                                                                    *
* 2) The following IBM APARs should be applied to ensure full        *
* and valid functionality of DAF.                                    *
*                                                                    *
*    OA02569 Invalid SMF Record Type 60                              *
*            DEFINE USERCATALG request, SMF60ENM contains garbage    *
*    OA02792 Assembly error in CSFSMF82                              *
*            ASMA043E Previously defined symbol - SMF82xxx (numerous)*
*    OA05526 Invalid SMF Record Type 66                              *
*            SMF66 SMF66ENM contains hexadecimal zeroes              *
*    OA06712 Assembly error in ERBSMF78                              *
*            ASMA044E Undefined symbol - VSDGAT                      *
*            ASMA080E Statement is unresolvable                      *
*    OA08693 Invalid SMF Record Type 42                              *
*            SMF42 subtype 21 fields are incorrect                   *
*    OA10091 Not generating SMF Record Type 42                       *
*            SMF42 not generated for PDSEs                           *
*    OA10174 Assembly error in GFSAUSMF                              *
*            ASMA043E Previously defined symbol - SMF42xxx (numerous)*
*            If APAR not on - set ST_DFSMS07=NO                      *
*    OA10985 Invalid SMF Record Type 42                              *
*            SMF42 S42SCNME contains trailing hexadecimal zeroes     *
*    OA11634 Assembly error in ERBSMF78                              *
*            ASMA057E Undefined operation code - ERBSM/R783MCS       *
*    OA14193 Invalid SMF Record Type 60                              *
*            SMF60 SMF60ENM contains trailing 1 byte of x'00'        *
*    OW47627 Assembly error in CSFSMF82                              *
*            ASMA043E Previously defined symbol - SMF82RKL           *
*    OW51179 Not generating SMF Record Type 42                       *
*            SMF42 subtypes 15 through 19 not generated              *
*    OW53524 Assembly error in IGWSMF                                *
*            &SMF42_0K and &SMF42_0L not defined                     *
*    PK01634 Invalid SMF Record Type 119                             *
*            SMF119 fields contain trailing hexadecimal zeroes       *
*    PQ83055 Invalid SMF Record Type 118                             *
*            SMF118 subtype 3 fields are incorrect                   *
*    PQ91647 Not generating SMF Record Type 119                      *
*            SMF119 FTP JES Delete not generating records            *
*                                                                    *
*    If you for whatever reason can not put on all of these IBM SMF  *
*    APARs, you might want to set &CHECKDSN to 'NO' to stop the      *
*    validity checking of dataset names if you are getting a slew    *
*    of DAF610I messages.                                            *
*                                                                    *
* 5) Activate SMF records and customize DAF                          *
*                                                                    *
* AO       Add SMF_RECORD_ID=nnn to member OPTIONS                   *
*          Set &RT_AO to nnn                                         *
* DFPACS   Set SMFRECNO to nnn in SYS1.SACBCNTL(IGDACSSC)            *
*          Install it as the system ACS Storage Class Exit           *
*          Set &RT_DFPACS to nnn                                     *
* DFSORT   Add SMF=FULL to ICEAM1/2/3/4                              *
*          Set &RT_DFSORT to 016                                     *
* HSM      Add SETSYS SMF(xxx) to member ARCCMDxx                    *
*          Set &RT_HSMFSR to xxx+1                                   *
* NFTP     Add SMFREC=nnn to NFTP Queue Handler Initialization Parms *
*          Add SMFREC=nnn to NFTP Server Initialization parameters   *
*          Set &RT_NFTP to nnn                                       *
* RMDS     Add SMFTYPE nnnn to member DBNCOM                         *
*          Set &RT_RMDS to nnn                                       *
* RMF      Add CHAN to RMFMON I member ERBRMF00                      *
*          Add DEVICE(DASD) to RMFMON I member ERBRMF00              *
*          Add ENQ(DETAIL) to RMFMON I member ERBRMF00               *
*          Add PAGESP to RMFMON I member ERBRMF00                    *
*          Add FCD to RMFMON I member ERBRMF00                       *
*          Add RECORD to RMFMON I member ERBRMF00                    *
*          Add HFSNAME(ADD(hfsname)) to RMFMON III member ERBRMF04   *
* RMM      Add OPTION SMFAUD(yyy) to member EDGRMMxx                 *
*          Add OPTION SMFSEC(zzz) to member EDGRMMxx                 *
*          Set &RT_RMMAUD to yyy                                     *
*          Set &RT_RMMSEC to zzz                                     *
* SMF      Add ACTIVE to SMF parms                                   *
*          Add REC(PERM) to SMF parms                                *
*          Record all record types supported by DAF                  *
* TCPIP    For FTP Server records add to FTPD parms one of these:    *
*          Add SMF STD TYPE119 (Both 118/119)                        *
*          Add SMF TYPE119 (Only 119)                                *
*          Add SMF STD (Only 118)                                    *
*              Note:  TYPE119 is new in z/OS 1.2                     *
*          For FTP Client records add to TCPIP parms one of these:   *
*          Add SMFCONFIG FTPCLIENT TYPE119 FTPCLIENT (Both 118/119)  *
*          Add SMFCONFIG TYPE119 FTPCLIENT (Only 119)                *
*          Add SMFCONFIG FTPCLIENT (Only 118)                        *
*              Note:  TYPE119 FTPCLIENT is new in z/OS 1.2           *
*          Set &RT_TCPIP  to 118                                     *
*          Set &RT_TCPIPX to 119                                     *
*                                                                    *
* 4) Assemble and link-edit DAF.                                     *
*                                                                    *
* The assembly and linkedit/bind must both get a                     *
* return code of zero.  Incorrect settings of                        *
* the &RT_ variables can cause the assembly to                       *
* fail because it is trying to use SMF record                        *
* mapping macros that do not exist on your                           *
* system.  Ensure that all of the &RT_ variables                     *
* are set to correctly match your installed                          *
* products.                                                          *
*                                                                    *
* 6) Install SMF job initiation exit IEFUJI (optional)               *
*                                                                    *
* Before performing this installation step, it is very important to  *
* validate that no other modifications are being made to the User    *
* Identification field of the SMF Common Exit Parameter Area.        *
* Computer Associates has a job scheduler called CA-7 (formerly      *
* UCC7) that, depending on installation options, can store a one     *
* byte flag in either the User Identification, Reader Date or        *
* Reader Time fields of the SMF Common Exit Parameter Area.          *
*                                                                    *
* To fully exploit the Text Scanning Keywords USERID, this optional  *
* installation step must be performed.  The sole purpose of this     *
* installation step is to populate the User Identification field of  *
* the SMF Common Exit Parameter Area with the USERID from the ACEE.  *
* This is done because SMF will then place this USERID in all        *
* subsequent SMF records for the life of that particular job.        *
* There are a few different ways of accomplishing this, but this     *
* seems to be the most straight forward.  This code can be inserted  *
* into an existing IEFUJI, or can be introduced as a new IEFUJI.     *
* Details on IEFUJI can be obtained from the IBM SMF manual.         *
*                                                                    *
* Executable Code                                                    *
*                                                                    *
* L    R8,0(R1)            Common Exit Parameter Area Address        *
* LA     R5,X'10'                  CVT Pointer                       *
* L    R5,0(,R5)           CVT Address                               *
* USING  CVT,R5            Reference CVT                             *
* L    R5,CVTTCBP          ASCB Pointer                              *
* L    R7,12(,R5)                  ASCB Address                      *
* USING  ASCB,R7           Reference ASCB                            *
* L    R7,ASCBASXB         ASXB Address                              *
* USING  ASXB,R7           Reference ASXB                            *
* L    R7,ASXBSENV         ACEE Address                              *
* USING  ACEE,R7           Reference ACEE                            *
* MVC  20(8,R8),ACEEUSRI   Move USERID                               *
*                                                                    *
* Non-executable Code                                                *
*                                                                    *
* CVT  DSECT=YES Communication Vector Table (CVT)                    *
* IHAASCB          Address Space Control Block (ASCB)                *
* IHAASXB          Address Space Extension Block (ASXB)              *
* IHAACEE          Accessor Environment Element (ACEE)               *
*                                                                    *
* Notes:           QSAM read/write access to a member will have      *
*                  DSN and member name in the SMF record 14/15.      *
*                                                                    *
*                  BPAM read/write access to a member only has       *
*                  the DSN in the SMF record 14/15.                  *
*                                                                    *
*                  BPAM member deletes have the DSN and member       *
*                  names in the SMF record 42.                       *
*                                                                    *
*                  DAFOUT is perfect to point to the held output.    *
*                  In SDSF, do an SE on the DD and exclude, find     *
*                  and delete to your hearts content.  If this does  *
*                  not sound beneficial, merely DD DUMMY DAFOUT.     *
*                                                                    *
* Abend codes:     U0800 - Control Statement Problem                 *
*                  U0801 - System Macro Problem                      *
*                                                                    *
* Addressing mode: 31                                                *
*                                                                    *
* ASC mode:        Primary                                           *
*                                                                    *
* Change Log:                                                        *
* 2006-02-23 - Version 1 Release 4 Modification 6                    *
*              Add Customization Variable CHECKDSN                   *
*              Add Customization Variable SNAPLIMIT                  *
*              Add keyword PGM                                       *
*              Add non standard subtype support SMF Record Type NFTP *
*              Add Product Specific Support Error - AO               *
*              Add SMF Record AO support                             *
*              Add SMF Record DFPACS support                         *
*              Add SMF Record Type 19 support                        *
*              Correct DAF042 S021 Unpredictable results             *
*              Enhance numerous SMF Record Types                     *
* 2005-10-29 - Version 1 Release 4 Modification 5                    *
*              Add keyword CLASS                                     *
*              Add keyword CRTDT                                     *
*              Add keyword EXPDT                                     *
*              Add Product Specific Support Error - RMDS             *
*              Add SMF Record RMDS support                           *
*              Add SMF Record Type 118 Subtype customization         *
*              Correct assembly error NODFSMS5 missing (RT_DFSMS=0)  *
*              Correct DAF036 Invalid Triplet for all records        *
*              Correct DAF042 S006 Invalid DSN for VTOC              *
*              Correct DAF077 Invalid Triplet when no contention     *
*              Correct DAFCC  Invalid subtype count                  *
*              Correct DAFES  Exclude T002/T003 from High / Low      *
*              Correct DAFIP4 Missing zero values                    *
*              Enhance DAFLOG                                        *
*              Enhance numerous SMF Record Types                     *
* 2005-09-14 - Version 1 Release 4 Modification 4                    *
*              Add keyword HOST                                      *
*              Add keyword IP                                        *
*              Add keyword PORT                                      *
*              Add non standard subtype support SMF Record Type 22   *
*              Add non standard subtype support SMF Record Type 90   *
*              Add subtype information to statistics                 *
*              Add subtype to fixed portion of DAFRPT                *
*              Add Product Specific Support Error - BatchPipes       *
*              Add Product Specific Support Error - BDT              *
*              Add Product Specific Support Error - DFSORT           *
*              Add Product Specific Support Error - NFTP             *
*              Add Product Specific Support Error - TCPIP            *
*              Add Product Specific Support Error - TCPIPX           *
*              Add SMF Record NFTP support                           *
*              Add SMF Record Type 43 support for DAFLOG/DAFSTAT     *
*              Add SMF Record Type 45 support for DAFLOG/DAFSTAT     *
*              Add SMF Record Type 74 subtype 6 support              *
*              Add SMF Record Type 74 subtype 7 support              *
*              Change DAFSMF BUFNO=150 and moved it above the line   *
*              Check JCL DD Statements                               *
*              Correct DAFGR to check for no records selected        *
*              Correct DAFSS to check for no records selected        *
*              Correct HSMFSR full volume dump hex zeroes dsn logic  *
*              Correct RMMAUD changed volume blank dsn logic         *
*              Enhance numerous SMF Record Types                     *
*              Enhance DAFLOG                                        *
* 2005-02-19 - Version 1 Release 4 Modification 3                    *
*              Add keyword DATACLASS                                 *
*              Add keyword DSORG                                     *
*              Add keyword LOGSTREAM                                 *
*              Add keyword MGMTCLAS                                  *
*              Add keyword RECFM                                     *
*              Add keyword STORCLASS                                 *
*              Add SMF Record Type 2 & 3 support for DAFLOG/DAFSTAT  *
*              Add SMF Record Type 42 subtype 16 support             *
*              Add SMF Record Type 42 subtype 7 support              *
*              Add SMF Record Type 79 support                        *
*              Add SMF Record Type 88 support                        *
*              Correct DAF042 Subtype 3 SMF42EAC compare logic       *
*              Correct DAF090 defined attribute references           *
*              Enhance SMF Record SNAP processing                    *
* 2004-09-03 - Version 1 Release 4 Modification 2                    *
*              Add DAFOUT - No headers, one dataset per record       *
*              Add SMF Record Type 91 Subtype 21 support             *
*              Convert source/object dates to ISO 8601 (yyyy-mm-dd)  *
* 2004-06-01 - Version 1 Release 4 Modification 1                    *
*              Add SMF Record Type 119 support                       *
*              Add SMF Record Type 78 support                        *
*              Add SMF Record Type 92 Subtype 7 support              *
* 2004-05-26 - Version 1 Release 4 Modification 0                    *
*              Correct DAF059 processing                             *
* 2003-11-14 - Version 1 Release 3 Modification 1                    *
*              Abend S0Cx when processing DAFSMF as VSAM             *
*              Abend S0Cx when volumes greater than 10               *
*              Abend S0C4 when DAFSMF is VSAM                        *
*              Abend S0C4 when SMF Record Type 14/15 JFCBNVOL > 5    *
*              Add customization for SMF Record Type 82              *
*              Add SMF Record Type 118 rename support                *
*              Add SMF Record Type 42 subtypes 10, 20 & 21 support   *
*              Add SMF Record Type 59 support                        *
*              BUFNO=10, except DAFRPT,DAFSMF,SORTIN,SORTOUT are 50  *
*              BUFNO=10, except DAFRPT,SORTIN,SORTOUT=25, DAFSMF=50  *
*              Changed DAFSMF to BUFNO=255                           *
*              Correct DAF always call DAFSS and DAFGR               *
*              Correct DAFPP format header record                    *
*              Correct DAFPV to only process unique volume serials   *
*              Correct DAFTERM only CLOSE DAFTRACE if OPEN           *
*              Correct DAF064 extent processing                      *
*              Enhance DAFLOG                                        *
*              Invoke IGWSMF differently depending on &ST_DFSMSxx    *
*              Removed hardcoded SMF record mapping for CASORT       *
*              Removed hardcoded SMF record mapping for FILEAID      *
*              Removed CA-Sort, File-Aid, SRS, STOPX37, SyncSort     *
*              Restructure Return Codes - No DAFSMF Records Provided *
* 2000-12-21 - Version 2 Release 9 Modification 0                    *
*              Add customization for SMF Record Type 42              *
*              Add lowercase and / to TBLDSN table                   *
*              Add H entry for HFS to TFTPDT table                   *
*              Add SMF Record Type 42 subtypes 6 & 9 support         *
*              Bypass validity check for Defrag Special DSN (DAFCC)  *
*              BUFNO=10, except DAFRPT,DAFSMF,SORTIN,SORTOUT are 50  *
*              Move Major Enqueue Table to $COMMON                   *
*              Only resolve mask on character keywords (DAFCC)       *
*              Only SNAP first 5 invalids of each type (DAFCC)       *
*              Special DEFRAG DSN (DAF017)                           *
*              Update the Major Enqueue Table ($COMMON)              *
*              Update the Major Enqueue Table ($COMMON)              *
* 1999-04-20 - Version 2 Release 6 Modification 0                    *
*                                                                    *
* Copyright:       Michael J. Cleary                                 *
*                                                                    *
* Control blocks:  Numerous                                          *
*                                                                    *
* CSECTs:          Numerous                                          *
*                                                                    *
* Dependencies:    None                                              *
*                                                                    *
* Disclaimer:      AmerisourceBergen neither expresses nor implies   *
*                  any warranty as to the fitness of these           *
*                  computer programs for any function.  The use      *
*                  of these programs or the results therefrom is     *
*                  entirely at the risk of the user.                 *
*                  Consequently, the user may modify these           *
*                  programs in any way they thinks fit.  These       *
*                  programs are Freeware and may be freely           *
*                  copied.  They may be freely distributed to any    *
*                  other party on condition that no inducement       *
*                  beyond reasonable handling costs is offered or    *
*                  accepted by either side for such distribution.    *
*                                                                    *
* DSECTs:          Numerous                                          *
*                                                                    *
* Entry points:    DAF                                               *
*                                                                    *
* Environment:     Any level of MVS, OS/390, z/OS.e or z/OS          *
*                                                                    *
* Execution JCL:                                                     *
*                                                                    *
* //ZT15$DAF JOB (DAF),'DAF',CLASS=U,                                *
* // MSGCLASS=X,MSGLEVEL=(1,1),NOTIFY=ZT15                           *
* //JESDS OUTPUT PAGEDEF=LDUP,FORMDEF=LDUP,JESDS=ALL,FORMS=3H25      *
* //DAF    EXEC PGM=DAF                                              *
* //STEPLIB  DD DISP=SHR,DSN=ZTGP01.MJCUTIL.LINKLIB                  *
* //CAOESTOP DD DUMMY                               Turn off Symdump *
* //ABNLIGNR DD DUMMY                              Turn off AbendAid *
* //DAFSMF   DD DISP=SHR,DSN=ZTGP01.DAF.IVP                          *
* //DAFLOG   DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //DAFOUT   DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //DAFRPT   DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //DAFSNAP  DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //DAFSTAT  DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //DAFTRACE DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //SYSPRINT DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //SYSUDUMP DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //SYSOUT   DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //SORTIN   DD UNIT=SYSDA,SPACE=(CYL,(555,55))                      *
* //SORTOUT  DD UNIT=SYSDA,SPACE=(CYL,(555,55))                      *
* //DAFCS    DD *                                                    *
*   (control statements go here)                                     *
* keyword operator value                                             *
*                                                                    *
* Keyword   ML  Description                Alias1            Alias2  *
* =======   ==  ===========                ======            ======  *
* CATALOG   44  Catalog name               CAT                       *
* CLASS     08  Class name                                           *
* CRTDT     05  Creation Date - yyddd                                *
* DATACLAS  08  Data class name            DATACLASS                 *
* DATE      07  Date - yyyyddd                                       *
* DDNAME    08  Data definition name       DDN               DD      *
* DSNAME    44  Dataset name               DATASET           DSN     *
* DSORG     03  Dataset organization                                 *
* DUP       16  Number of updates                                    *
* EXCP      16  Execute Channel Program                              *
* EXPDT     05  Expiration Date - yyddd                              *
* GROUP     08  Group identification                                 *
* HOST      08  Host name                  HOSTNAME                  *
* IP        39  IP address                 IPADDRESS                 *
* JOBNAME   08  Job name                   JOB                       *
* LOGSTREAM 26  Logstream name                                       *
* LRECL     05  Logical record length                                *
* MAJOR     08  Major enqueue name                                   *
* MGMTCLAS  08  Management class name      MANAGEMENTCLASS           *
* MEMBER    08  Member name                MEM                       *
* MINOR     44  Minor enqueue name                                   *
* NUP       16  Number of updates                                    *
* PORT      04  Port number                PORTNUMBER                *
* PGM       08  Program name               PROGRAM                   *
* RECFM     05  Record format                                        *
* RECORD    03  SMF Record type            REC                       *
* SUBTYPE   03  SMF Record subtype         STY                       *
* STORCLAS  08  Storage class name         STORAGECLASS              *
* SYSTEM    04  System identification      SYSID                     *
* TIME      11  Time - hh.mm.ss.hh                                   *
* USERID    08  User identification        USER                      *
* VOLUME    06  Volume serial              VOL               VOLSER  *
* VVDS      44  VSAM volume dataset name                             *
* WTX       04  Wait Time Max                                        *
*                                                                    *
* Operator      Description                                          *
* ========      ===========                                          *
* EQ            Equal to                                             *
* GE            Greater than or equal to                             *
* GT            Greater than                                         *
* LE            Less than or equal to                                *
* LT            Less than                                            *
* NE            Not equal to                                         *
*                                                                    *
* Examples:                                                          *
*                                                                    *
* To find all dataset accesses by all D72 prefixed jobs              *
* DSN EQ SYS1                                                        *
* JOB EQ D72                                                         *
*                                                                    *
* Input Files:     Control statements on DAFCS                       *
*                  SMF records on DAFSMF (QSAM or VSAM)              *
*                                                                    *
* Key:             8                                                 *
*                                                                    *
* Language:        MVS 370 assembler                                 *
*                                                                    *
* Linkage:         Standard linkage for entry/exit                   *
*                                                                    *
* Location:        Private Area                                      *
*                                                                    *
* Macros:          Numerous                                          *
*                                                                    *
* Messages:        DAF5xxt - Informational                           *
*                  DAF6xxt - Trace                                   *
*                  DAF7xxt - Return Code                             *
*                  DAF8xxt - Errors (User Abend)                     *
*                  DAF9xxt - System Error                            *
*                                                                    *
*                  Where t is: I - Informational                     *
*                              W - Warning                           *
*                              E - Error                             *
*                              S - Sevre                             *
*                              T - Terminal                          *
*                                                                    *
* Mode:            Task                                              *
*                                                                    *
* Module type:     Procedure                                         *
*                                                                    *
* Output Files:    Log on DAFLOG                                     *
*                  Output on DAFOUT                                  *
*                  Report on DAFRPT                                  *
*                  Invalid SMF records on DAFSNAP                    *
*                  Statistics on DAFSTAT                             *
*                  Trace on DAFTRACE                                 *
*                                                                    *
* Parameter list:  Pointed to by R1                                  *
*                  . 00(R1) - Parameter length                       *
*                  . 02(R1) - Parameter address                      *
*                                                                    *
* Patch label:     None                                              *
*                                                                    *
* Reason codes:    None                                              *
*                                                                    *
* Recovery:        None                                              *
*                                                                    *
* Reentrancy:      Reentrant                                         *
*                                                                    *
* Registers:       Saved:         0-12,14-15 via SAVE(14,12)         *
*                  Restored:      0-12,14 via RETURN(14,12),RC=(15)  *
*                  Base:          11/12                              *
*                  Dynamic work:  10                                 *
*                  Static work:   9                                  *
*                                                                    *
* Work Files:      Sort input on SORTIN                              *
*                  Sort output on SORTOUT                            *
*                                                                    *
*  Multiple Report Records:                                          *
*  16 - Input DSN / SORTOUT DSN / OUTFIL DSN                         *
*  18 - DSN Before Rename / DSN After Rename                         *
*  36 - Catalog DSN / Portable DSN                                   *
*  42 - ACDS DSN / SCDS DSN                                          *
*  59 - Origin DSN / Destination DSN                                 *
*  66 - DSN Before Rename / DSN After Rename                         *
*  68 - DSN Before Rename / DSN After Rename                         *
*  79 - RMF Monitor II Activity                                      *
*  81 - UADS DSN / Active_RACF DSN / Backup_RACF DSN                 *
*  82 - DSN Before Refresh / DSN After Refresh                       *
*  90 - SMF DSN Before Switch / SMF DSN After Switch                 *
* 118 - TCPIP Statistics - FTP DSN Before Rename / DSN After Rename  *
* 119 - TCPIP Statistics - FTP DSN Before Rename / DSN After Rename  *
*                                                                    *
* Return codes:    00 - Normal                                       *
*                  04 - No DAFSMF Records Selected                   *
*                  08 - No DAFSMF Records Provided                   *
*                  12 - Control Statement Problem                    *
*                  16 - Control Statement Problem                    *
*                  20 - JCL DD Statement Missing                     *
*                                                                    *
* Residence mode:  24                                                *
*                                                                    *
* Savearea:        Dynamically obtained storage                      *
*                                                                    *
* Serialization:   None                                              *
*                                                                    *
* Size:            Approximately 175KB                               *
*                                                                    *
* Supported SMF Records:                                             *
*                                                                    *
* Rty Sty Description                                                *
* 000 000 IPL                                                        *
* 002 000 Dump Header                                                *
* 003 000 Dump Trailer                                               *
* 007 000 Data Lost                                                  *
* 014 000 INPUT or RDBACK Data Set Activity                          *
* 015 000 OUTPUT UPDAT INOUT or OUTIN Data Set Activity              *
* 016 000 DFSORT Statistics                                          *
* 017 000 Scratch Data Set Status                                    *
* 018 000 Rename Non-VSAM Data Set Status                            *
* 019 000 Direct Access Volume                                       *
* 022 000 Configuration                                              *
* 022 009 - Activate                                                 *
* 024 000 JES2 Spool Offload                                         *
* 024 001 - Job transmitted                                          *
* 024 002 - Job received                                             *
* 024 003 - SYSOUT transmitted                                       *
* 024 004 - SYSOUT received                                          *
* 036 000 Integrated Catalog Facility Catalog                        *
* 042 000 DFSMS Statistics and Configuration                         *
* 042 003 - SMS Configuration                                        *
* 042 006 - Dataset Statistics                                       *
* 042 007 - File Timeout Statistics                                  *
* 042 009 - X37 Abend                                                *
* 042 010 - Volume Selection Failure                                 *
* 042 016 - Dataset Response Time Summary                            *
* 042 020 - STOW Initialize                                          *
* 042 021 - Member Delete                                            *
* 043 000 JESx Start                                                 *
* 045 000 JESx Stop                                                  *
* 059 000 Bulk Data Transfer (BDT)                                   *
* 060 000 VSAM Volume Data Set Updated                               *
* 061 000 Integrated Catalog Facility Define Activity                *
* 062 000 VSAM Component or Cluster Opened                           *
* 063 000 VSAM Catalog Entry Defined                                 *
* 064 000 VSAM Component or Cluster Status                           *
* 065 000 Integrated Catalog Facility Delete Activity                *
* 066 000 Integrated Catalog Facility Alter Activity                 *
* 067 000 VSAM Catalog Entry Deleted                                 *
* 068 000 VSAM Catalog Entry Renamed                                 *
* 069 000 VSAM Data Space Defined, Extended or Deleted               *
* 073 000 RMF Channel Path Activity                                  *
* 073 001 - Channel Path Activity                                    *
* 074 000 RMF Activity of Several Resources                          *
* 074 001 - Device Activity                                          *
* 074 006 - Hierarchical File System Statistics                      *
* 074 007 - FICON Director Statistics                                *
* 075 000 RMF Page Data Set Activity                                 *
* 075 001 - Page Data Set Activity                                   *
* 077 000 RMF Enqueue Activity                                       *
* 077 001 - Enqueue Activity                                         *
* 078 000 RMF Virtual Storage and I/O Queuing Activity               *
* 078 003 - I/O Queuing Activity                                     *
* 079 000 RMF Monitor II Activity                                    *
* 079 006 - Reserve Data                                             *
* 079 007 - Enqueue Contention Data                                  *
* 079 011 - Page Data Set Activity                                   *
* 080 000 RACF Processing                                            *
* 081 000 RACF Initialization                                        *
* 082 000 Integrated Cryptographic Service Facility (ICSF)           *
* 082 001 - Initialization                                           *
* 082 007 - KEU Key Part Entry                                       *
* 082 008 - CKDS Refresh                                             *
* 082 009 - Dynamic CKDS Update                                      *
* 082 013 - Dynamic PKDS Update                                      *
* 082 021 - ICSF Sysplex Group Change Section                        *
* 083 000 RACF Audit                                                 *
* 083 001 - Security Label Audit                                     *
* 083 002 - Enterprise Identity Mapping (EIM) Audit                  *
* 088 000 System Logger Data                                         *
* 088 001 - Log Stream Activity                                      *
* 090 000 System Status                                              *
* 090 005 - Set SMF                                                  *
* 090 006 - Switch SMF                                               *
* 090 007 - Halt EOD                                                 *
* 090 009 - IPL SMF                                                  *
* 090 013 - SETSMF                                                   *
* 090 015 - Set SMF (Restart SMF)                                    *
* 090 026 - IPL LOGREC                                               *
* 091 000 BatchPipes/MVS Statistics                                  *
* 091 021 - Dataset Close                                            *
* 092 000 OpenMVS File System Activity                               *
* 092 001 - File System Mount                                        *
* 092 002 - File System Quiesced                                     *
* 092 004 - File System Unquiesced                                   *
* 092 005 - File System Unmounted                                    *
* 092 006 - File System Remounted                                    *
* 092 007 - File System Move                                         *
* 118 000 TCP/IP Statistics                                          *
* 118 003 - FTP Client                                               *
* 118 070 - FTP Server Append                                        *
* 118 071 - FTP Server Delete                                        *
* 118 072 - FTP Server Logon Failure                                 *
* 118 073 - FTP Server Rename                                        *
* 118 074 - FTP Server Retrieve                                      *
* 118 075 - FTP Server Store                                         *
* 119 000 TCP/IP Statistics                                          *
* 119 003 - FTP Client                                               *
* 119 070 - FTP Server                                               *
* 119 072 - FTP Server Logon Failure                                 *
* 127 000 DFSMSdfp ACS                                               *
* 254 000 Allocation Optimizer (AO)                                  *
* 254 001 - Subsystem Activity                                       *
* 254 003 - Processing Activity                                      *
* 217 000 Report Management and Distribution System (RMDS)           *
* 242 000 DFSMSrmm Audit                                             *
* 243 000 DFSMSrmm Security                                          *
* 241 000 DFSMShsm FSR                                               *
* 252 000 NetView FTP (NFTP)                                         *
* 252 001 - ADD Queue x"01"                                          *
* 252 034 - OBTAIN Queue x"22"                                       *
* 252 036 - NOTIFY Queue x"24"                                       *
* 252 081 - Server Finished Request x"51"                            *
*                                                                    *
* State:           Problem                                           *
*                                                                    *
* Status:          Version 1 Release 4 Modification 6                *
*                                                                    *
* Tables:          Numerous                                          *
*                                                                    *
* Test Data:                                                         *
*                                                                    *
*   024     - Sam Knutson                                            *
*   036.000 - Sam Knutson                                            *
*   074.007 - Sam Knutson                                            *
*   074     - Sam Knutson                                            *
*   079     - Sam Knutson                                            *
*   082     - Ben Alford                                             *
*   119     - Randolph Shumate                                       *
*   127     - Alfonso Muñoz de Pablo                                 *
*   241     - Michael Mayne (HSMFSR)                                 *
*   242     - Michael Mayne (RMMAUD)                                 *
*                                                                    *
* User Exits:      None                                              *
*                                                                    *
* Virtual Storage: Minimal                                           *
*                                                                    *
* Wait states:     None                                              *
*                                                                    *
* X-memory mode:   HASID=PASID=SASID                                 *
*                                                                    *
**********************************************************************
         TITLE 'Declare Globals'
*
**       Declare Globals
*
         GBLA  &GCOMPCTR           Compare Counter
         GBLA  &GMODCTR            Module count
         GBLA  &GMODULE            Module
         GBLA  &GOPCTR             Operator counter
         GBLC  &CHECKDSN           Check DSN
         GBLC  &GCOMPTXT(250)      Compare Text
         GBLC  &GCOMPVAL(250)      Compare Value
         GBLC  &GMODNAM(99)        Module Name
         GBLC  &GTRACE             Trace (YES/NO)
         GBLC  &GTRACEDD           Trace DDNAME (DDNAME)
         GBLC  &RT_AO              AO Record Type (nnn/000)
         GBLC  &RT_BATCHPIPES      BatchPipes Record Type (nnn/000)
         GBLC  &RT_BDT             BDT Record Type (nnn/000)
         GBLC  &RT_DFPACS          DFP ACS Record Type (nnn/000)
         GBLC  &RT_DFSMS           DFSMS Record Type (nnn/000)
         GBLC  &RT_DFSORT          DFSORT Record Type (nnn/000)
         GBLC  &RT_HSMFSR          HSM FSR Record Type (nnn/000)
         GBLC  &RT_ICSF            ICSF Record Type (nnn/000)
         GBLC  &RT_NFTP            NFTP Record Type (nnn/000)
         GBLC  &RT_RACFAUDIT       RACF Audit Record Type (nnn/000)
         GBLC  &RT_RACFINIT        RACF Init Record Type (nnn/000)
         GBLC  &RT_RACFPROC        RACF Process Record Type (nnn/000)
         GBLC  &RT_RMDS            RMDS Record Type (nnn/000)
         GBLC  &RT_RMF             RMF Record Type (nnn/000)
         GBLC  &RT_RMMAUD          RMM Audit Record Type (nnn/000)
         GBLC  &RT_RMMSEC          RMM Security Record Type (nnn/000)
         GBLC  &RT_TCPIP           TCPIP Record Type (nnn/000)
         GBLC  &RT_TCPIPX          TCPIPX Record Type (nnn/000)
         GBLC  &RT_USS             USS Record Type (nnn/000)
         GBLC  &ST_DFSMS03         DFSMS ST 03 (YES/NO)
         GBLC  &ST_DFSMS06         DFSMS ST 06 (YES/NO)
         GBLC  &ST_DFSMS07         DFSMS ST 07 (YES/NO)
         GBLC  &ST_DFSMS09         DFSMS ST 09 (YES/NO)
         GBLC  &ST_DFSMS10         DFSMS ST 10 (YES/NO)
         GBLC  &ST_DFSMS16         DFSMS ST 16 (YES/NO)
         GBLC  &ST_DFSMS20         DFSMS ST 20 (YES/NO)
         GBLC  &ST_DFSMS21         DFSMS ST 21 (YES/NO)
         GBLC  &ST_FTPAPPE         FTP Server Append ST (nnn/000)
         GBLC  &ST_FTPCLIENT       FTP Client ST (nnn/000)
         GBLC  &ST_FTPCOMMON       FTP Server Common ST (nnn/000)
         GBLC  &ST_FTPDEL          FTP Server Delete ST (nnn/000)
         GBLC  &ST_FTPLOGN         FTP Server Logon Failed ST (nnn/000)
         GBLC  &ST_FTPREN          FTP Server Rename ST (nnn/000)
         GBLC  &ST_FTPRETR         FTP Server Retrieve ST (nnn/000)
         GBLC  &ST_FTPSTOR         FTP Server Store ST (nnn/000)
         GBLC  &SNAPLIMIT          SNAP Limit (nnn/000)
         TITLE 'Installation Customization'
*
**       Installation Customization
*
&CHECKDSN       SETC 'YES' Check DSN (YES/NO)
&GTRACE         SETC 'NO ' Trace (YES/NO)
&GTRACEDD       SETC 'DAFTRACE' Trace DDNAME (DDNAME)
&RT_AO          SETC '254' AO (nnn/000)
&RT_BATCHPIPES  SETC '091' BatchPipes (nnn/000)
&RT_BDT         SETC '059' BDT (nnn/000)
&RT_DFPACS      SETC '127' DFP ACS (nnn/000)
&RT_DFSMS       SETC '042' DFSMS (nnn/000)
&RT_DFSORT      SETC '016' DFSORT (nnn/000)
&RT_HSMFSR      SETC '241' HSM FSR (nnn/000)
&RT_ICSF        SETC '082' ICSF (nnn/000)
&RT_NFTP        SETC '252' NFTP (nnn/000)
&RT_RACFAUDIT   SETC '083' RACF Audit (nnn/000)
&RT_RACFINIT    SETC '081' RACF Init (nnn/000)
&RT_RACFPROC    SETC '080' RACF Process (nnn/000)
&RT_RMDS        SETC '217' RMDS (nnn/000)
&RT_RMF         SETC '073' RMF (nnn/000)
&RT_RMMAUD      SETC '242' RMM Audit (nnn/000)         GSD 248
&RT_RMMSEC      SETC '243' RMM Security (nnn/000) GSD 249
&RT_TCPIP       SETC '118' TCPIP (nnn/000)
&RT_TCPIPX      SETC '119' TCPIPX (nnn/000)             new in z/OS 1.2
&RT_USS         SETC '092' USS (nnn/000)
&SNAPLIMIT      SETC '010' SNAP Limit (nnn/000)
&ST_DFSMS03     SETC 'YES' DFSMS ST 03 (YES/NO)          new in ESA 5.1
&ST_DFSMS06     SETC 'YES' DFSMS ST 06 (YES/NO)          new in ESA 5.1
&ST_DFSMS07     SETC 'YES' DFSMS ST 07 (YES/NO)        new in DFSMS 1.2
&ST_DFSMS09     SETC 'YES' DFSMS ST 09 (YES/NO)       new in OS/390 2.4
&ST_DFSMS10     SETC 'YES' DFSMS ST 10 (YES/NO)         new in z/OS 1.3
&ST_DFSMS16     SETC 'YES' DFSMS ST 16 (YES/NO)        new in ESA 5.2.2
&ST_DFSMS20     SETC 'YES' DFSMS ST 20 (YES/NO)         new in z/OS 1.3
&ST_DFSMS21     SETC 'YES' DFSMS ST 21 (YES/NO)         new in z/OS 1.3
&ST_FTPAPPE     SETC '070' FTP Server Append ST (nnn/000)
&ST_FTPCLIENT   SETC '003' FTP Client ST (nnn/000)
&ST_FTPCOMMON   SETC '000' FTP Server Common ST (nnn/000)
&ST_FTPDEL      SETC '071' FTP Server Delete ST (nnn/000)
&ST_FTPLOGN     SETC '072' FTP Server Logon Failed ST (nnn/000)
&ST_FTPREN      SETC '073' FTP Server Rename ST (nnn/000)
&ST_FTPRETR     SETC '074' FTP Server Retrieve ST (nnn/000)
&ST_FTPSTOR     SETC '075' FTP Server Store ST (nnn/000)
         TITLE '$COMMON - Common Macros'
         PRINT OFF                 Stop source and object printing
         COPY  $COMMON             Common Macros
         PRINT ON                  Resume source and object printing
         MACRO
         DAFMC &LABEL,&DATA,&LENGTH
         AIF   ('&LENGTH' EQ '').NOLENGTH
         CALL  DAFMC,              Move Comment                        X
               (&LABEL,&DATA,&LENGTH), Move Comment                    X
               MF=(E,W_WRK)
         MEXIT
.NOLENGTH      ANOP
         CALL  DAFMC,              Move Comment                        X
               (&LABEL,&DATA,L'&DATA), Move Comment                    X
               MF=(E,W_WRK)
         MEXIT
         MEND
         MACRO
*
**       $COMP - Compare Table Definition
*
         $COMP &V,                 Compare Value                       X
               &T,                 Compare Text                        X
               &LABEL=,            Compare Label                       X
               &LENGTH=,           Compare Length                      X
               &TYPE=ADD           INIT/ADD/BUILD
         GBLA  &GCOMPCTR           Compare Counter
         GBLC  &GCOMPTXT(250)      Compare Text
         GBLC  &GCOMPVAL(250)      Compare Value
         LCLA  &TMPCTR             Local variable - Temporary Counter
         LCLA  &TMPLEN             Local variable - Temporary Length
         LCLC  &TMPVAL             Local variable - Temporary Value
         LCLC  &TMPTXT             Local variable - Temporary Text
         AIF   ('&TYPE' EQ 'INIT').INIT,                               X
               ('&TYPE' EQ 'ADD').ADD,                                 X
               ('&TYPE' EQ 'BUILD').BUILD
         MNOTE 8,'Invalid TYPE=&TYPE - Use INIT, ADD or BUILD'
         MEXIT
.INIT          ANOP
&GCOMPCTR SETA 0
         MEXIT
.ADD           ANOP
&GCOMPCTR SETA &GCOMPCTR+1
&GCOMPVAL(&GCOMPCTR) SETC '&V'
&GCOMPTXT(&GCOMPCTR) SETC '&T'
         MEXIT
.BUILD         ANOP
&TMPLEN  SETA  66-&LENGTH
         DC    F'&LENGTH'          Compare Length
         DC    F'&GCOMPCTR'        Compare Count
         DC    C'&LABEL='          Compare Label
&TMPCTR  SETA  1
.NEXTCOMP      ANOP
         AIF   (&TMPCTR GT &GCOMPCTR).ENDCOMP
&TMPVAL  SETC  '&GCOMPVAL(&TMPCTR)'
&TMPTXT  SETC  '&GCOMPTXT(&TMPCTR)'
         DC    &TMPVAL             Compare Value
         DC    CL&TMPLEN&TMPTXT    Compare Text
&TMPCTR  SETA  &TMPCTR+1
         AGO   .NEXTCOMP
.ENDCOMP       ANOP
         MEND
         MACRO
*
**       $KWD - Keyword Table Definition
*
&LABEL   $KWD &V,&T=,&LENGTH=,                                         X
               &O1=,&O2=0,&O3=0,&O4=0,&O5=0,&O6=0,&O7=0,               X
               &O8=0,&O9=0,&OA=0,&OB=0,&OC=0,&OD=0,&OE=0,&OF=0,&D=0,   X
               &C=100,                                                 X
               &FORMAT=,                                               X
               &ALIAS1=,&ALIAS2=,&ALIAS3=,&ALIAS4=,&ALIAS5=,           X
               &DSECT=NO           DSECT
         LCLA  &OMC,&VGL
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&FORMAT' EQ 'C').FORMATOK,                            X
               ('&FORMAT' EQ 'F').FORMATOK
         MNOTE 8,'Invalid FORMAT=&FORMAT ... Must be C,F'
         MEXIT
.FORMATOK      ANOP
&OMC     SETA  &C+1
&VGL     SETA  (&LENGTH+5)*&C
         DC    6F'0'               Value getmain address
         DC    6F'0'               Operator value count
         DC    AL4(&O1)            Operand check offset 1
         DC    AL4(&O2)            Operand check offset 2
         DC    AL4(&O3)            Operand check offset 3
         DC    AL4(&O4)            Operand check offset 4
         DC    AL4(&O5)            Operand check offset 5
         DC    AL4(&O6)            Operand check offset 6
         DC    AL4(&O7)            Operand check offset 7
         DC    AL4(&O8)            Operand check offset 8
         DC    AL4(&O9)            Operand check offset 9
         DC    AL4(&OA)            Operand check offset A
         DC    F'0'                Operand check offset end
         DC    H'0'                Operand count
         DC    H'&LENGTH'          Operand max length
         DC    H'&OMC'             Operand max count plus one
         DC    H'&VGL'             Value getmain length
         AIF   ('&T' EQ 'DATASET').TYPE,                               X
               ('&T' EQ 'ENQUEUE').TYPE,                               X
               ('&T' EQ 'GENERAL').TYPE
         MNOTE 8,'Invalid T=&T ... Must be DATASET,ENQUEUE or GENERAL'
         MEXIT
.TYPE          ANOP
         DC    CL007'&T'           Keyword type
         DC    CL010'&V'           Keyword text
         DC    CL025&D             Keyword description
         DC    CL016'&ALIAS1 '     Keyword alias 1
         DC    CL016'&ALIAS2 '     Keyword alias 2
         DC    CL016'&ALIAS3 '     Keyword alias 3
         DC    CL016'&ALIAS4 '     Keyword alias 4
         DC    CL016'&ALIAS5 '     Keyword alias 5
         DC    CL001'&FORMAT'      Keyword mode (C,F)
         CNOP  0,4                 Fullword alignment
         MEXIT
.DSECT         ANOP
*
**       Keyword Table
*
D_TBLKWD DSECT                     Keyword table entry
D_KWDVGA DS    6F                  Value getmain address
D_KWDOVC DS    6F                  Operator value count
D_KWDOF1 DS    AL4                 Operand offset 1
D_KWDOF2 DS    AL4                 Operand offset 2
D_KWDOF3 DS    AL4                 Operand offset 3
D_KWDOF4 DS    AL4                 Operand offset 4
D_KWDOF5 DS    AL4                 Operand offset 5
D_KWDOF6 DS    AL4                 Operand offset 6
D_KWDOF7 DS    AL4                 Operand offset 7
D_KWDOF8 DS    AL4                 Operand offset 8
D_KWDOF9 DS    AL4                 Operand offset 9
D_KWDOFA DS    AL4                 Operand offset A
D_KWDOFF DS    F                   Operand offset end
D_KWDKVC DS    H                   Keyword value count
D_KWDOML DS    H                   Operand maximum length
D_KWDOMC DS    H                   Operand maximum count
D_KWDVGL DS    H                   Value getmain length
D_KWDTYP DS    CL007               Keyword type
D_KWDTXT DS    CL010               Keyword text
D_KWDDES DS    CL025               Keyword description
D_KWDAL1 DS    CL016               Keyword alias 1
D_KWDAL2 DS    CL016               Keyword alias 2
D_KWDAL3 DS    CL016               Keyword alias 3
D_KWDAL4 DS    CL016               Keyword alias 4
D_KWDAL5 DS    CL016               Keyword alias 5
D_KWDFMT DS    CL001               Keyword mode (C,F)
         MEND
         MACRO
*
**       $MOD - Module Table Definition
*
&LABEL   $MOD
         GBLA  &GMODCTR            Module count
         GBLC  &GMODNAM(99)        Module Name
         LCLA  &TMPCTR             Temporary count
         LCLC  &TMPNAM             Temporary name
         DC    AL4(&GMODCTR)       Module count
&TMPCTR  SETA  1
.NEXTMOD       ANOP
         AIF   (&TMPCTR GT &GMODCTR).ENDMOD
&TMPNAM  SETC  '&GMODNAM(&TMPCTR)'
         DC    AL4(&TMPNAM)        Module address
         DC    CL008'&TMPNAM'      Module name
&TMPCTR  SETA  &TMPCTR+1
         AGO   .NEXTMOD
.ENDMOD        ANOP
         MEND
         MACRO
*
**       $MSG - Copy SYSOUT Message
*
&LABEL   $MSG  &TO,&MSGID          Copy SYSOUT Message
&LABEL   L     R14,=A(TBLMSG)      Message table address
         LA    R15,4095(,R14)      Second base register
         LA    R15,1(,R15)         Second base register
         USING TBLMSG,R14,R15      Message table reference
         MVC   &TO,&MSGID          Copy SYSOUT message
         DROP  R14,R15             Message table dereference
         MEND
         MACRO
*
**       $OP - Operator Table Definition
*
&LABEL   $OP   &O,&L=0,&E=0,&H=0,&DES=Unknown,                         X
               &DSECT=NO           DSECT
         AIF   ('&DSECT' EQ 'YES').DSECT
         GBLA  &GOPCTR             Operator counter
         LCLA  &OPOFF              Operator offset
&OPOFF   SETA  &GOPCTR*4           Determine operator offset
&LABEL   DC    F'&OPOFF'           Operator offset
         DC    X'0&L'              Low
         DC    X'0&E'              Equal
         DC    X'0&H'              High
         DC    CL005'&O'           Operator
         DC    CL032&DES           Operator description
         CNOP  0,4                 Fullword alignment
&GOPCTR  SETA  &GOPCTR+1           Increment operator counter
         MEXIT
.DSECT         ANOP
*
**       Operator Table
*
D_TBLOP  DSECT                     Operator table entry
D_OPOFF  DS    F                   Operator offset
D_OPLO   DS    X                   Low
D_OPEQ   DS    X                   Equal
D_OPHI   DS    X                   High
D_OPTXT  DS    CL005               Operator text
D_OPDES  DS    CL032               Operator description
         MEND
         MACRO
*
**       $PRINT - Print A Record
*
&LABEL   $PRINT &DCB,&RECORD       Print a Record
         LCLC  &ID
&ID      SETC  'W_&DCB'
&LABEL   CALL  DAFPP,              Print a Record                      X
               (&ID,&DCB,&RECORD),                                     X
               MF=(E,W_WRK)
         $FILL &RECORD,C' '        Blank record
         MEND
         MACRO
*
**       $SMF - SMF Table Definition
*
&LABEL   $SMF  &RECORDTYPE,        Record type                         X
               &SUBTYPE,           Record subtype                      X
               &EXTRACT,           Record extract                      X
               &DESCRIPTION,       Record description                  X
               &DSECT=NO           DSECT
         AIF   ('&DSECT' EQ 'YES').DSECT
         DC    F'0'                Record count (DAFSMF)
         DC    F'0'                Record count (DAFRPT)
         DC    F'0'                Record count - Invalid DSN
         DC    AL4(&EXTRACT)       SMF extract offset
         DC    AL1(&RECORDTYPE)    SMF record type - hexadecimal
         DC    AL2(&SUBTYPE)       SMF subtype - hexadecimal
         DC    CL004'&RECORDTYPE ' SMF record type - decimal
         DC    CL004'&SUBTYPE '    SMF record type - decimal
         DC    CL058&DESCRIPTION   SMF record description
         CNOP  0,4                 Fullword alignment
         MEXIT
.DSECT         ANOP
*
**       SMF Table
*
D_TBLSMF DSECT                     SMF table entry
D_SMFSMF DS    F                   Record count (DAFSMF)
D_SMFRPT DS    F                   Record count (DAFRPT)
D_SMFINV DS    F                   Record count - Invalid DSN
D_SMFEXT DS    F                   SMF extract address
D_SMFRTY DS    BL001               SMF Record type - hexadecimal
D_SMFSTY DS    BL002               SMF Subtype - hexadecimal
D_SMFRTD DS    CL003               SMF Record type - decimal
         DS    CL001               SMF record type - separator
         DS    CL003               SMF record type - separator
         DS    CL001               SMF record type - separator
         DS    CL058               SMF record type - separator
         ORG   D_SMFRTD            SMF Record type - decimal
D_SMFRNM DS    CL066               SMF record name
         MEND
         MACRO
*
**       $TM - TM Table Definition
*
&LABEL   $TM   &T
&LABEL   DC    &T                  Text value
         MEND
         TITLE 'SMF Records'
*
**       SMF Records
*
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
SMFNNLEN DS    BL002               Record Length
SMFNNSEG DS    BL002               Segment Descriptor
SMFNNFLG DS    BL001               Header Flag
SMFNNRTY DS    BL001               Record Type
SMFNNTME DS    BL004               Record Time
SMFNNDTE DS    PL004               Record Date
SMFNNSID DS    CL004               Record System identification
SMFNNSSI DS    CL004               Record Subsystem identification
SMFNNSTY DS    BL002               Record Subtype
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR   0               SMF Record Type 0
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR   2               SMF Record Type 2
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR   3               SMF Record Type 3
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR   7               SMF Record Type 7
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  14               SMF Record Type 14/15
         AIF   ('&RT_DFSORT' EQ '000').NODFSORT1
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         ICESMF                    SMF Record Type 16
.NODFSORT1     ANOP
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  17               SMF Record Type 17
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  18               SMF Record Type 18
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  19               SMF Record Type 19
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  22               SMF Record Type 22
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  24               SMF Record Type 24
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  30               SMF Record Type 30
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFI6 36               SMF Record Type 36
         AIF   ('&RT_DFSMS' EQ '000').NODFSMS1
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         AIF   ('&ST_DFSMS21' NE 'YES').NODFSMS211      new in z/OS 1.3
         IGWSMF SMF42_03=&ST_DFSMS03, SMF Record Type 42               X
               SMF42_06=&ST_DFSMS06,                                   X
               SMF42_09=&ST_DFSMS09,                                   X
               SMF42_0A=&ST_DFSMS10,                                   X
               SMF42_0G=&ST_DFSMS16,                                   X
               SMF42_0K=&ST_DFSMS20,                                   X
               SMF42_0L=&ST_DFSMS21
         AGO   .NODFSMS1
.NODFSMS211    ANOP
         AIF   ('&ST_DFSMS20' NE 'YES').NODFSMS201      new in z/OS 1.3
         IGWSMF SMF42_03=&ST_DFSMS03, SMF Record Type 42               X
               SMF42_06=&ST_DFSMS06,                                   X
               SMF42_09=&ST_DFSMS09,                                   X
               SMF42_0A=&ST_DFSMS10,                                   X
               SMF42_0G=&ST_DFSMS16,                                   X
               SMF42_0K=&ST_DFSMS20
         AGO   .NODFSMS1
.NODFSMS201    ANOP
         AIF   ('&ST_DFSMS10' NE 'YES').NODFSMS101      new in z/OS 1.3
         IGWSMF SMF42_03=&ST_DFSMS03, SMF Record Type 42               X
               SMF42_06=&ST_DFSMS06,                                   X
               SMF42_09=&ST_DFSMS09,                                   X
               SMF42_0A=&ST_DFSMS10,                                   X
               SMF42_0G=&ST_DFSMS16
         AGO   .NODFSMS1
.NODFSMS101    ANOP
         AIF   ('&ST_DFSMS09' NE 'YES').NODFSMS091    new in OS/390 2.4
         IGWSMF SMF42_03=&ST_DFSMS03, SMF Record Type 42               X
               SMF42_06=&ST_DFSMS06,                                   X
               SMF42_09=&ST_DFSMS09,                                   X
               SMF42_0G=&ST_DFSMS16
         AGO   .NODFSMS1
.NODFSMS091    ANOP
         AIF   ('&ST_DFSMS16' NE 'YES').NODFSMS161     new in ESA 5.2.2
         IGWSMF SMF42_03=&ST_DFSMS03, SMF Record Type 42               X
               SMF42_06=&ST_DFSMS06,                                   X
               SMF42_0G=&ST_DFSMS16
         AGO   .NODFSMS1
.NODFSMS161    ANOP
         AIF   ('&ST_DFSMS06' NE 'YES').NODFSMS061       new in ESA 5.1
         IGWSMF SMF42_03=&ST_DFSMS03, SMF Record Type 42               X
               SMF42_06=&ST_DFSMS06
         AGO   .NODFSMS1
.NODFSMS061    ANOP
         AIF   ('&ST_DFSMS03' NE 'YES').NODFSMS031       new in ESA 5.1
         IGWSMF SMF42_03=&ST_DFSMS03  SMF Record Type 42
         AGO   .NODFSMS1
.NODFSMS031    ANOP
.NODFSMS1      ANOP
         AIF   ('&ST_DFSMS07' NE 'YES').NODFSMS071     new in DFSMS 1.2
         GFSAUSMF                  SMF Record Type 42 Subtype 7
.NODFSMS071    ANOP
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  43               SMF Record Type 43
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  45               SMF Record Type 45
         AIF   ('&RT_BDT' EQ '000').NOBDT1
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  59               SMF Record Type 59
.NOBDT1        ANOP
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFI6 60               SMF Record Type 60
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFI6 61               SMF Record Type 61
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  62               SMF Record Type 62
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  63               SMF Record Type 63
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  64               SMF Record Type 64
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFI6 65               SMF Record Type 65
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFI6 66               SMF Record Type 66
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  67               SMF Record Type 67
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  68               SMF Record Type 68
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  69               SMF Record Type 69
         AIF   ('&RT_RMF' EQ '000').NORMF1
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         ERBSMFR  73               SMF Record Type 73
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         ERBSMFR  74               SMF Record Type 74
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         ERBSMFR  75               SMF Record Type 75
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         ERBSMFR  77               SMF Record Type 77
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         ERBSMFR  78               SMF Record Type 78
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         ERBSMFR  79               SMF Record Type 79
.NORMF1        ANOP
         AIF   ('&RT_RACFPROC' EQ '000').NORACFPROC1
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  80               SMF Record Type 80
.NORACFPROC1   ANOP
         AIF   ('&RT_RACFINIT' EQ '000').NORACFINIT1
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  81               SMF Record Type 81
.NORACFINIT1   ANOP
         AIF   ('&RT_ICSF' EQ '000').NOICSF1
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         CSFSMF82                  SMF Record Type 82
.NOICSF1       ANOP
         AIF   ('&RT_RACFAUDIT' EQ '000').NORACFAUDIT1
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  83               SMF Record Type 83
.NORACFAUDIT1  ANOP
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  88               SMF Record Type 88
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  90               SMF Record Type 90
         AIF   ('&RT_USS' EQ '000').NOUSS1
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         IFASMFR  92               SMF Record Type 92
.NOUSS1        ANOP
         AIF   ('&RT_TCPIP' EQ '000').NOTCPIP1
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         EZASMF76 API=NO,          SMF Record Type 118                 X
               FTP=YES,                                                X
               FTPC=YES,                                               X
               STAT=NO,                                                X
               TELNET=NO
.NOTCPIP1      ANOP
         AIF   ('&RT_TCPIPX' EQ '000').NOTCPIPX1
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         EZASMF77 API=NO,          SMF Record Type 119                 X
               FTP=YES,                                                X
               HEADER=YES,                                             X
               STAT=NO,                                                X
               TELNET=NO
.NOTCPIPX1     ANOP
         AIF   ('&RT_DFPACS' EQ '000').NODFPACS1
*
**       SMF Record DFSMSdfp ACS
*
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
SMFRCDACS DSECT                    SMF Record DFSMSdfp ACS
SMFACSLEN DS   BL002               Record Length
SMFACSSEG DS   BL002               Segment Descriptor
SMFACSFLG DS   BL001               Header Flag
SMFACSRTY DS   BL001               Record Type
SMFACSTME DS   BL004               Record Time
SMFACSDTE DS   PL004               Record Date
SMFACSSID DS   CL004               Record System identification
SMFACSROV DS   XL(L'ACERO)         ACS read only variables
SMFACSRWV DS   XL(L'ACERW)         ACS read write variables
.NODFPACS1 ANOP
         AIF   ('&RT_AO' EQ '000').NOAO1
*
**       SMF Record AO
*
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         GLOSSMFR                  SMF Record AO
.NOAO1   ANOP
         AIF   ('&RT_HSMFSR' EQ '000').NOHSMFSR1
*
**       SMF Record DFSMShsm FSR
*
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
FSR      EQU   *                   Function statistics record (FSR)
FSRHDR   DS    CL018               Standard 18-byte SMF record header
         ORG   FSR
FSRLEN   DS    BL002               Record length
FSRSEG   DS    BL002               Segment descriptor
FSRFLG   DS    BL001               System indicator
FSRRTY   DS    BL001               Record type
FSRTME   DS    BL004               Record time
FSRDTE   DS    PL004               Record date
FSRSID   DS    CL004               System identification
FSRJBN   DS    CL008               Job name
FSRRST   DS    BL004               Reader start time
FSRRSD   DS    PL004               Reader start date
FSRUID   DS    CL008               User identification
FSRTYPE  DS    BL001               Function type
FSRFLAGS DS    BL001               Flags
FSRFFSTR EQU   X'80'               From a striped data set
FSRFTSTR EQU   X'40'               To a striped data set
FSRF32K  EQU   X'20'               Dataset is greater than 32K tracks
FSRFKB   EQU   X'10'               Dataset is greater than 2GB
FSRFVER  EQU   X'08'               FSRGEN contains a version number
FSRFNONQ EQU   X'04'               No enqueue during backup
FSRFNQN1 EQU   X'02'               Data set backed up - enq failed = 1
FSRFNQN2 EQU   X'01'               Data set backed up - enq failed > 1
FSRDATA  EQU   *                   Start of function data
FSRMWE   DS    CL092               Management work element
         ORG   FSRMWE
FSRDSN   DS    CL044               Data Set Name
FSRTVOL  DS    CL006               To volume serial
FSRDEVT  DS    CL004               To device type
FSRFVOL  DS    CL006               From volume serial
         ORG   FSRFVOL
FSRCLIP  DS    CL006               Target volume serial
FSRGEN   DS    BL004               Backup copy generation number
         ORG   FSRGEN
FSRDATE  DS    BL004               Backup date
FSRRC    DS    BL004               Return code
FSRREAS  DS    BL004               Reason code
FSRABCC  DS    CL004               Abnormal end code
FSRDARC  DS    BL002               Dynamic allocation return code
FSRGRP   DS    CL008               Group name
FSRRACF  DS    BL001               RACF flags
FSRMFLGS DS    CL001               Flags from the MWE
FSRFRTRY EQU   X'80'               Backup copy made during retry
FSRF_REMOTE EQU X'40'              On a remote system
FSRFPIGB EQU   X'20'               Tape already mounted
FSRF_REMOTE_HOST_PROCESSED EQU X'10' MWE processed by remote host
FSRRQN   DS    BL004               Request number
FSRDATR  DS    PL004               Request date
FSRTIMR  DS    BL004               Request time
FSRTIMS  DS    BL004               Processing start time
         ORG   FSRTIMS
FSRTIMS1 DS    CL004               Alias name
FSRTIME  DS    BL004               Processing end time
         ORG   FSRTIME
FSRTIME2 DS    CL004               Alias name
FSRTIMA  DS    BL004               Allocation time
FSRDLU   DS    PL004               Date last used
FSRDLM   DS    PL004               Date last move/migrate/bkup/recall
FSRBYTR  DS    BL004               Bytes read
FSRBYTW  DS    BL004               Bytes written
FSRTRKR  DS    BL002               Tracks read
FSRTRKW  DS    BL002               Tracks written
FSRDORG  DS    BL002               DSORG
FSRFVSDS EQU   X'08'
FSRFLG2  DS    CL002               Flag bytes
FSRFMNT  EQU   X'80'
FSRTSO   EQU   X'40'
FSRUSER  EQU   X'20'
FSRWAIT  EQU   X'10'
FSRFDAT  EQU   X'08'
FSRFRSV  EQU   X'04'
FSRFML2  EQU   X'02'
FSRFFRV  EQU   X'01'
FSRFREP  EQU   X'80'
FSRFDSRE EQU   X'40'
FSRFAPIN EQU   X'20'
FSRFEXT  EQU   X'10'
FSRFCNVT EQU   X'08'
FSRFROG  EQU   X'04'
FSRFDSS  EQU   X'02'
FSRFT0   EQU   X'01'
FSRCPU   DS    BL004               CPU time in .01 seconds for request
FSRAGE   DS    BL002               Age
FSRRECFM DS    BL001               Record format
FSROPTCD DS    BL001               Option codes
FSR_DS_MOUNT DS BL002              Count of recalls/recovers from tape
FSR_RECALL_RETRIES DS BL001
         DS    CL001               Reserved
FSR_SRCDEVS DS CL002
FSRSCLEN DS    BL002               Storage class name length
FSRSCNAM DS    CL008               Storage class name
FSRTRKKR DS    BL004               Tracks read
FSRTRKKW DS    BL004               Tracks written
FSRMCLEN DS    BL002               Management class name length
FSRMCNAM DS    CL008               Management class name
FSRFLG3  DS    BL001               Request flags
FSRFVINI EQU   X'80'
FSRFXPL1 EQU   X'40'
FSRFXPL2 EQU   X'20'
FSRFEXBV EQU   X'10'
FSRFBKTP EQU   X'08'
FSRFEXDT EQU   X'04'
FSRRECON EQU   X'02'
         DS    CL001               Reserved
FSRTIMS2 DS    CL004               Time preprocessing completed
FSRTIMM1 DS    CL004               Time data movement started
FSRTIMM2 DS    CL004               Time data movement completed
FSRTIME1 DS    CL004               Time post-processing started
FSRNENT1 DS    BL002               Number of tape volumes
FSRNENT2 DS    BL002               Number of output recycle tapes
FSRDCOPR DS    BL002               Number of requested dump copies
FSRDCOPF DS    BL002               Number of failed dump copies
FSRDCLAS DS    CL040               Dump classes
FSRHOST  DS    CL002               Host identifier
FSR_ORGNL_HID DS CL002             Host ID that generated the request
         DS    CL008               Reserved
FSRTAPE  DS    CL012               Tape volume entry
         ORG   FSRTAPE
FSRTPVOL DS    CL006               Volume serial
FSRTFLGS DS    BL001               Flags
FSRFTKB  EQU   X'80'
FSRFALT  EQU   X'40'
         DS    CL001               Reserved
FSRTBYBK DS    BL004               Bytes read/written
.NOHSMFSR1     ANOP
         AIF   ('&RT_NFTP' EQ '000').NONFTP1
*
**       SMF Record NFTP
*
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         DVGSMF DSECT=YES          SMF Record NFTP
.NONFTP1 ANOP
         AIF   ('&RT_RMDS' EQ '000').NORMDS1
*
**       SMF Record RMDS
*
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         DBNXSMFR DSECT=YES,ORG=ALL  SMF Record RMDS
.NORMDS1       ANOP
         AIF   ('&RT_RMMAUD' EQ '000').NORMMAUD1
*
**       SMF Record DFSMSrmm Audit
*
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         EDGSMFAR LIST=YES         DFSMSrmm SMF Audit Record
         EDGSDREC LIST=YES         DFSMSrmm Dataset Information
         EDGSKREC LIST=YES         DFSMSrmm VRS Information
         EDGSVREC LIST=YES         DFSMSrmm Volume Information
.NORMMAUD1     ANOP
         AIF   ('&RT_RMMSEC' EQ '000').NORMMSEC1
*
**       SMF Record DFSMSrmm Security
*
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         EDGSMFSR LIST=YES         DFSMSrmm SMF Security Record
.NORMMSEC1     ANOP
         AIF   ('&RT_BATCHPIPES' EQ '000').NOBATCHPIPES1
*
**       SMF Record BatchPipes
*
D_SMFREC DSECT                     SMF record dummy control section
         ORG   D_SMFREC            SMF record dummy control section
         ASFPZA91 DSECT=YES,       SMF Record Type 91                  X
               LIST=YES,                                               X
               SMFRCD91=YES,                                           X
               SMF91GD=YES
.NOBATCHPIPES1 ANOP
         TITLE 'System Data Areas'
*
**       System Data Areas
*
         CVT   DSECT=YES,LIST=YES  Communications Vector Table (CVT)
         DCBD  DSORG=PS,DEVD=DA    Data Control Block (DCB)
F1AREA   DSECT
         IECSDSL1 1              Format-1 Data Set Control Block (DSCB)
         IEEMBRDS                  SMF RDS
         IEESMCA                   System Management Facilities (SMF)
         IEFJESCT       Job Entry Subsystem Communication Table (JESCT)
JFCB     DSECT
         IEFJFCBN LIST=YES         Job File Control Block (JFCB)
         IEFTIOT1                  Task Input/Output Table (TIOT)
         IEFUCBOB                  Unit Control Block (UCB)
         IEFZB505 LOCEPAX=YES      SWA Manager Locate Mode EPA
         IGDACERO                  ACS read only variables
         IGDACERW                  ACS read write variables
         IHAARA                    Allocation Retrieval Area (ARA)
         IHAARL                    Allocation Retrieval List (ARL)
         IHAASCB                   Address Space Control Block (ASCB)
         IHADFA  DSECT=YES         Data Facilities Area (DFA)
         IHAECVT LIST=YES Extended Communications Vector Table (ECVT)
         IHAIPA                    Initialization Parameter Area (IPA)
         IHALDA                    VSM Local Data Are (LDA)
         IHALPAT                   LPALST Table (LPAT)
         IHAPSA  LIST=YES          Prefixed Save Area (PSA)
         IHASDWA                   System Diagnostic Work Area (SDWA)
         IKJTCB                    Task Control Block (TCB)
         IOSDSHID                  System Host ID (SHID)
         AIF   ('&RT_AO' EQ '000').NOAO3
         AIF   (D'SMFRECSOF).NOAO3
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* Allocation Optimizer (AO) Error                        *'
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* AO Support was specified, but the GLOSSMFR             *'
 MNOTE 255,'* macro was not found - it is usually in SYS1.SGLOSAMP   *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* Either correct the JCL to include the GLOSSMFR macro   *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'*                        or                              *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* specify RT_AO=000 to bypass AO Support                 *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'**********************************************************'
         AGO   .NOAO3
.NOAO3   ANOP
         AIF   ('&RT_BATCHPIPES' EQ '000').NOBATCHPIPES3
         AIF   (D'SMF91RTY).NOBATCHPIPES3
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* BatchPipes Error                                       *'
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* BatchPipes Support was specified, but the ASFPZA91     *'
 MNOTE 255,'* macro was not found - it is usually in SYS1.SASFPMAC   *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* Either correct the JCL to include the ASFPZA91 macro   *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'*                        or                              *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* specify RT_BATCHPIPES=000 to bypass BatchPipes Support *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'**********************************************************'
         AGO   .NOBATCHPIPES3
.NOBATCHPIPES3 ANOP
         AIF   ('&RT_BDT' EQ '000').NOBDT3
         AIF   (D'SMF59RTY).NOBDT3
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* Bulk Data Transfer (BDT) Error                         *'
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* BDT Support was specified, but the BDTDSMF             *'
 MNOTE 255,'* macro was not found - it is usually in SYS1.SBDTMAC    *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* Either correct the JCL to include the BDTDSMF macro    *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'*                        or                              *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* specify RT_BDT=000 to bypass BDT Support               *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'**********************************************************'
         AGO   .NOBDT3
.NOBDT3  ANOP
         AIF   ('&RT_DFSORT' EQ '000').NODFSORT3
         AIF   (D'ICERTYP).NODFSORT3
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* DFSORT Error                                           *'
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* DFSORT Support was specified, but the ICESMF           *'
 MNOTE 255,'* macro was not found - it is usually in SYS1.SICEUSER   *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* Either correct the JCL to include the ICESMF macro     *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'*                        or                              *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* specify RT_DFSORT=000 to bypass DFSORT Support         *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'**********************************************************'
         AGO   .NODFSORT3
.NODFSORT3 ANOP
         AIF   ('&RT_NFTP' EQ '000').NONFTP3
         AIF   (D'DVGAORIG).NONFTP3
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* NetView FTP (NFTP) Error                               *'
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* NFTP Support was specified, but the DVGSMF             *'
 MNOTE 255,'* macro was not found - it is usually in SYS1.SDVGMAC0   *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* Either correct the JCL to include the DVGSMF macro     *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'*                        or                              *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* specify RT_NFTP=000 to bypass NFTP Support             *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'**********************************************************'
         AGO   .NONFTP3
.NONFTP3 ANOP
         AIF   ('&RT_RMDS' EQ '000').NORMDS3
         AIF   (D'SMFD9HDR).NORMDS3
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* Report Management and Distribution System (RMDS) Error *'
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* RMDS Support was specified, but the DBNXSMFR           *'
 MNOTE 255,'* macro was not found - it is usually in SYS1.SDBNIMAC   *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* Either correct the JCL to include the DBNXSMFR macro   *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'*                        or                              *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* specify RT_RMDS=000 to bypass RMDS Support             *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'**********************************************************'
         AGO   .NORMDS3
.NORMDS3 ANOP
         AIF   ('&RT_TCPIP' EQ '000').NOTCPIP3
         AIF   (D'SMFFTC76).NOTCPIP3
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* TCPIP Error                                            *'
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* TCPIP Support was specified, but the EZASMF76          *'
 MNOTE 255,'* macro was not found - it is usually in SYS1.SEZACMAC   *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* Either correct the JCL to include the EZASMF76 macro   *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'*                        or                              *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* specify RT_TCPIP=000 to bypass TCPIP Support           *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'**********************************************************'
         AGO   .NOTCPIP3
.NOTCPIP3 ANOP
         AIF   ('&RT_TCPIPX' EQ '000').NOTCPIPX3
         AIF   (D'SMF119Header).NOTCPIPX3
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* TCPIPX Error                                           *'
 MNOTE 255,'**********************************************************'
 MNOTE 255,'* TCPIPX Support was specified, but the EZASMF77         *'
 MNOTE 255,'* macro was not found - it is usually in SYS1.SEZACMAC   *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* Either correct the JCL to include the EZASMF77 macro   *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'*                        or                              *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'* specify RT_TCPIPX=000 to bypass TCPIPX Support         *'
 MNOTE 255,'*                                                        *'
 MNOTE 255,'**********************************************************'
         AGO   .NOTCPIPX3
.NOTCPIPX3 ANOP
         TITLE 'DAF - Mainline'
DAF      $ENTRY AMODE=31,RMODE=24, Entry                               X
               DWA=(DAFDWA,R10,DAFDWA#),                               X
               SABNDRY=PAGE,SALENGTH=4096,                             X
               SWA=(DAFSWA,R9)
         GBLA  &GCOMMON            Common Macros Level
         AIF   (&GCOMMON GE 11).COMMONOK
         MNOTE 8,'$COMMON Macro Mismatch:  Required=10, Used=&GCOMMON'
         AGO   .COMMONOK
.COMMONOK      ANOP
         GBLC  &GVRM               Version Release Modification (v.r.m)
         GBLC  &GOBJDAT            Object date (yyyy-mm-dd)
&GOBJDAT SETC '&SYSDATC'(1,4).'-'.'&SYSDATC'(5,2).'-'.'&SYSDATC'(7,2)
         GBLC  &GSRCDAT            Source date (yyyy-mm-dd)
&GVRM    SETC '1.4.6'              Version Release Modification
&GSRCDAT SETC '2006-02-23'         Source Date (yyyy-mm-dd)
         SYSSTATE AMODE64=NO,      Addressing mode is NOT 64           X
               ARCHLVL=0,          Architecture level is ESA/390       X
               ASCENV=P            ASC mode is Primary
         LA    R15,W_SRTCMT        Initialize comment address
         ST    R15,W_CMT@          Initialize comment address
         CALL  DAFINIT             Initialization
         CLC   W_RC,=F'0'          Initialization OK ?
         BNE   DAFEXIT             . No
         CALL  DAFPS               Process control statements
         CLC   W_RC,=F'0'          Process control statements OK ?
         BNE   DAFEXIT             . No
         CALL  DAFES               Extract SMF records
         CALL  DAFSS               Sort extracted SMF records
         CALL  DAFGR               Generate report
         CALL  DAFGS               Generate statistics
DAFEXIT  EQU   *
         CALL  DAFTERM             Termination
         L     R15,W_RC            Return code
         B     DAFR                Utilize RC in R15
DAF      $EXIT                     Exit
         TITLE 'DAFDWA - Dynamic Workarea'
DAFDWA   DSECT                     Workarea dynamic
*
**       Dynamic Workarea
*
L_ARL    EQU   4096                ARL length
L_DAFPT  EQU   4096                DAFPT length
L_JFCB   EQU   4096                JFCB length
L_SMFSNAP EQU  32768               SMF SNAP length
L_TBLKWD EQU   (#_TBLKWD*E_TBLKWD) Keyword table length
L_TBLSMF EQU   (#_TBLSMF*E_TBLSMF) SMF table length
L_TBLTRT EQU   4096                TRT table length
W_ACB@   DS    F                   ACB address
W_BUFNO  DS    F                   BUFNO
W_CINV   DS    F                   CINV
W_LRECL1 DS    F                   LRECL
W_NEXT   DS    F                   NEXT
W_NLOGR  DS    F                   NLOGR
W_KWDTB# DS    F                   Keyword table count
W_CL016  DS    CL016               Work
W_EXLST  DS    F                   EXLST
W_EXLST@ DS    F                   EXLST address
W_CLOSE_RC DS  F                   CLOSE Return Code
W_OPEN_RC DS   F                   OPEN Return Code
W_STG_RC DS    F                   STORAGE Return Code
W_STG_ADDR DS  F                   STORAGE Address
W_STG_LENGTH DS F                  STORAGE Length
W_ARL@   DS    F                   ARL storage address
W_DAFPT@ DS    F                   DAFPT storage address
W_JFCB@  DS    F                   JFCB storage address
W_LSTLOC DS    CL010               APF/LPA/LNK LST Location
W_LSTNUM DS    F                   APF/LPA/LNK LST Number
W_SABEND DS    CL004               System abend code
W_UABEND DS    CL005               User abend code
W_NAME   DS    CL020               Name
W_VAL1O  DS    CL044               Original value 1
W_VAL2O  DS    CL044               Original value 2
W_VAL1R  DS    CL044               Resolved value 1
W_VAL2R  DS    CL044               Resolved value 2
W_OPVAL  DS    CL044               Operand value
W_CSKWD  DS    CL010               Control statement keyword
W_CSKWD@ DS    F                   Control statement keyword length
W_CSOP   DS    CL005               Control statement operator
W_CSOP@  DS    F                   Control statement operator length
W_CSVAL  DS    CL044               Control statement value
W_CSVAL@ DS    F                   Control statement value length
W_CMT@   DS    F                   Comment address
W_STRHDR DS    AL1                 SNAP storage header length
W_CS     DS    CL133               DAFCS record / SNAP header
W_CSLEN  DS    F                   DAFCS LRECL
W_FLAG   DS    BL001               Flags
W_F$CC   EQU   X'80'               DAFCC flag
W_F$QSAM EQU   X'40'               DAFSMF QSAM flag
W_F$VSAM EQU   X'20'               DAFSMF VSAM flag
W_F$HFS  EQU   X'10'               HFS flag
W_F$CS   DS    BL001               Control statement error flags
W_F$KWD  EQU   X'80'               Keyword error flag
W_F$OP   EQU   X'40'               Operator error flag
W_F$VAL  EQU   X'20'               Value error flag
W_F$FLAG DS    BL001               Flag Byte
W_F$CRI  EQU   X'80'               Criteria Trace Flag
W_F$RDSA EQU   X'40'               RDS Also Flag
W_F$RDSO EQU   X'20'               RDS Only Flag
W_F$BIT0 EQU   X'80'               Bit 0 flag
W_F$BIT1 EQU   X'40'               Bit 1 flag
W_F$BIT2 EQU   X'20'               Bit 2 flag
W_F$BIT3 EQU   X'10'               Bit 3 flag
W_F$BIT4 EQU   X'08'               Bit 4 flag
W_F$BIT5 EQU   X'04'               Bit 5 flag
W_F$BIT6 EQU   X'02'               Bit 6 flag
W_F$BIT7 EQU   X'01'               Bit 7 flag
W_F$CTRI EQU   X'3F'               JFCBCTRI insignificant bits
W_F$MODE DS    BL001               Mode Flags
APFLST   EQU   X'80'               APFLST Flag
LNKLST   EQU   X'40'               LNKLST Flag
LPALST   EQU   X'20'               LPALST Flag
W_LOCATE CAMLST    NAME,W_DSN1,,W_VOL1
W_MAJDES DS    CL032               Major enqueue description
W_MOD@   DS    F                   Module address
W_RPL@   DS    F                   RPL address
W_PRTDET DS    0CL133              Print detail record
         ORG   W_PRTDET            Print detail record
W_LOG    DS    0CL133              DAFLOG record
         ORG   W_PRTDET            Print detail record
W_RPT    DS    0CL133              DAFRPT record
         ORG   W_PRTDET            Print detail record
W_RPT1   DS    0CL133              DAFRPT DSN record
W_RPT1CC DS    CL001
W_RPTDSN DS    CL(L'W_DSN1)
L_RPT1   EQU   *-W_RPT1
         ORG   W_PRTDET            Print detail record
W_RPT2   DS    0CL133              DAFRPT detail record
W_RPT2CC DS    CL001
W_RPTDTE DS    CL(L'W_DATE)
         DS    CL001
W_RPTTME DS    CL(L'W_TIME)
         DS    CL001
W_RPTSID DS    CL(L'W_SYSTEM)      System identification
         DS    CL001
W_RPTJOB DS    CL(L'W_JOB1)        Job name
         DS    CL001
W_RPTUSR DS    CL(L'W_USER)        User identification
         DS    CL001
W_RPTRTY DS    CL(L'W_RECTYP)
         DS    CL001
W_RPTSTY DS    CL(L'W_SUBTYP)
         DS    CL001
W_RPTCMT DS    CL(L'W_SRTCM1)
L_RPT2   EQU   *-W_RPT2
         ORG   W_PRTDET            Print detail record
W_STAT   DS    0CL133              DAFSTAT Print Record
W_STATCC DS    CL001
W_STATSM DS    CL015               DAFSMF counter
         DS    CL001
W_STATRP DS    CL015               DAFRPT count
         DS    CL001
W_STATIN DS    CL015               Invalid DSN counter
         DS    CL004
W_STATNM DS    CL064
         DS    CL001
         ORG   W_PRTDET+133        Print detail record
W_DSN1   DS    CL044               Dataset 1
W_DATE   DS    CL007               Date
W_TIME   DS    CL011               Time
W_SYSTEM DS    CL004               System identification
W_JOB1   DS    CL008               Job name 1
W_USER   DS    CL008               User identification
W_RECTYP DS    CL003               Record type
W_SUBTYP DS    CL003               Subtype
W_SRTCM1 DS    CL080               Comment line 1
W_SRTCM2 DS    CL080               Comment line 2
W_SRTCM3 DS    CL080               Comment line 3
W_SRTCM4 DS    CL080               Comment line 4
W_SRTCM5 DS    CL080               Comment line 5
L_SRTCMT EQU   *-W_SRTCM1          Comment area length
         ORG   W_SRTCM1
W_SRTCMT DS    0CL(L_SRTCMT)       Comment area
         ORG   *+L_SRTCMT
L_SORT   EQU   *-W_DSN1            Sort record length
         ORG   W_DSN1
W_SORT   DS    0CL(L_SORT)         SORTIN/SORTOUT record
         ORG   *+L_SORT
W_CATALOG DS   CL044               Catalog name
W_CLASS   DS   CL008               Class name
W_CRTDT   DS   CL005               Creation date
W_DATACLAS DS  CL008               Data class name
W_DD     DS    CL008               Data definition name
W_DSN2   DS    CL044               Dataset 2
W_DSORG  DS    CL003               DSORG
W_DUP    DS    F                   DUP
W_EXPDT  DS    CL005               Expiration date
W_HOST   DS    CL008               Host name
W_IP1    DS    CL039               IP address 1
W_IP2    DS    CL039               IP address 2
W_IP3    DS    CL039               IP address 3
W_IP4    DS    CL039               IP address 4
W_JOB2   DS    CL008               Job name 2
W_JOB3   DS    CL008               Job name 3
W_JOB4   DS    CL008               Job name 4
W_JOB5   DS    CL008               Job name 5
W_MAJOR  DS    CL008               Major enqueue name
W_MEMBER1 DS   CL008               Member name 1
W_MEMBER2 DS   CL008               Member name 2
W_MGMTCLAS DS  CL008               Management class name
W_MINOR  DS    CL044               Minor enqueue name
W_NUP    DS    F                   NUP
W_RECFM  DS    CL005               RECFM
W_EXCP   DS    F                   EXCP
W_GROUP  DS    CL008               Group name
W_LOGSTREAM DS CL026               Logstream name
W_LRECL  DS    F                   LRECL
W_PORT1  DS    CL004               Port number 1
W_PORT2  DS    CL004               Port number 2
W_PORT3  DS    CL004               Port number 3
W_PORT4  DS    CL004               Port number 4
W_PGM    DS    CL008               Program name
W_RTY    DS    F                   SMF record type
W_STORCLAS DS  CL008               Storage class name
W_STY    DS    F                   SMF record sub type
W_VOL1   DS    CL006               Volume serial 1
W_VOL2   DS    CL006               Volume serial 2
W_VOL3   DS    CL006               Volume serial 3
W_VOL4   DS    CL006               Volume serial 4
W_VOL5   DS    CL006               Volume serial 5
W_VOL6   DS    CL006               Volume serial 6
W_VOL7   DS    CL006               Volume serial 7
W_VOL8   DS    CL006               Volume serial 8
W_VOL9   DS    CL006               Volume serial 9
W_VOLA   DS    CL006               Volume serial 10
W_VVDS   DS    CL044               VVDS name
W_WTX    DS    CL004
L_CRIT   EQU   *-W_CATALOG         Criteria length
         ORG   W_CATALOG
W_CRIT   DS    0CL(L_CRIT)         Criteria area
         ORG   *+L_CRIT
O_CATALOG EQU  W_CATALOG-DAFDWA    Catalog name offset
O_CLASS  EQU   W_CLASS-DAFDWA      Class name offset
O_CRTDT  EQU   W_CRTDT-DAFDWA      Creation date offset
O_DATACLAS EQU W_DATACLAS-DAFDWA   Data class name offset
O_DATE   EQU   W_DATE-DAFDWA       Date offset
O_DD     EQU   W_DD-DAFDWA         Data definition name offset
O_DSN1   EQU   W_DSN1-DAFDWA       Dataset 1 offset
O_DSN2   EQU   W_DSN2-DAFDWA       DSN 2 offset
O_DSORG  EQU   W_DSORG-DAFDWA      DSORG offset
O_DUP    EQU   W_DUP-DAFDWA        DUP offset
O_EXPDT  EQU   W_EXPDT-DAFDWA      Expiration date offset
O_HOST   EQU   W_HOST-DAFDWA       Host name offset
O_IP1    EQU   W_IP1-DAFDWA        IP address 1 offset
O_IP2    EQU   W_IP2-DAFDWA        IP address 2 offset
O_IP3    EQU   W_IP3-DAFDWA        IP address 3 offset
O_IP4    EQU   W_IP4-DAFDWA        IP address 4 offset
O_JOB1   EQU   W_JOB1-DAFDWA       Job name 1 offset
O_JOB2   EQU   W_JOB2-DAFDWA       JOB name 2 offset
O_JOB3   EQU   W_JOB3-DAFDWA       JOB name 3 offset
O_JOB4   EQU   W_JOB4-DAFDWA       JOB name 4 offset
O_JOB5   EQU   W_JOB5-DAFDWA       JOB name 5 offset
O_MAJOR  EQU   W_MAJOR-DAFDWA      Major enqueue name offset
O_MEMBER1 EQU  W_MEMBER1-DAFDWA    Member name 1 offset
O_MEMBER2 EQU  W_MEMBER2-DAFDWA    Member name 2 offset
O_MGMTCLAS EQU W_MGMTCLAS-DAFDWA   Management class name offset
O_MINOR  EQU   W_MINOR-DAFDWA      Minor enqueue name offset
O_NUP    EQU   W_NUP-DAFDWA        NUP offset
O_PORT1  EQU   W_PORT1-DAFDWA      Port name offset 1
O_PORT2  EQU   W_PORT2-DAFDWA      Port name offset 2
O_PORT3  EQU   W_PORT3-DAFDWA      Port name offset 3
O_PORT4  EQU   W_PORT4-DAFDWA      Port name offset 4
O_PGM    EQU   W_PGM-DAFDWA        Program name offset
O_RECFM  EQU   W_RECFM-DAFDWA      RECFM offset
O_EXCP   EQU   W_EXCP-DAFDWA       EXCP offset
O_GROUP  EQU   W_GROUP-DAFDWA      Group offset
O_LOGSTREAM EQU W_LOGSTREAM-DAFDWA Logstream offset
O_LRECL  EQU   W_LRECL-DAFDWA      LRECL offset
O_RTY    EQU   W_RTY-DAFDWA        SMF record type offset
O_STY    EQU   W_STY-DAFDWA        SMF record sub type offset
O_STORCLAS EQU W_STORCLAS-DAFDWA   Storage class name offset
O_SYSTEM EQU   W_SYSTEM-DAFDWA     System identification offset
O_TIME   EQU   W_TIME-DAFDWA       Time offset
O_USER   EQU   W_USER-DAFDWA       User identification offset
O_VOLA   EQU   W_VOLA-DAFDWA       Volume serial 10 offset
O_VOL1   EQU   W_VOL1-DAFDWA       Volume serial 1 offset
O_VOL2   EQU   W_VOL2-DAFDWA       Volume serial 2 offset
O_VOL3   EQU   W_VOL3-DAFDWA       Volume serial 3 offset
O_VOL4   EQU   W_VOL4-DAFDWA       Volume serial 4 offset
O_VOL5   EQU   W_VOL5-DAFDWA       Volume serial 5 offset
O_VOL6   EQU   W_VOL6-DAFDWA       Volume serial 6 offset
O_VOL7   EQU   W_VOL7-DAFDWA       Volume serial 7 offset
O_VOL8   EQU   W_VOL8-DAFDWA       Volume serial 8 offset
O_VOL9   EQU   W_VOL9-DAFDWA       Volume serial 9 offset
O_VVDS   EQU   W_VVDS-DAFDWA       VVDS name offset
O_WTX    EQU   W_WTX-DAFDWA
W_TRACE  DS    0CL133              DAFTRACE Print Record
         ORG   W_TRACE+133         DAFTRACE Print Record
W_8XREL  DS    H                   Relocate section offset
W_8XCNT  DS    H                   Relocate section count
W_CHKDSN DS    CL001               Dataset check
W_FMTMC  DS    CL001               Format MC
W_CURDTE DS    CL005               Current Julian Date YYDDD
W_DBL    DS    2D                  2-Doubleword work area
W_DOUBLE DS    D                   Doubleword work area
W_SMFBAS DS    F                   Current SMF record base
W_SMFSL1 DS    H                   SMF record section length 1
W_SMFSL2 DS    H                   SMF record section length 2
W_SMFSL3 DS    H                   SMF record section length 3
W_SMFSL4 DS    H                   SMF record section length 4
W_SMFSL5 DS    H                   SMF record section length 5
W_SMFSN1 DS    H                   SMF record section number 1
W_SMFSN2 DS    H                   SMF record section number 2
W_SMFSN3 DS    H                   SMF record section number 3
W_SMFSN4 DS    H                   SMF record section number 4
W_SMFSN5 DS    H                   SMF record section number 5
W_SMFSO1 DS    F                   SMF record section offset 1
W_SMFSO2 DS    F                   SMF record section offset 2
W_SMFSO3 DS    F                   SMF record section offset 3
W_SMFSO4 DS    F                   SMF record section offset 4
W_SMFSO5 DS    F                   SMF record section offset 5
W_SMFSNAP DS   F                   SMF SNAP address
W_SMFRTY DS    F                   Current record type SMF table base
W_SMFSTY DS    F                   Current sub type SMF table base
W_TBLKWD DS    F                   Dynamic keyword table address
W_TBLTRT DS    F                   Dynamic TRT table address
W_TBLSMF DS    F                   Dynamic SMF table address
W_VWA@   DS    F                   VSAM workarea address
W_KWD@   DS    F                   Current keyword table address
W_OP@    DS    F                   Current operator table address
W_DAFLOG DS    CL011               DAFLOG control
W_DAFRPT DS    CL011               DAFRPT control
W_DAFSTAT DS   CL011               DAFSTAT control
DOUBLE   DS    D                   Doubleword work area
W_FULL1  DS    F                   Fullword work area
W_FULL2  DS    F                   Fullword work area
W_DAFMB4 DS    F                   Fullword work area
W_DAFPV4 DS    F                   Fullword work area
W_HALF1  DS    H                   Halfword work area
W_HALF2  DS    H                   Halfword work area
W_BYTE1  DS    X                   Byte work area
W_TYPE   DS    CL008               Type
W_BINEDT DS    XL016
W_DAFPC  DS    CL040               DAFPC work area
W_DTE_HI DS    CL007               DAFSMF high date
W_DTE_LO DS    CL007               DAFSMF low date
W_TME_HI DS    CL011               DAFSMF high time
W_TME_LO DS    CL011               DAFSMF low time
W_TMPDTE DS    CL007               Date
W_TMPTME DS    CL011               Time
W_NTU    DS    CL008               TTR
W_RCTMSK DS    CL020               Record count mask
W_DAFIP4 DS    CL015               IPv4 Address
W_DAFIP6 DS    CL039               IPv6 Address
W_MASK04 DS    CL004               Mask
W_CHAR16 DS    CL016               Work
W_LSTDSN DS    CL044               Last DSN
W_EPA    DS    F                   Entry Point Address
W_SMFOTH DS    F                   DAFSMF other count
W_SMFTOT DS    F                   DAFSMF total count
W_CSTOT  DS    F                   DAFCS total count
W_CCTOT  DS    F                   Check criteria total count
W_INVTOT DS    F                   Invalid DSN total count
W_RPTTOT DS    F                   DAFRPT total count
W_RC     DS    F                   Return code
W_CMTCLR DS    CL001               Comment clear indicator
W_TM     DS    CL001               TM area
W_TXTLBL DS    CL016               Label area
W_WRK    DS    CL128               Work area
W_SAVCM1 DS    CL080               Save comment line
W_SAVDD  DS    CL008               Data definition name
W_YYDDD  DS    CL005               Working julian date
         ORG   W_YYDDD
W_YY     DS    CL002               Working julian year
W_DDD    DS    CL003               Working julian day
W_DATET  DS    CL007               Date
W_TIMET  DS    CL011               Time
*
**       System Macros
*
         DS    0F                  Fullword alignment
W_ESTAE  EQU   *                   ESTAE parameter list
         ORG   *+L_ESTAE           ESTAE parameter list length
         DS    0F                  Fullword alignment
DAFCS    EQU   *                   DAFCS DCB
         ORG   *+L_DAFCS           DAFCS DCB length
         DS    0F                  Fullword alignment
W_LINK   EQU   *                   LINK parameter list
         ORG   *+L_LINK            LINK parameter list length
         DS    0F                  Fullword alignment
DAFLOG   EQU   *                   DAFLOG DCB
         ORG   *+L_DAFLOG          DAFLOG DCB length
         DS    0F                  Fullword alignment
DAFOUT   EQU   *                   DAFOUT DCB
         ORG   *+L_DAFOUT          DAFOUT DCB length
         DS    0F                  Fullword alignment
DAFRPT   EQU   *                   DAFRPT DCB
         ORG   *+L_DAFRPT          DAFRPT DCB length
         DS    0F                  Fullword alignment
DAFSMF   EQU   *                   DAFSMF DCB
         ORG   *+L_DAFSMF          DAFSMF DCB length
         DS    0F                  Fullword alignment
DAFSNAP  EQU   *                   DAFSNAP DCB
         ORG   *+L_DAFSNAP         DAFSNAP DCB length
         DS    0F                  Fullword alignment
DAFSTAT  EQU   *                   DAFSTAT DCB
         ORG   *+L_DAFSTAT         DAFSTAT DCB length
         DS    0F                  Fullword alignment
DAFTRACE EQU   *                   DAFTRACE DCB
         ORG   *+L_DAFTRACE        DAFTRACE DCB length
         DS    0F                  Fullword alignment
W_DCBE   EQU   *                   DAFSMF DCBE
         ORG   *+L_DCBE            DAFSMF DCBE length
         DS    0F                  Fullword alignment
W_RDJFCB EQU   *                   RDJFCB parameter list
         ORG   *+L_RDJFCB          RDJFCB parameter list length
         DS    0F                  Fullword alignment
W_SHOWCB EQU   *                   SHOWCB parameter list
         ORG   *+L_SHOWCB          SHOWCB parameter list length
         DS    0F                  Fullword alignment
W_SNAP   EQU   *                   SNAP parameter list
         ORG   *+L_SNAP            SNAP parameter list length
         DS    0F                  Fullword alignment
SORTIN   EQU   *                   SORTIN DCB
         ORG   *+L_SORTIN          SORTIN DCB length
         DS    0F                  Fullword alignment
SORTOUT  EQU   *                   SORTOUT DCB
         ORG   *+L_SORTOU          SORTOUT DCB length
         DS    0F                  Fullword alignment
W_SWAREQ EQU   *                   SWAREQ parameter list
         ORG   *+L_SWAREQ          SWAREQ parameter list length
         DS    0F                  Fullword alignment
W_OPENI  EQU   *                   OPEN parameter list (Input)
         ORG   *+L_OPENI           OPEN parameter list length (Input)
         DS    0F                  Fullword alignment
W_OPENO  EQU   *                   OPEN parameter list (Output)
         ORG   *+L_OPENO           OPEN parameter list length (Output)
         DS    0F                  Fullword alignment
W_CLOSE  EQU   *                   CLOSE parameter list
         ORG   *+L_CLOSE           CLOSE parameter list length
         DS    0F                  Fullword alignment
W_WTO    EQU   *                   WTO parameter list
W_WTOMSG EQU   W_WTO+4,100         WTO message
         ORG   *+L_WTO             WTO parameter list length
DAFDWA#  EQU   *-DAFDWA            Work area length
         TITLE 'DAFAT - Abnormal Termination'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - SDWA  (R2)                             *
**********************************************************************
DAFAT    $ENTRY AMODE=31,RMODE=24, Entry                               X
               DWA=(DAFDWA,R10,DAFDWA#),                               X
               SWA=(DAFSWA,R9)
         C     R0,=F'12'           SDWA present ?
         BNE   SDWAOK              Yes, process abend
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF901   Copy WTO message
         WTO   MF=(E,W_WTO)        Issue WTO
         B     DAFAT0              Percolate
SDWAOK   LR    R2,R1               SDWA
         USING SDWA,R2             SDWA reference
         XR    R3,R3               Clear
         ICM   R3,B'0111',SDWACMPC Store binary data
         SLL   R3,20               Isolate user abend code
         SRL   R3,20               Isolate user abend code
         MVI   W_UABEND,C'U'       User abend indicator
         CVD   R3,W_DOUBLE         Convert user abend code to decimal
         OI    W_DOUBLE+7,X'0F'    Force sign
         UNPK  W_UABEND+1(4),W_DOUBLE+4(4) Unpack record type
ATSYSERR XR    R3,R3               Clear
         ICM   R3,B'0111',SDWACMPC Store binary data
         SRL   R3,12               Isolate system abend code
         $HEX  W_DOUBLE,(R3),LEN=4
         MVI   W_SABEND,C'S'       System abend indicator
         MVC   W_SABEND+1(3),W_DOUBLE+5 System abend code
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF900   Copy WTO message
         MVC   W_WTOMSG+14(4),W_SABEND System abend code
         MVC   W_WTOMSG+19(5),W_UABEND User abend code
         CLC   SDWANAME(03),=CL003'DAF' Programe name DAF ?
         BNE   ATNOTDAF            No
         L     R3,=A(TBLMOD)       Set module table base
         LA    R4,4(,R3)           First module entry
         L     R3,0(R3)            Set module table count
         LTR   R3,R3               Any modules ?
         BNP   ATNOMOD             No
         L     R5,SDWAGR12         DAF base register
         S     R5,SDWAEPA          Adjust for EPA
ATMODNXT L     R6,0(R4)
         S     R6,SDWAEPA          Adjust for EPA
         CR    R5,R6               Is it in this CSECT ?
         BE    ATMODFND            No, next module
ATMODINC LA    R4,12(,R4)          Next module entry
         BCT   R3,ATMODNXT         Any more modules ?
         B     ATNOMOD             No
ATMODFND MVC   W_WTOMSG+32(8),4(R4) Module name
         L     R6,SDWAGR12         CSECT base address
         S     R6,SDWAEPA          Adjust for EPA
         XR    R7,R7               Clear
         ICM   R7,B'0111',SDWANXTA Store next instruction address
         S     R7,SDWAEPA          Adjust for EPA
         CR    R7,R6               Offset within CSECT
         BH    ATOFFOK
         MVC   W_WTOMSG+41(9),P_BLANKS Offset unknown
         B     AT900E              Issue message
ATOFFOK  SR    R7,R6               Offset within CSECT
         $HEX  W_WTOMSG+42,(R7),LEN=4 Module offset
         B     AT900E              Issue message
ATNOTDAF EQU   *
ATNOMOD  MVC   W_WTOMSG+25(25),P_BLANKS Module & offset unknown
AT900E   WTO   MF=(E,W_WTO)        Issue WTO
ATPERC   LR    R1,R2               SDWA
         SETRP RC=0
         DROP  R2                  SDWA dereference
DAFAT    $EXIT                     Exit
         TITLE 'DAFCC - Check Criteria'
**********************************************************************
*  Notes:          Invalid if DSN=X'40' (blank)                      *
*                  Invalid if DSN invalid characters                 *
**********************************************************************
DAFCC    $ENTRY AMODE=31,RMODE=24  Entry
         CLC   W_DSN1,=44X'00'     Dataset 1 low values ?
         BNE   CCLOW1X             . Yes, skip it
*        CALL  DAFIT               Invalid triplet
         BE    CCNOPUT             . Yes, skip it
CCLOW1X  EQU   *
         CLC   W_DSN1,=44C' '      Dataset 1 blank ?
         BNE   CCBLK1X             . Yes, skip it
*        CALL  DAFIT               Invalid triplet
         BE    CCNOPUT             . Yes, skip it
CCBLK1X  EQU   *
         CLI   W_CHKDSN,C'N'       Dataset - No
         BE    CCDSNOK             . Yes, skip DSN check
*        CLC   W_RECTYP,=CL003'077' Enqueue ?
*        BE    CCDSNOK             Yes, skip DSN check
*        CLC   W_RECTYP,=CL003'079' Enqueue ?
*        BE    CCDSNOK             Yes, skip DSN check
         AIF   ('&CHECKDSN' EQ 'NO').NOCHECKDSN
         CALL  DAFDSN,             Check Dataset Name 1                X
               (W_DSN1),                                               X
               MF=(E,W_WRK)
         CLC   W_DSN2,=44X'00'     Dataset 2 low values ?
         BE    CCNODSN2            . Yes, skip it
         CLC   W_DSN2,=44C' '      Dataset 2 blank ?
         BE    CCNODSN2            . Yes, skip it
         CALL  DAFDSN,             Check Dataset Name 2                X
               (W_DSN2),                                               X
               MF=(E,W_WRK)
CCNODSN2 EQU   *
         CLC   W_CATALOG,=44X'00'  Catalog low values ?
         BE    CCNOCAT             . Yes, skip it
         CLC   W_CATALOG,=44C' '   Catalog blank ?
         BE    CCNOCAT             . Yes, skip it
         CALL  DAFDSN,             Check Catalog                       X
               (W_CATALOG),                                            X
               MF=(E,W_WRK)
CCNOCAT  EQU   *
         CLC   W_VVDS,=44X'00'     VVDS low values ?
         BE    CCNOVVDS            . Yes, skip it
         CLC   W_VVDS,=44C' '      VVDS blank ?
         BE    CCNOVVDS            . Yes, skip it
         CALL  DAFDSN,             Check VVDS                          X
               (W_VVDS),                                               X
               MF=(E,W_WRK)
CCNOVVDS EQU   *
.NOCHECKDSN    ANOP
CCDSNOK  EQU   *
         XC    W_CCTOT,W_CCTOT     Zero off include flag
         L     R3,W_TBLKWD         Set keyword table base
         USING D_TBLKWD,R3         Keyword table reference
         LA    R15,#_TBLKWD        Keyword table count
         ST    R15,W_KWDTB#        Keyword table count
CCNXTKWD LA    R5,#_TBLOP          Operator table count
         L     R8,=A(TBLOP)        Set operator table address
         USING D_TBLOP,R8          Operator table reference
CCNXTOP  LA    R15,D_KWDOVC        Operator value count
         A     R15,D_OPOFF         Operator offset
         L     R6,0(R15)           Value count
         LTR   R6,R6               Any values ?
         BZ    CCINCOP             . No, next keyword table entry
         LA    R15,D_KWDVGA        Value getmain address
         A     R15,D_OPOFF         Operator offset
         L     R4,0(R15)           Value getmain address
CCNXTVAL LA    R7,D_KWDOF1         Check address
         NI    W_FLAG,255-W_F$CC   Turn off DAFCC flag
CCNXTCHK L     R2,0(R7)            Check address
         LTR   R2,R2               Any check ?
         BZ    CCINCVAL            . No, next value
         AR    R2,R10              Set operand check base
         CLI   0(R2),C' '          Is operand blank
         BE    CCINCCHK            Yes, skip it
         LH    R0,D_KWDOML         Set operand maximum length
         STH   R0,W_HALF1          Set operand maximum length
         CLI   D_KWDFMT,C'F'       Fullword ?
         BNE   CCNOFULL            . No
         $FILL W_VAL1R,C' '        Blank resolved value 1
         $FILL W_VAL2R,C' '        Blank resolved value 2
         MVC   W_VAL1R(4),5(R4)    Copy value to resolved value 1
         MVC   W_VAL2R(4),0(R2)    Copy check to resolved value 2
         B     CCFULL              Continue
CCNOFULL EQU   *
         CALL  DAFRM,              Resolve Mask                        X
               (5(R4),(R2),W_HALF1),                                   X
               MF=(E,W_WRK)
CCFULL   EQU   *
         $FIND W_VAL1R,C' '        Find first blank
         $VLC  W_VAL2R,W_VAL1R,(R15),DECREMENT=NO Operand match ?
         BL    CCVLCLO1            Low
         BE    CCVLCEQ1            Equal
         BH    CCVLCHI1            High
CCVLCLO1 TM    W_F$FLAG,W_F$CRI    Criteria Trace ?
         BNO   CCVLCLO2            . No
         $MSG  W_TRACE,DAF623I     Move message template
         $HEX  W_TRACE+12,W_CSTOT,LEN=1 CS count
         $HEX  W_TRACE+18,W_CCTOT,LEN=1 CC count
         MVC   W_TRACE+21(3),=C'Low'
         PUT   DAFTRACE,W_TRACE    Print a DAFTRACE record
CCVLCLO2 CLI   0(R4),X'01'         Low ?
         BNE   CCNOMTCH            No match
         B     CCMATCH             Match
CCVLCEQ1 TM    W_F$FLAG,W_F$CRI    Criteria Trace ?
         BNO   CCVLCEQ2            . No
         $MSG  W_TRACE,DAF623I     Move message template
         $HEX  W_TRACE+12,W_CSTOT,LEN=1 CS count
         $HEX  W_TRACE+18,W_CCTOT,LEN=1 CC count
         MVC   W_TRACE+21(5),=C'Equal'
         PUT   DAFTRACE,W_TRACE    Print a DAFTRACE record
CCVLCEQ2 CLI   1(R4),X'01'         Equal ?
         BNE   CCNOMTCH            No match
         B     CCMATCH             Match
CCVLCHI1 TM    W_F$FLAG,W_F$CRI    Criteria Trace ?
         BNO   CCVLCHI2            . No
         $MSG  W_TRACE,DAF623I     Move message template
         $HEX  W_TRACE+12,W_CSTOT,LEN=1 CS count
         $HEX  W_TRACE+18,W_CCTOT,LEN=1 CC count
         MVC   W_TRACE+21(4),=C'High'
         PUT   DAFTRACE,W_TRACE    Print a DAFTRACE record
CCVLCHI2 CLI   2(R4),X'01'         High ?
         BNE   CCNOMTCH            No match
         B     CCMATCH             Match
CCINCCHK LA    R7,4(R7)            Increment check
         B     CCNXTCHK            Next check
CCNOMTCH CLC   D_OPTXT(2),=C'NE'   Not Equal ?
         BNE   CCINCCHK            No
         NI    W_FLAG,255-W_F$CC   Turn off DAFCC flag
         B     CCINCCHK
CCMATCH  CLC   D_OPTXT(2),=C'NE'   Not Equal ?
         BNE   CCMTHALL            No
         OI    W_FLAG,W_F$CC       Turn on DAFCC flag
         B     CCINCCHK
CCMTHALL LA    R15,D_KWDOVC        Operator value count
         A     R15,D_OPOFF         Operator offset
         L     R2,0(R15)           Value count
         L     R15,W_CCTOT
         LA    R15,0(R2,R15)
         ST    R15,W_CCTOT
         B     CCINCOP
CCINCVAL TM    W_FLAG,W_F$CC       DAFCC ?
         BNO   CCINCVL2            . No
         $INCR W_CCTOT             Increment DAFCC counter
CCINCVL2 LA    R4,5(,R4)           Next operand (5 byte count)
         AH    R4,D_KWDOML         Next operand
         BCT   R6,CCNXTVAL         Next value
CCINCOP  LA    R8,L_TBLOP(,R8)     Next operator entry
         BCT   R5,CCNXTOP          Any more operators ?
         DROP  R8                  Operator table dereference
CCINCKWD LA    R3,E_TBLKWD(,R3)    Next keyword table entry
         L     R1,W_KWDTB#         Keyword table count
         $DECR W_KWDTB#            Keyword table count
         BCT   R1,CCNXTKWD         Next keyword ?
         DROP  R3                  Keyword table dereference
         TM    W_F$FLAG,W_F$CRI    Criteria Trace ?
         BNO   CCNOTRA1            . No
         $MSG  W_TRACE,DAF624I     Move message template
         $HEX  W_TRACE+12,W_CSTOT,LEN=1 CS count
         $HEX  W_TRACE+18,W_CCTOT,LEN=1 CC count
         MVC   W_TRACE+24(L'W_RECTYP),W_RECTYP RTY
         MVC   W_TRACE+32(L'W_DSN1),W_DSN1 dataset 1
         PUT   DAFTRACE,W_TRACE    Print a DAFTRACE record
CCNOTRA1 CLC   W_CSTOT,W_CCTOT     Match ?
         BNE   CCNOPUT             No, skip it
         L     R1,W_SMFRTY         Set record type SMF table base
         USING D_TBLSMF,R1         SMF table reference
         $INCR D_SMFRPT,F          Increment DAFRPT individual counter
         DROP  R1                  SMF table dereference
         CLC   W_SMFSTY,=F'0'      Sub type ?
         BE    CCNOSUB             . No
         L     R1,W_SMFSTY         Set sub type SMF table base
         USING D_TBLSMF,R1         SMF table reference
         $INCR D_SMFRPT,F          Increment DAFRPT individual counter
         DROP  R1                  SMF table dereference
CCNOSUB  EQU   *
         $INCR W_RPTTOT            Increment DAFRPT total counter
         PUT   SORTIN,W_SORT       Write next logical SORTIN record
CCNOPUT  EQU   *
         CLC   W_CMTCLR,=C'N'      Clear comment area ?
         BE    CCCMTCLR            No
         $FILL W_SRTCMT,C' '       Blank comment
         LA    R15,W_SRTCMT        Initialize comment address
         ST    R15,W_CMT@          Initialize comment address
CCCMTCLR EQU   *
         MVC   W_CMTCLR,=C'Y'      Clear comment area
         MVI   W_CHKDSN,C'Y'       Dataset - Yes
DAFCC    $EXIT                     Exit
         TITLE 'DAFCD - Convert Date'
DAFCD    $ENTRY AMODE=31,RMODE=24  Entry
         L     R2,0(R1)            Input date 0cyydddF Packed
         L     R3,4(R1)            Output date YYYYDDD
         CLC   0(4,R2),=4X'00'     Input date low values ?
         BNE   CDNOLOW             . No, continue
         MVC   0(7,R3),=CL007'0000000' Date low values
         B     DAFCD0              Exit
CDNOLOW  EQU   *
         MVC   W_TMPDTE,0(R2)      Copy input date to work date
         LA    R2,W_TMPDTE         Work date address
         LA    R15,CDCOUNT         Century table count
         LA    R14,CDTABLE         Century table address
CDCHECK  EQU   *
         CLC   0(1,R2),0(R14)      Century match ?
         BE    CDMATCH             Yes
         LA    R14,CDLENGTH(R14)   Next century table entry
         BCT   R15,CDCHECK         Check next century table entry
CDMATCH  EQU   *
         MVC   0(1,R2),1(R14)
         OI    3(R2),X'0F'         Remove date sign
         UNPK  0(7,R3),0(4,R2)     Unpack date
         B     DAFCD0              Exit
CDTABLE  EQU   *                   Century table
         DC    X'01',X'20'         01 = 20xx
CDLENGTH EQU   (*-CDTABLE)         Century table entry length
         DC    X'00',X'19'         00 = 19xx
         DC    X'02',X'21'         02 = 21xx
         DC    X'03',X'22'         03 = 22xx
         DC    X'04',X'23'         04 = 23xx
         DC    X'05',X'24'         05 = 24xx
         DC    X'06',X'25'         06 = 25xx
         DC    X'07',X'26'         07 = 26xx
         DC    X'08',X'27'         08 = 27xx
         DC    X'09',X'28'         09 = 28xx
CDCOUNT  EQU   (*-CDTABLE)/CDLENGTH Century table entry count
         DC    X'FF',X'99'         ?? = 99xx (if not found)
DAFCD    $EXIT                     Exit
         TITLE 'DAFCSP - Control Statement Parse'
**********************************************************************
*  Input:          Control statement image in W_CS                   *
*  Output:         R15: 00 - Process keyword, operator and value     *
*                  R15: 04 - Get next control statement              *
*  Notes:          None                                              *
**********************************************************************
DAFCSP   $ENTRY AMODE=31,RMODE=24  Entry
         CLC   W_CS(1),=C'*'       Comment ?
         BE    CSCMT               Yes
         LA    R3,W_CS             DAFCS pointer
         L     R4,W_CSLEN          DAFCS length
*
**       Locate Keyword
*
         L     R8,W_TBLTRT         Set TRT table base
         USING D_TBLTRT,R8         TRT table reference
         $FILL W_TRT,X'FF'         Non-blank TRT
         MVI   W_TRT+C' ',X'00'    Non-blank TRT
         $VLTRT (R3),W_TRT,(R4)    Look for Non-blank
         BZ    CSNOBLNK            . No Non-blank found
         LA    R4,1(R4)            Increment beginning address
         LR    R5,R1               Save keyword begining address
         SR    R1,R3               Determine offset
         AR    R3,R1               Adjust DAFCS address
         SR    R4,R1               Adjust DAFCS length
         $FILL W_TRT,X'00'         Blank TRT
         MVI   W_TRT+C' ',X'FF'    Blank TRT
         $VLTRT (R3),W_TRT,(R4)    Look for blank
         BZ    CSNOKWD             . No keyword found - skip it
         LA    R4,1(R4)            Increment beginning address
         LR    R6,R1               Save keyword ending address
         SR    R1,R3               Determine offset
         AR    R3,R1               Adjust DAFCS address
         SR    R4,R1               Adjust DAFCS length
         SR    R6,R5               Determine keyword length
         ST    R1,W_CSKWD@         Save keyword length
         LR    R15,R1              Keyword length
         $VLM  W_CSKWD,(R5),(R15)  Move the keyword
*
**       Locate Operator
*
         $FILL W_TRT,X'FF'         Non-blank TRT
         MVI   W_TRT+C' ',X'00'    Non-blank TRT
         $VLTRT (R3),W_TRT,(R4)    Look for Non-blank
         BZ    CSNOBLNK            . No Non-blank found
         LA    R4,1(R4)            Increment beginning address
         LR    R5,R1               Save operator begining address
         SR    R1,R3               Determine offset
         AR    R3,R1               Adjust DAFCS address
         SR    R4,R1               Adjust DAFCS length
         $FILL W_TRT,X'00'         Blank TRT
         MVI   W_TRT+C' ',X'FF'    Blank TRT
         $VLTRT (R3),W_TRT,(R4)    Look for blank
         BZ    CSNOOP              . No operator found - skip it
         LA    R4,1(R4)            Increment beginning address
         LR    R6,R1               Save operator ending address
         SR    R1,R3               Determine offset
         AR    R3,R1               Adjust DAFCS address
         SR    R4,R1               Adjust DAFCS length
         SR    R6,R5               Determine operator length
         ST    R1,W_CSOP@          Save operator length
         LR    R15,R1              Operator length
         $VLM  W_CSOP,(R5),(R15)   Move the operator
*
**       Locate Value
*
         $FILL W_TRT,X'FF'         Non-blank TRT
         MVI   W_TRT+C' ',X'00'    Non-blank TRT
         $VLTRT (R3),W_TRT,(R4)    Look for Non-blank
         BZ    CSNOBLNK            . No Non-blank found
         LA    R4,1(R4)            Increment beginning address
         LR    R5,R1               Save value begining address
         SR    R1,R3               Determine offset
         AR    R3,R1               Adjust DAFCS address
         SR    R4,R1               Adjust DAFCS length
         $FILL W_TRT,X'00'         Blank TRT
         MVI   W_TRT+C' ',X'FF'    Blank TRT
         $VLTRT (R3),W_TRT,(R4)    Look for blank
         BZ    CSNOVAL             . No value found - skip it
         LA    R4,1(R4)            Increment beginning address
         LR    R6,R1               Save value ending address
         SR    R1,R3               Determine offset
         AR    R3,R1               Adjust DAFCS address
         SR    R4,R1               Adjust DAFCS length
         SR    R6,R5               Determine value length
         ST    R1,W_CSVAL@         Save value length
         LR    R15,R1              Decrement value length
         $VLM  W_CSVAL,(R5),(R15)  Move the value
         L     R3,W_TBLKWD         Set keyword table address
         USING D_TBLKWD,R3         Keyword table reference
         LA    R0,#_TBLKWD         Keyword table count
CSKWDNXT CLC   W_CSKWD,D_KWDTXT    Valid keyword text ?
         BE    CSKWDFND            Yes
         CLC   W_CSKWD,D_KWDAL1    Valid keyword alias 1 ?
         BE    CSKWDFND            Yes
         CLC   W_CSKWD,D_KWDAL2    Valid keyword alias 2 ?
         BE    CSKWDFND            Yes
         CLC   W_CSKWD,D_KWDAL3    Valid keyword alias 3 ?
         BE    CSKWDFND            Yes
         CLC   W_CSKWD,D_KWDAL4    Valid keyword alias 4 ?
         BE    CSKWDFND            Yes
         CLC   W_CSKWD,D_KWDAL5    Valid keyword alias 5 ?
         BE    CSKWDFND            Yes
         LA    R3,E_TBLKWD(,R3)    Increment keyword table entry
         BCT   R0,CSKWDNXT         Check next keyword table entry
         MVC   W_CS+53(24),=C'<--- Unknown keyword    '
         $PRINT DAFLOG,W_CS        Put DAFLOG record
         OI    W_F$CS,W_F$KWD      Turn on keyword error flag
         B     DAFCSP4
CSKWDFND L     R4,=A(TBLOP)        Set operator table address
         USING D_TBLOP,R4          Keyword table reference
         LA    R0,#_TBLOP          Operator table count
CSOPNEXT CLC   W_CSOP,D_OPTXT      Valid operator text ?
         BE    CSOPFND             Yes
         LA    R4,L_TBLOP(,R4)     Increment operator table entry
         BCT   R0,CSOPNEXT         Check next operator table entry
         MVC   W_CS+53(24),=C'<--- Unknown operator   '
         $PRINT DAFLOG,W_CS        Put DAFLOG record
         OI    W_F$CS,W_F$OP       Turn on operator error flag
         B     DAFCSP4
CSOPFND  L     R7,W_CSVAL@         Value length
         LTR   R7,R7               Value missing ?
         BNZ   CSVALOK1            No
         MVC   W_CS+53(24),=C'<--- Value Missing    '
         $PRINT DAFLOG,W_CS        Put DAFLOG record
         OI    W_F$CS,W_F$VAL      Turn on operator error flag
         B     DAFCSP4
CSVALOK1 CH    R7,D_KWDOML         Value too long ?
         BNH   CS$TYPE             No
         MVC   W_CS+53(24),=C'<--- Value too long     '
         $PRINT DAFLOG,W_CS        Put DAFLOG record
         OI    W_F$CS,W_F$VAL      Turn on value error flag
         B     DAFCSP4
CS$TYPE  CLC   D_KWDTYP,=CL008'GENERAL' General type ?
         BE    CSPOK               Yes - process it
         CLC   W_TYPE,=CL008' '    Specific types yet ?
         BE    CSMVTYPE            No - move this one
         CLC   D_KWDTYP,W_TYPE     Same specific type ?
         BE    CSPOK               Yes - process it
         MVC   W_CS+53(24),=C'<--- Inconsistent type  '
         $PRINT DAFLOG,W_CS        Put DAFLOG record
         OI    W_F$CS,W_F$KWD      Turn on keyword error flag
         B     DAFCSP4
CSMVTYPE MVC   W_TYPE,D_KWDTYP     Set type
         B     CSPOK
CSCMT    $PRINT DAFLOG,W_CS        Put DAFLOG record
         B     DAFCSP4
CSNOBLNK MVC   W_CS+53(24),=C'<--- Unable to parse    '
         $PRINT DAFLOG,W_CS        Put DAFLOG record
         OI    W_F$CS,W_F$KWD      Turn on keyword error flag
         B     DAFCSP4
CSNOKWD  MVC   W_CS+53(24),=C'<--- Missing keyword    '
         $PRINT DAFLOG,W_CS        Put DAFLOG record
         OI    W_F$CS,W_F$KWD      Turn on keyword error flag
         B     DAFCSP4
CSNOOP   MVC   W_CS+53(24),=C'<--- Missing operator   '
         $PRINT DAFLOG,W_CS        Put DAFLOG record
         OI    W_F$CS,W_F$OP       Turn on operator error flag
         B     DAFCSP4
CSNOVAL  MVC   W_CS+53(24),=C'<--- Missing value      '
         $PRINT DAFLOG,W_CS        Put DAFLOG record
         OI    W_F$CS,W_F$VAL      Turn on value error flag
         B     DAFCSP4
CSPOK    EQU   *
         CLI   D_KWDFMT,C'F'       Fullword ?
         BNE   CSPNOF              . No - continue
         MVC   W_CL016,=16C'0'
         LA    R5,W_CL016
         LA    R5,15(R5)
         LA    R6,W_CSVAL
         L     R7,W_CSVAL@
         SR    R5,R7
         LA    R5,1(R5)
CSPFWNXT EQU   *
         MVC   0(1,R5),0(R6)
         LA    R5,1(R5)
         LA    R6,1(R6)
         BCT   R7,CSPFWNXT
         ZAP   W_DBL,=P'0'         Zero
         PACK  W_DBL,W_CL016       Pack
         CVB   R5,W_DBL            Convert to binary
         ST    R5,W_CSVAL          Store binary value
         MVC   W_CSVAL@,=F'4'      Store binary length (4)
CSPNOF   EQU   *
         ST    R3,W_KWD@           Keyword table pointer
         ST    R4,W_OP@            Operator table pointer
         B     DAFCSP0
         DROP  R3                  Keyword table dereference
         DROP  R4                  Operator table dereference
         DROP  R8                  TRT table reference
DAFCSP   $EXIT                     Exit
         TITLE 'DAFCT - Convert Time'
DAFCT    $ENTRY AMODE=31,RMODE=24  Entry
         L     R2,0(R1)            Input Time
         L     R3,4(R1)            Output Time
         MVC   W_DBL(4),0(R2)      Move SMF record binary time
         L     R1,W_DBL            Load SMF record binary time
         SLR   R0,R0               Clear
         D     R0,=F'360000'       Determine hours
         CVD   R1,W_DBL            Convert hours
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  0(2,R3),W_DBL+6(2)  Unpack hours
         MVI   2(R3),C'.'          Move period
         SRDL  R0,32               Remaining hundredths of seconds
         D     R0,=F'6000'         Determine minutes
         CVD   R1,W_DBL            Convert minutes
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  3(2,R3),W_DBL+6(2)  Unpack minutes
         MVI   5(R3),C'.'          Move period
         SRDL  R0,32               Remaining hundredths of seconds
         D     R0,=F'100'          Determine seconds
         CVD   R1,W_DBL            Convert seconds
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  6(2,R3),W_DBL+6(2)  Unpack seconds
         MVI   8(R3),C'.'          Move period
         CVD   R0,W_DBL            Convert hundredths of seconds
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  9(2,R3),W_DBL+6(2)  Unpack hundredths of seconds
DAFCT    $EXIT                     Exit
         TITLE 'DAFDSI - Display System Information'
DAFDSI   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Display SMF System Identification
*
         XR    R6,R6               PSA address
         USING PSA,R6              PSA reference
         L     R6,FLCCVT           CVT address
         DROP  R6                  PSA dereference
         USING CVT,R6              CVT reference
         L     R6,CVTSMCA          SMCA address
         DROP  R6                  CVT dereference
         USING SMCABASE,R6         SMCA reference
         $MSG  W_LOG,DAF560I       Move message template
         MVC   W_LOG+40(4),SMCASID SMF System Identification
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         DROP  R6                  SMCA dereference
*
**       Display Hardware Name
*
         XR    R6,R6               PSA address
         USING PSA,R6              PSA reference
         L     R6,FLCCVT           CVT address
         DROP  R6                  PSA dereference
         USING CVT,R6              CVT reference
         L     R6,CVTECVT          ECVT address
         DROP  R6                  CVT dereference
         USING ECVT,R6             ECVT reference
         CLC   ECVTHDNM,=CL8' '    Hardware name blank ?
         BE    INITNOHW            . Yes
         $MSG  W_LOG,DAF561I       Move message template
         MVC   W_LOG+36(L'ECVTHDNM),ECVTHDNM Hardware name
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         DROP  R6                  ECVT dereference
INITNOHW EQU   *
*
**       Display Logical Partition Name
*
         XR    R6,R6               PSA address
         USING PSA,R6              PSA reference
         L     R6,FLCCVT           CVT address
         DROP  R6                  PSA dereference
         USING CVT,R6              CVT reference
         L     R6,CVTECVT          ECVT address
         DROP  R6                  CVT dereference
         USING ECVT,R6             ECVT reference
         CLC   ECVTLPNM,=CL8' '    Logical partition name blank ?
         BE    INITNOLP            . Yes
         $MSG  W_LOG,DAF562I       Move message template
         MVC   W_LOG+36(L'ECVTLPNM),ECVTLPNM Logical partition name
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         DROP  R6                  ECVT dereference
INITNOLP EQU   *
*
**       Display Virtual Machine Userid
*
         XR    R6,R6               PSA address
         USING PSA,R6              PSA reference
         L     R6,FLCCVT           CVT address
         DROP  R6                  PSA dereference
         USING CVT,R6              CVT reference
         L     R6,CVTECVT          ECVT address
         DROP  R6                  CVT dereference
         USING ECVT,R6             ECVT reference
         CLC   ECVTVMNM,=CL8' '    Virtual machine userid blank ?
         BE    INITNOVM            . Yes
         $MSG  W_LOG,DAF563I       Move message template
         MVC   W_LOG+36(L'ECVTVMNM),ECVTVMNM Virtual machine userid
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         DROP  R6                  ECVT dereference
INITNOVM EQU   *
*
**       Display CPU Type and Serial Number
*
         XR    R6,R6               PSA address
         USING PSA,R6              PSA reference
         L     R6,FLCCVT           CVT address
         DROP  R6                  PSA dereference
         USING CVT,R6              CVT reference
         L     R6,CVTHID           SHID address
         DROP  R6                  CVT dereference
         USING SHID,R6             SHID reference
*        TM    CPCND_FLAGS,CPCND_VALID Valid ?
*        BNO   INITNOCT            . No
         $MSG  W_LOG,DAF564I       Move message template
         MVC   W_LOG+36(04),CPCND_TYPE+02 Type number
         MVC   W_LOG+41(L'CPCND_MODEL),CPCND_MODEL Model number
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
INITNOCT EQU   *
         $MSG  W_LOG,DAF565I       Move message template
         $HEX  W_LOG+38,SHID_CPUID,LEN=3
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         DROP  R6                  SHID dereference
*
**       Display Architecture Level
*
         XR    R6,R6               PSA address
         USING PSA,R6              PSA reference
         L     R6,FLCCVT           CVT address
         DROP  R6                  PSA dereference
         USING CVT,R6              CVT reference
         L     R6,CVTECVT          ECVT address
         DROP  R6                  CVT dereference
         USING ECVT,R6             ECVT reference
         L     R6,ECVTIPA          IPA address
         DROP  R6                  ECVT dereference
         USING IPA,R6              IPA reference
         $MSG  W_LOG,DAF566I       Move message template
         MVC   W_LOG+43(01),IPAARCHL Architecture Level
         DROP  R6                  IPA dereference
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
*
**       Display Base Control Program Name and Level
*
         XR    R6,R6               PSA address
         USING PSA,R6              PSA reference
         L     R6,FLCCVT           CVT address
         DROP  R6                  PSA dereference
         USING CVT,R6              CVT reference
         L     R6,CVTECVT          ECVT address
         DROP  R6                  CVT dereference
         USING ECVT,R6             ECVT reference
         $MSG  W_LOG,DAF567I       Move message template
         MVC   W_LOG+22(06),=CL006'BCP'
         MVC   W_LOG+29(06),ECVTPNAM Product Name
         MVC   W_LOG+36(02),ECVTPVER Product Version
         MVC   W_LOG+39(02),ECVTPREL Product Release
         MVC   W_LOG+42(02),ECVTPMOD Product Modification
         DROP  R6                  ECVT dereference
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
*
**       Display Data Facilities Name and Level
*
         XR    R6,R6               PSA address
         USING PSA,R6              PSA reference
         L     R6,FLCCVT           CVT address
         DROP  R6                  PSA dereference
         USING CVT,R6              CVT reference
         L     R6,CVTDFA           DFA address
         DROP  R6                  CVT dereference
         USING DFA,R6              DFA reference
         $MSG  W_LOG,DAF567I       Move message template
         CLI   DFAPROD,DFAZOS      DFSMS z/OS ?
         BNE   INITDFAOS390        . No
         MVC   W_LOG+22(13),=CL013'DFSMS  z/OS' Product Name
         XR    R7,R7               Clear
         ICM   R7,B'0111',DFAVER   Load hex 3 byte VRM
         O     R7,=X'00F0F0F0'     Convert to ZD
         ST    R7,W_DOUBLE+4       Move to storage
         PACK  W_DOUBLE(2),W_DOUBLE+5(3) Unpack VRM
         XR    R7,R7               Clear
         ICM   R7,B'0011',W_DOUBLE Load packed 2 byte VRM
         ST    R7,W_DOUBLE         Move to storage
         UNPK  W_FULL1(3),W_DOUBLE+2(2) Unpack VRM
         MVC   W_LOG+37(01),W_FULL1  Product Version
         MVC   W_LOG+40(01),W_FULL1+1 Product Release
         MVC   W_LOG+43(01),W_FULL1+2 Product Modification
         B     INITDFAMSG          Continue
INITDFAOS390 EQU *
         CLI   DFAPROD,DFAOS390    DFSMS OS/390 ?
         BNE   INITDFADFSMS        . No
         MVC   W_LOG+22(13),=CL013'DFSMS  OS/390' Product Name
         XR    R7,R7               Clear
         ICM   R7,B'0111',DFAVER   Load hex 3 byte VRM
         O     R7,=X'00F0F0F0'     Convert to ZD
         ST    R7,W_DOUBLE+4       Move to storage
         PACK  W_DOUBLE(2),W_DOUBLE+5(3) Unpack VRM
         XR    R7,R7               Clear
         ICM   R7,B'0011',W_DOUBLE Load packed 2 byte VRM
         ST    R7,W_DOUBLE         Move to storage
         UNPK  W_FULL1(3),W_DOUBLE+2(2) Unpack VRM
         MVC   W_LOG+37(01),W_FULL1  Product Version
         MVC   W_LOG+40(01),W_FULL1+1 Product Release
         MVC   W_LOG+43(01),W_FULL1+2 Product Modification
         B     INITDFAMSG          Continue
INITDFADFSMS EQU *
         CLI   DFAPROD,DFADFSMS    DFSMS ?
         BNE   INITDFADFP          . No
         MVC   W_LOG+22(13),=CL013'DFSMS' Product Name
         XR    R7,R7               Clear
         ICM   R7,B'0111',DFAVER   Load hex 3 byte VRM
         O     R7,=X'00F0F0F0'     Convert to ZD
         ST    R7,W_DOUBLE+4       Move to storage
         PACK  W_DOUBLE(2),W_DOUBLE+5(3) Unpack VRM
         XR    R7,R7               Clear
         ICM   R7,B'0011',W_DOUBLE Load packed 2 byte VRM
         ST    R7,W_DOUBLE         Move to storage
         UNPK  W_FULL1(3),W_DOUBLE+2(2) Unpack VRM
         MVC   W_LOG+37(01),W_FULL1  Product Version
         MVC   W_LOG+40(01),W_FULL1+1 Product Release
         MVC   W_LOG+43(01),W_FULL1+2 Product Modification
         B     INITDFAMSG          Continue
INITDFADFP   EQU *
         CLI   DFAPROD,DFADFP      DFP ?
         BNE   INITDFAERR          . No
         MVC   W_LOG+22(13),=CL013'DFP' Product Name
         XR    R7,R7               Clear
         ICM   R7,B'0011',DFAREL   Load hex 2 byte VRM
         O     R7,=X'0000000F'     Force sign
         ST    R7,W_DOUBLE         Move to storage
         UNPK  W_FULL1(3),W_DOUBLE+2(2) Unpack VRM
         MVC   W_LOG+37(01),W_FULL1  Product Version
         MVC   W_LOG+40(01),W_FULL1+1 Product Release
         MVC   W_LOG+43(01),W_FULL1+2 Product Modification
         B     INITDFAMSG          Continue
INITDFAERR   EQU *
         MVC   W_LOG+22(13),=CL013'DFA Unknown' Product Name
         B     INITDFAMSG          Continue
INITDFAMSG   EQU *
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         DROP  R6                  DFA dereference
*
**       Display Region Limits / Sizes
*
         XR    R6,R6               PSA address
         USING PSA,R6              PSA reference
         L     R6,PSAAOLD          Current ASCB
         DROP  R6                  PSA dereference
         USING ASCB,R6             ASCB reference
         L     R6,ASCBLDA          VSM Local Data Area
         DROP  R6                  ASCB dereference
         USING LDA,R6              VSM Local Data Area reference
         $MSG  W_LOG,DAF568I       Move message template
         L     R0,LDAREGRQ         Region size requested
         CVD   R0,W_DBL
         MVC   W_RCTMSK,P_RCTMSK
         EDMK  W_RCTMSK,W_DBL
         MVC   W_LOG+31(13),W_RCTMSK+7
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         $MSG  W_LOG,DAF569I       Move message template
         L     R0,LDALIMIT         Region limit below
         CVD   R0,W_DBL
         MVC   W_RCTMSK,P_RCTMSK
         EDMK  W_RCTMSK,W_DBL
         MVC   W_LOG+31(13),W_RCTMSK+7
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         $MSG  W_LOG,DAF570I       Move message template
         L     R0,LDAVVRG          Region size below
         CVD   R0,W_DBL
         MVC   W_RCTMSK,P_RCTMSK
         EDMK  W_RCTMSK,W_DBL
         MVC   W_LOG+31(13),W_RCTMSK+7
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         $MSG  W_LOG,DAF571I       Move message template
         L     R0,LDAELIM          Region limit above
         CVD   R0,W_DBL
         MVC   W_RCTMSK,P_RCTMSK
         EDMK  W_RCTMSK,W_DBL
         MVC   W_LOG+31(13),W_RCTMSK+7
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         $MSG  W_LOG,DAF572I       Move message template
         L     R0,LDAEVVRG         Region size above
         CVD   R0,W_DBL
         MVC   W_RCTMSK,P_RCTMSK
         EDMK  W_RCTMSK,W_DBL
         MVC   W_LOG+31(13),W_RCTMSK+7
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         DROP  R6                  VSM Local Data Area dereference
*
**       Display SMF Datasets
*
         XR    R6,R6               PSA address
         USING PSA,R6              PSA reference
         L     R6,FLCCVT           CVT address
         DROP  R6                  PSA dereference
         USING CVT,R6              CVT reference
         L     R6,CVTSMCA          SMCA address
         DROP  R6                  CVT dereference
         USING SMCABASE,R6         SMCA reference
         ICM   R7,B'1111',SMCAFRDS First RDS address
         BZ    INITSMFX                . SMF not active, exit
         USING IEEMBRDS,R7         RDS Reference
INITSMFN EQU   *
         $MSG  W_LOG,DAF573I       Move message template
         MVC   W_LOG+13(44),RDSNAME RDS dataset name
         MVC   W_LOG+62(06),RDSVOLID Volume serial
         MVC   W_LOG+70(06),=CL006'Active'
         TM    RDSFLG1,RDSFREE     Free Pending ?
         BNO   INITSMF1            . No
         MVC   W_LOG+70(12),=CL012'Free Pending'
         B     INITSMFI            Increment
INITSMF1 EQU   *
         TM    RDSFLG1,RDSDUMP     Dump Required ?
         BNO   INITSMF2            . No
         MVC   W_LOG+70(13),=CL013'Dump Required'
         B     INITSMFI            Increment
INITSMF2 EQU   *
         TM    RDSFLG1,RDSREADY    Alternate ?
         BNO   INITSMF3            . No
         MVC   W_LOG+70(09),=CL009'Alternate'
         B     INITSMFI            Increment
INITSMF3 EQU   *
         TM    RDSFLG1,RDSCLOSE    Close Pending ?
         BNO   INITSMF4            . No
         MVC   W_LOG+70(13),=CL013'Close Pending'
         B     INITSMFI            Increment
INITSMF4 EQU   *
         TM    RDSFLG1,RDSNDOP     Open Pending ?
         BNO   INITSMF5            . No
         MVC   W_LOG+70(12),=CL012'Open Pending'
         B     INITSMFI            Increment
INITSMF5 EQU   *
         TM    RDSFLG2,RDSLOST     Dummy RDS for Lost Data ?
         BNO   INITSMF6            . No
         MVC   W_LOG+70(23),=CL023'Dummy RDS for Lost Data'
         B     INITSMFI            Increment
INITSMF6 EQU   *
         TM    RDSFLG2,RDSPHYER    Physical I/O Error ?
         BNO   INITSMF7            . No
         MVC   W_LOG+70(18),=CL018'Physical I/O Error'
         B     INITSMFI            Increment
INITSMF7 EQU   *
         TM    RDSFLG2,RDSLOGER    Logical I/O Error ?
         BNO   INITSMF8            . No
         MVC   W_LOG+70(17),=CL017'Logical I/O Error'
         B     INITSMFI            Increment
INITSMF8 EQU   *
INITSMFI EQU   *
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         CLC   SMCAFRDS,SMCALRDS   Single RDS ?
         BE    INITSMFX            . Yes, exit
         L     R7,RDSNEXT          Next RDA address
         C     R7,SMCALRDS         More RDSs ?
         BNE   INITSMFN            . Yes - Process it
INITSMFX EQU   *
         DROP  R6                  SMCA dereference
         DROP  R7                  RDS dereference
*
**       Display SMF Record Types Not Being Recorded
*
         L     R4,W_TBLSMF         Set SMF table base address
         USING D_TBLSMF,R4         SMF table reference
         LA    R5,#_TBLSMF         SMF definition table count
INITRECN EQU   *
         XR    R6,R6               Clear SMF record type
         ICM   R6,B'0001',D_SMFRTY SMF record type
         XR    R7,R7               Clear SMF sub type
         ICM   R7,B'0011',D_SMFSTY SMF sub type
         C     R7,=F'0'            SMF sub type ?
         BNE   INITRECS            . Yes, check it
         SMFRTEST RECTYPE=(R6)     Test record type recording
         C     R15,=F'0'           OK ?
         BE    INITRECI            . Yes
         $MSG  W_LOG,DAF530W       Move message template
         MVC   W_LOG+44(L'D_SMFRNM),D_SMFRNM SMF record name
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     INITRECI            Continue
INITRECS EQU   *
         SMFRTEST RECTYPE=(R6),SUBTYPE=(R7) Test sub type recording
         C     R15,=F'0'           OK ?
         BE    INITRECI            . Yes
         $MSG  W_LOG,DAF530W       Move message template
         MVC   W_LOG+44(L'D_SMFRNM),D_SMFRNM SMF record name
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     INITRECI            Continue
INITRECI EQU   *
         LA    R4,E_TBLSMF(,R4)    Next SMF table entry
         BCT   R5,INITRECN         Another SMF table entry ?
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(14),=CL014'Initialization'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         DROP  R4                  SMF table dereference
DAFDSI   $EXIT                     Exit
         TITLE 'DAFDSN - Check Dataset Name'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - Dataset name address   (R3)            *
*  Output:         R15: 00 - Valid dataset name                      *
*                  R15: 04 - Invalid dataset name                    *
*  Notes:          If DSN is 44X'04', change it to FORMAT4.DSCB      *
*                  If DSN is Defrag Special DSN, correct it          *
**********************************************************************
DAFDSN   $ENTRY AMODE=31,RMODE=24    Entry
         L     R3,0(R1)            Dataset name address
         CLC   0(44,R3),=44X'04'   VTOC ?
         BNE   DSNVTOCX            . No, leave it alone
         MVC   0(44,R3),=CL044'FORMAT4.DSCB ' VTOC
*        CALL  SMFSNAP             SNAP current SMF record
         B     DAFDSN0             . Yes - exit - valid dataset name
DSNVTOCX EQU   *
         CLC   0(17,R3),=C'SYS1.DFDSS.DEFRAG' Special DEFRAG ?
         BNE   DSNDSSX             . No
         CLC   17(10,R3),=X'4BFFFFFFFFFFFFFFFF4B' Special DEFRAG ?
         BNE   DSNDSSX             . No
         MVC   17(10,R3),=C'.XXXXXXXX.' Special DEFRAG
*        CALL  SMFSNAP             SNAP current SMF record
DSNDSSX  EQU   *
         L     R4,=A(TBLDSN)       Set DSN table base
         USING TBLDSN,R4           DSN table reference
         TRT   0(44,R3),TBLDSN     Valid dataset ?
         BZ    DAFDSN0             . Yes - exit - valid dataset name
         DROP  R4                  DSN table dereference
         L     R1,W_SMFRTY         Set record type SMF table base
         USING D_TBLSMF,R1         SMF table reference
         $INCR D_SMFINV,F          Increment invalid individual counter
         DROP  R1                  SMF table dereference
         CLC   W_SMFSTY,=F'0'      Sub type ?
         BE    CCINVNOSUB          . No
         L     R1,W_SMFSTY         Set sub type SMF table base
         USING D_TBLSMF,R1         SMF table reference
         $INCR D_SMFRPT,F          Increment DAFRPT individual counter
         DROP  R1                  SMF table dereference
CCINVNOSUB EQU *
         $INCR W_INVTOT            Increment invalid total counter
         $MSG  W_LOG,DAF610I       Move message template
         MVC   W_LOG+17(L'W_RECTYP),W_RECTYP Record Type
         MVC   W_LOG+21(L'W_DATE),W_DATE Record Date
         MVC   W_LOG+29(L'W_TIME),W_TIME Record Time
         MVC   W_LOG+45(44),0(R3)  Invalid dataset name
         MVC   W_CS,W_LOG          Populate SNAP header
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         L     R1,W_SMFRTY         Set record type SMF table base
         USING D_TBLSMF,R1         SMF table reference
         CLC   =F'5',D_SMFINV      SNAP limit reached ?
         BL    DAFDSN4             . Exit - invalid dataset name
         DROP  R1                  SMF table dereference
         CALL  SMFSNAP             SNAP current SMF record
         B     DAFDSN4             Exit - invalid dataset name
DAFDSN   $EXIT                     Exit
         TITLE 'DAFDSORG - Convert DSORG bitmask to DSORG character'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - DSORG bitmask address   (R3)           *
*                  . 04(R1) - DSORG character address (R4)           *
**********************************************************************
DAFDSORG $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,0(R1)            DSORG bitmask address
         L     R4,4(R1)            DSORG character address
         MVC   0(3,R4),=CL003' '   Blank DSORG character
DAFDSORGIS EQU  *
         TM    0(R3),DS1DSGIS      Indexed sequential ?
         BNO   DAFDSORGPS          . No, check physical sequential
         MVC   0(2,R4),=CL002'IS'  . Yes
         LA    R4,2(R4)            Next character
         B     DAFDSORGU           Check unmovable
DAFDSORGPS EQU  *
         TM    0(R3),DS1DSGPS      Physical sequential ?
         BNO   DAFDSORGDA          . No, check direct organization
         MVC   0(2,R4),=CL002'PS'  . Yes
         LA    R4,2(R4)            Next character
         B     DAFDSORGU           Check unmovable
DAFDSORGDA EQU  *
         TM    0(R3),DS1DSGDA      Direct organization ?
         BNO   DAFDSORGPO          . No, check partitioned organization
         MVC   0(2,R4),=CL002'DA'  . Yes
         LA    R4,2(R4)            Next character
         B     DAFDSORGU           Check unmovable
DAFDSORGPO EQU  *
         TM    0(R3),DS1DSGPO      Partitioned organization ?
         BNO   DAFDSORGVS          . No, check VSAM
         MVC   0(2,R4),=CL002'PO'  . Yes
         LA    R4,2(R4)            Next character
         B     DAFDSORGU           Check unmovable
DAFDSORGVS EQU  *
         TM    1(R3),DS1ORGAM      VSAM ?
         BNO   DAFDSORGU           . No, check unmovable
         MVC   0(2,R4),=CL002'VS'  . Yes
         LA    R4,2(R4)            Next character
         B     DAFDSORGU           Check unmovable
DAFDSORGU EQU  *
         TM    0(R3),DS1DSGU       Unmovable ?
         BNO   DAFDSORGX           . No, exit
         MVC   0(1,R4),=CL001'U'   . Yes
         B     DAFDSORGX           Exit
DAFDSORG $EXIT                     Exit
         TITLE 'DAFES - Extract SMF Records'
DAFES    $ENTRY AMODE=31,RMODE=24  Entry
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(19),=CL019'Extract SMF Records'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
*
**       Open SORTIN
*
         MVC   SORTIN(L_SORTIN),P_SORTIN Copy SORTIN DCB template
         MVC   W_OPENO(L_OPENO),T_OPENO Copy open parameter list
         OPEN  SORTIN,MF=(E,W_OPENO) Open SORTIN
         ST    R15,W_OPEN_RC       Save the return code from OPEN
         $MSG  W_LOG,DAF553I       Move message template
         MVC   W_LOG+17(8),=CL008'SORTIN' Move DDNAME into message
         $HEX  W_LOG+29,W_OPEN_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         TM    SORTIN+48,X'10'     SORTIN open ?
         BNZ   ESSIOK              . Yes
         ABEND 801,DUMP            User abend 801 (U0801)
ESSIOK   EQU   *                   The file is open
*
**       Initialize High / Low Dates
*
         MVC   W_DTE_HI,=C'0000000' Set initial high date
         MVC   W_DTE_LO,=C'9999999' Set initial low date
         MVC   W_TME_HI,=C'00.00.00.00' Set initial high time
         MVC   W_TME_LO,=C'99.99.99.99' Set initial low time
*
**       Determine DAFSMF DSORG
*
ESDDD    EQU   *
         MVC   DAFSMF(L_DAFSMF),T_DAFSMF Copy DAFSMF DCB
         LA    R15,DAFSMF          DAFSMF
         USING IHADCB,R15          DAFSMF DCB reference
         LA    R2,W_EXLST          Point to EXLST
         STCM  R2,B'0111',DCBEXLSA Store EXLST in DCB
         DROP  R15                 DAFSMF DCB dereference
         MVC   W_EXLST,W_JFCB@     DAFSMF JFCB address
         MVC   W_EXLST+00(01),=X'87' Type 07 JFCB Exit List Entry
         MVC   W_RDJFCB(L_RDJFCB),T_RDJFCB Copy RDJFCB template
         RDJFCB (DAFSMF,INPUT),    Issue RDJFCB                        X
               MF=(E,W_RDJFCB)
         LTR   R15,R15             OK ?
         BZ    ESJFCBOK            . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(13),=CL013'RDJFCB/DAFSMF' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESJFCBOK EQU   *
         L     R3,W_JFCB@          DAFSMF JFCB address
         USING JFCB,R3             DAFSMF JFCB reference
         MVC   W_DSN1,JFCBDSNM     Save dataset name
         TM    JFCDSRG2,JFCORGAM   VSAM ?
         BO    ESFLGV              . Yes
         TM    JFCFLGS1,JFCBLSR    Batch LSR ?
         BO    ESFLGV              . Yes
ESFLGQ   EQU   *
         OI    W_FLAG,W_F$QSAM     Turn on DAFSMF QSAM flag
         B     ESFLGX              Continue
ESFLGV   EQU   *
         OI    W_FLAG,W_F$VSAM     Turn on DAFSMF VSAM flag
         B     ESFLGX              Continue
ESFLGX   EQU   *
         DROP  R3                  DAFSMF JFCB dereference
         TM    W_FLAG,W_F$QSAM     DAFSMF QSAM ?
         BO    ESOPNQ              . Yes
         TM    W_FLAG,W_F$VSAM     DAFSMF VSAM ?
         BO    ESOPNV              . Yes
ESOPNQ   EQU   *                   DAFSMF QSAM
         MVC   DAFSMF(L_DAFSMF),T_DAFSMF Copy DAFSMF DCB
         LA    R15,DAFSMF          DAFSMF
         USING IHADCB,R15          DAFSMF DCB reference
         LA    R2,W_EXLST          Point to EXLST
         STCM  R2,B'0111',DCBEXLSA Store EXLST in DCB
         DROP  R15                 DAFSMF DCB dereference
         MVC   W_EXLST,W_ARL@      DAFSMF ARL address
         MVC   W_EXLST+00(01),=X'93' Type 13 JFCB Exit List Entry
         LA    R15,W_DCBE Copy DCBE Address
         ST    R15,DAFSMF Copy DCBE Address
         MVC   W_DCBE(L_DCBE),T_DCBE Copy DCBE template
         MVC   W_OPENI(L_OPENI),T_OPENI Copy open parameter list
         OPEN  DAFSMF,MF=(E,W_OPENI) Open DAFSMF QSAM
         ST    R15,W_OPEN_RC       Save the return code from OPEN
         $MSG  W_LOG,DAF553I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFSMF' Move DDNAME into message
         $HEX  W_LOG+29,W_OPEN_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         TM    DAFSMF+48,X'10'     DAFSMF open ?
         BNZ   ESSMFQOK            . Yes
         ABEND 801,DUMP            User abend 801 (U0801)
ESSMFQOK EQU   *                   The file is open
         L     R3,W_ARL@           DAFSMF ARL address
         USING ARL,R3              DAFSMF ARL reference
         MVC   ARLLEN,=AL2(36)     ARL length
         MVC   ARLIDENT,=CL002'AR' ARL identifier
         MVC   ARLOPT1,ARLLANY     ARA may be above the 16M line
         MVC   W_RDJFCB(L_RDJFCB),T_RDJFCB Copy RDJFCB template
         RDJFCB (DAFSMF,INPUT),    Issue RDJFCB                        X
               MF=(E,W_RDJFCB)
         LTR   R15,R15             OK ?
         BZ    ESJFCBOK2           . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(13),=CL013'RDJFCB/DAFSMF' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESJFCBOK2 EQU   *
         L     R4,ARLAREA          DAFSMF ARA address
         USING ARA,R4              DAFSMF ARA reference
         LH    R5,ARLRTRVD         Number of JFCB'S retrieved
ESJFCBN2 EQU   *
         LA    R7,ARAJFCB          JFCB address
         USING JFCB,R7             JFCB reference
         $MSG  W_LOG,DAF555I       Move message template
         LA    R15,W_LOG+17        Lost to time
         ST    R15,W_CMT@          Lost to time
         MVI   W_FMTMC,C'N'        Format MC - No
         CALL  DAFMC,              DSN                                 X
               (=C'DSN=',JFCBDSNM,44),                                 X
               MF=(E,W_WRK)
         CALL  DAFDSORG,           Process DSORG                       X
               (JFCDSORG,W_DSORG),                                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              DSORG                               X
               (=C',DSORG=',W_DSORG,3),                                X
               MF=(E,W_WRK)
         CALL  DAFRECFM,           RECFM                               X
               (JFCRECFM,W_RECFM),                                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              RECFM                               X
               (=C',RECFM=',W_RECFM),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              LRECL                               X
               (=C',LRECL=',JFCLRECL,2),                               X
               MF=(E,W_WRK)
         CALL  DAFMB,              BLKSIZE                             X
               (=C',BLKSIZE=',JFCBLKSI,2),                             X
               MF=(E,W_WRK)
         MVC   W_BYTE1,JFCBNVOL    Number of volumes
         CLC   W_BYTE1,=AL1(5)     More than five volumes ?
         BNH   ESJVOLOK            . No, continue
         MVC   W_BYTE1,=AL1(5)     Process only five volumes
ESJVOLOK EQU   *
         CALL  DAFMC,              Comma                               X
               (=C'NONE=',=C',',1),                                    X
               MF=(E,W_WRK)
         CALL  DAFPV,              Volume Serials                      X
               (W_BYTE1,1,JFCBVOLS,0,6),                               X
               MF=(E,W_WRK)
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVI   W_FMTMC,C'Y'        Format MC - Yes
         SR    R6,R6               PREPARE FOR IC
         IC    R6,ARAXINOF         GET DOUBLEWORD OFFSET
         SLL   R6,3                GET BYTE OFFSET
         AR    R6,R4               POINT TO EXTENDED INFO SEGMENT
         USING ARAXINLN,R6         EXTENDED INFORMATION SEGMENT
         AH    R4,ARALEN           POINT TO NEXT ARA ENTRY
         BCT   R5,ESJFCBN2         Another JFCB ?
         SR    R0,R0               Clear ARA length
         ICM   R0,B'0111',ARLRLEN  ARA length
         STORAGE RELEASE,ADDR=ARLAREA,LENGTH=(0) Release ARA storage
         DROP  R3                  DAFSMF ARL dereference
         DROP  R4                  DAFSMF ARA dereference
         DROP  R7                  DAFSMF JFCB dereference
         B     ESOPNX              Continue
ESOPNV   EQU   *                   DAFSMF VSAM
         GENCB AM=VSAM,            Generate DAFSMF VSAM EXLST          X
               BLK=EXLST,                                              X
               EODAD=(ESEOD,A),                                        X
               MF=(G,W_WRK)
         LTR   R15,R15             OK ?
         BZ    ESGEXLOK            . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(11),=CL011'GENCB/EXLST' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESGEXLOK ST    R1,W_EXLST@         DAFSMF VSAM EXLST address
         L     R2,W_EXLST@         DAFSMF VSAM EXLST address
         GENCB AM=VSAM,            Generate DAFSMF VSAM ACB            X
               BLK=ACB,                                                X
               BUFND=50,                                               X
               DDNAME=DAFSMF,                                          X
               EXLST=(R2),                                             X
               LOC=BELOW,                                              X
               MACRF=(ADR,IN,NSR,NUB,SEQ),                             X
               MF=(G,W_WRK)
         LTR   R15,R15             OK ?
         BZ    ESGACBOK            . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(9),=CL009'GENCB/ACB' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESGACBOK ST    R1,W_ACB@           DAFSMF VSAM ACB address
         L     R2,W_ACB@           DAFSMF VSAM ACB address
         MVC   W_OPENI(L_OPENI),T_OPENI Copy open parameter list
         OPEN  ((R2)),MF=(E,W_OPENI) Open DAFSMF VSAM
         ST    R15,W_OPEN_RC       Save the return code from OPEN
         $MSG  W_LOG,DAF553I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFSMF' Move DDNAME into message
         $HEX  W_LOG+29,W_OPEN_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         L     R15,W_OPEN_RC       DAFSMF open ?
         LTR   R15,R15             DAFSMF open ?
         BZ    ESSMFVOK            . Yes
         ABEND 801,DUMP            User abend 801 (U0801)
ESSMFVOK EQU   *                   The file is open
         L     R2,W_ACB@           DAFSMF VSAM ACB address
         L     R3,W_VWA@           VSAM workarea address
         GENCB ACB=(R2),           Generate DAFSMF VSAM RPL            X
               AM=VSAM,                                                X
               AREA=(R3),                                              X
               AREALEN=32768,                                          X
               BLK=RPL,                                                X
               OPTCD=(ADR,FWD,MVE,SEQ,SYN),                            X
               LOC=BELOW,                                              X
               MF=(G,W_WRK)
         LTR   R15,R15             OK ?
         BZ    ESGRPLOK            . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(9),=CL009'GENCB/RPL' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESGRPLOK ST    R1,W_RPL@           DAFSMF VSAM RPL address
         L     R2,W_ACB@           DAFSMF VSAM ACB address
         LA    R3,W_BUFNO          DAFSMF VSAM SHOWCB AREA address
         MVC   W_SHOWCB(L_SHOWCB),T_SHOWCB Copy SHOWCB template
         SHOWCB ACB=(R2),          Issue SHOWCB                        X
               AREA=(R3),                                              X
               LENGTH=20,                                              X
               MF=(E,W_SHOWCB)
         $MSG  W_LOG,DAF555I       Move message template
         LA    R15,W_LOG+17        Lost to time
         ST    R15,W_CMT@          Lost to time
         MVI   W_FMTMC,C'N'        Format MC - No
         CALL  DAFMC,              Dataset name                        X
               (=C'DSN=',W_DSN1,44),                                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Dataset organization                X
               (=C',DSORG=',=C'VS',2),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of data buffers              X
               (=C',BUFNO=',W_BUFNO,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Control interval size               X
               (=C',CINV=',W_CINV,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Logical record size                 X
               (=C',LRECL=',W_LRECL1,4),                               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of extents                   X
               (=C',NEXT=',W_NEXT,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of rcords                    X
               (=C',NLOGR=',W_NLOGR,4),                                X
               MF=(E,W_WRK)
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVI   W_FMTMC,C'Y'        Format MC - Yes
         B     ESOPNX              Continue
ESOPNX   EQU   *
ESNEXT   EQU   *
         TM    W_FLAG,W_F$VSAM     DAFSMF VSAM ?
         BO    ESGETV              . Yes
ESGETQ   EQU   *
         GET   DAFSMF              Read next logical DAFSMF record
         LR    R4,R1               Current record address
         ST    R4,W_SMFBAS         Current record address
         B     ESGETX              Continue
ESGETV   L     R2,W_RPL@           DAFSMF VSAM RPL address
         GET   RPL=(R2)            Read next logical DAFSMF record
         L     R4,W_VWA@           Set SMF record base
         CLC   4(10,R4),=CL010'SMFEOFMARK' Logical end of file
         BE    ESEOD               End of data
         ST    R4,W_SMFBAS         Current record address
         B     ESGETX              Continue
ESGETX   EQU   *
*
**       Record Type
*
         XC    W_SMFRTY,W_SMFRTY   Clear record type SMF table base
         XC    W_SMFSTY,W_SMFSTY   Clear sub type SMF table base
         USING D_SMFREC,R4         SMF record reference
         $INCR W_SMFTOT            Increment SMF total counter
         L     R5,W_TBLSMF         Set SMF table base address
         USING D_TBLSMF,R5         SMF table reference
         LA    R6,#_TBLSMF         SMF definition table count
ESSNEXT  EQU   *
         CLC   SMFNNRTY,D_SMFRTY   Match ?
         BE    ESSRTYOK            . Yes
ESSINCR  EQU   *
         LA    R5,E_TBLSMF(,R5)    Next SMF table entry
         BCT   R6,ESSNEXT          Another SMF table entry ?
         $INCR W_SMFOTH            Increment SMF other counter
         B     ESNEXT              Next DAFSMF record
ESSRTYOK EQU   *
         ST    R5,W_SMFRTY         Save record type SMF table base
         $INCR D_SMFSMF,F          Increment DAFSMF individual counter
         $FILL W_SORT,C' '         Blank sort record
         $FILL W_CRIT,C' '         Blank criteria area
         LA    R15,W_SRTCMT        Initialize comment address
         ST    R15,W_CMT@          Initialize comment address
         XR    R15,R15             Clear SMF record type
         ICM   R15,B'0001',SMFNNRTY Insert SMF record type
         ST    R15,W_RTY           Insert SMF record type
         MVC   W_RECTYP,D_SMFRTD   SMF record type - decimal
         CALL  DAFCD,              Convert Date                        X
               (SMFNNDTE,W_DATE),                                      X
               MF=(E,W_WRK)
         CALL  DAFCT,              Convert Time                        X
               (SMFNNTME,W_TIME),                                      X
               MF=(E,W_WRK)
*
**       Standard Subtypes
*
         TM    SMFNNFLG,X'40'      Standard subtypes ?
         BZ    ESSSTYNS            . No
         XR    R15,R15             Clear SMF sub type
         ICM   R15,B'0011',SMFNNSTY Insert SMF sub type
         ST    R15,W_STY           Insert SMF sub type
         CVD   R15,W_DBL           Insert SMF sub type
         MVC   W_MASK04,=XL4'F0212020'
         EDMK  W_MASK04,W_DBL+6
         MVC   W_SUBTYP,W_MASK04+1
ESSSTYNX EQU   *
         CLC   SMFNNRTY,D_SMFRTY   Record type Match ?
         BNE   ESSSTYX             . No
         CLC   SMFNNSTY,D_SMFSTY   Subtype Match ?
         BE    ESSSTYOK            . Yes
         LA    R5,E_TBLSMF(,R5)    Next SMF table entry
         BCT   R6,ESSSTYNX         Another SMF table entry ?
         B     ESSSTYX             Continue
ESSSTYOK EQU   *
         ST    R5,W_SMFSTY         Save sub type SMF table base
         $INCR D_SMFSMF,F          Increment DAFSMF individual counter
         B     ESSSTYX             Continue
*
**       Non Standard Subtypes
*
ESSSTYNS EQU   *
         CLC   SMFNNRTY,=AL1(22)   Record type 22 ?
         BE    ESS022              . Yes
         CLC   SMFNNRTY,=AL1(90)   Record type 90 ?
         BE    ESS090              . Yes
         AIF   ('&RT_NFTP' EQ '000').NONFTP41
         CLC   SMFNNRTY,=AL1(&RT_NFTP) Record type NFTP ?
         BE    ESSNFTP             . Yes
.NONFTP41 ANOP
         B     ESSSTYX             Continue
*
**       Non Standard Subtypes - SMF Record 022
*
ESS022   EQU   *
         XR    R15,R15             Clear SMF sub type
         ICM   R15,B'0011',SMF22IND Insert SMF sub type
         ST    R15,W_STY           Insert SMF sub type
         CVD   R15,W_DBL           Insert SMF sub type
         MVC   W_MASK04,=XL4'F0212020'
         EDMK  W_MASK04,W_DBL+6
         MVC   W_SUBTYP,W_MASK04+1
ESS022NX EQU   *
         CLC   SMFNNRTY,D_SMFRTY   Record type Match ?
         BNE   ESSSTYX             . No
         CLC   SMF22IND,D_SMFSTY   Subtype Match ?
         BE    ESS022OK            . Yes
         LA    R5,E_TBLSMF(,R5)    Next SMF table entry
         BCT   R6,ESS022NX         Another SMF table entry ?
         B     ESSSTYX             Continue
ESS022OK EQU   *
         ST    R5,W_SMFSTY         Save sub type SMF table base
         $INCR D_SMFSMF,F          Increment DAFSMF individual counter
         B     ESSSTYX             Continue
*
**       Non Standard Subtypes - SMF Record 090
*
ESS090   EQU   *
         L     R7,W_SMFBAS         SMF record address
         USING SMFRCD90,R7         SMF record reference
         MVC   W_SMFSO1,SMF90POF   Product offset
         MVC   W_SMFSL1,SMF90PLN   Product length
         MVC   W_SMFSN1,SMF90PON   Product number
         L     R1,W_SMFSO1         Product offset
         LTR   R1,R1               Product offset ?
         BNP   DAFESIT             . No - invalid triplet
         LH    R1,W_SMFSL1         Product length
         LTR   R1,R1               Product length ?
         BNP   DAFESIT             . No - invalid triplet
         LH    R1,W_SMFSN1         Product number
         LTR   R1,R1               Product number ?
         BNP   DAFESIT             . No - invalid triplet
         A     R7,W_SMFSO1         Address product
         DROP  R7                  SMF record dereference
         USING SMF90PRH,R7         Product reference
         XR    R15,R15             Clear SMF sub type
         ICM   R15,B'0011',SMF90TID Insert SMF sub type
         ST    R15,W_STY           Insert SMF sub type
         CVD   R15,W_DBL           Insert SMF sub type
         MVC   W_MASK04,=XL4'F0212020'
         EDMK  W_MASK04,W_DBL+6
         MVC   W_SUBTYP,W_MASK04+1
ESS090NX EQU   *
         CLC   SMFNNRTY,D_SMFRTY   Record type Match ?
         BNE   ESSSTYX             . No
         CLC   SMF90TID,D_SMFSTY   Subtype Match ?
         BE    ESS090OK            . Yes
         LA    R5,E_TBLSMF(,R5)    Next SMF table entry
         BCT   R6,ESS090NX         Another SMF table entry ?
         B     ESSSTYX             Continue
ESS090OK EQU   *
         ST    R5,W_SMFSTY         Save sub type SMF table base
         $INCR D_SMFSMF,F          Increment DAFSMF individual counter
         B     ESSSTYX             Continue
         DROP  R7                  Product dereference
         AIF   ('&RT_NFTP' EQ '000').NONFTP42
*
**       Non Standard Subtypes - SMF Record NFTP
*
ESSNFTP  EQU   *
         L     R7,W_SMFBAS         SMF record address
         USING SMFRCDXX,R7         SMF record reference
         XR    R15,R15             Clear SMF sub type
         ICM   R15,B'0011',SMFXXSTY Insert SMF sub type
         ST    R15,W_STY           Insert SMF sub type
         CVD   R15,W_DBL           Insert SMF sub type
         MVC   W_MASK04,=XL4'F0212020'
         EDMK  W_MASK04,W_DBL+6
         MVC   W_SUBTYP,W_MASK04+1
ESSNFTPNX EQU  *
         CLC   SMFXXRTY,D_SMFRTY   Record type Match ?
         BNE   ESSSTYX             . No
         CLC   SMFXXSTY,D_SMFSTY   Subtype Match ?
         BE    ESSNFTPOK           . Yes
         LA    R5,E_TBLSMF(,R5)    Next SMF table entry
         BCT   R6,ESSNFTPNX        Another SMF table entry ?
         B     ESSSTYX             Continue
ESSNFTPOK EQU  *
         ST    R5,W_SMFSTY         Save sub type SMF table base
         $INCR D_SMFSMF,F          Increment DAFSMF individual counter
         B     ESSSTYX             Continue
         DROP  R7                  SMF record dereference
.NONFTP42 ANOP
ESSSTYX  EQU   *
         L     R5,W_SMFRTY         Set record type SMF table base
         CLC   SMFNNRTY,=AL1(02)   Record type 2 ?
         BE    ESSYSTEM            . Yes, skip high/low processing
         CLC   SMFNNRTY,=AL1(03)   Record type 3 ?
         BE    ESSYSTEM            . Yes, skip high/low processing
         CLC   W_DATE,W_DTE_HI     Date = high date ?
         BNE   ESCHKHDG            No, check > high date
         CLC   W_TIME,W_TME_HI     Time > high time ?
         BNH   ESCHKLDE            No, check = low date
         MVC   W_TME_HI,W_TIME     Set high time
         B     ESCHKLDE            Check = low date
ESCHKHDG CLC   W_DATE,W_DTE_HI     Date > high date ?
         BNH   ESCHKLDE            No, check = low date
         MVC   W_DTE_HI,W_DATE     Set high date
         MVC   W_TME_HI,W_TIME     Set high time
ESCHKLDE CLC   W_DATE,W_DTE_LO     Date = low date ?
         BNE   ESCHKLDL            No, check < low date
         CLC   W_TIME,W_TME_LO     Time < low time ?
         BNL   ESCHKLDL            No, check < low date
         MVC   W_TME_LO,W_TIME     Set low time
         B     ESSYSTEM            Go move System identification
ESCHKLDL CLC   W_DATE,W_DTE_LO     Date < low date ?
         BNL   ESSYSTEM            No, go move System identification
         MVC   W_DTE_LO,W_DATE     Set low date
         MVC   W_TME_LO,W_TIME     Set low time
ESSYSTEM EQU   *
         MVC   W_SYSTEM,SMFNNSID   System identification
         L     R15,D_SMFEXT        Set SMF extract offset
         BALR  R14,R15             Extract it
         LTR   R15,R15             Check criteria required ?
         BNZ   ESNEXT              No, Next DAFSMF record
         CALL  DAFCC               Check criteria
         B     ESNEXT              Next DAFSMF record
ESEOD    EQU   *
*        CALL  DAFLPA              LPALST
*
**       Close SORTIN
*
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE SORTIN,MF=(E,W_CLOSE) Close SORTIN
         ST    R15,W_CLOSE_RC      Save the return code from CLOSE
         $MSG  W_LOG,DAF554I       Move message template
         MVC   W_LOG+17(8),=CL008'SORTIN' Move DDNAME into message
         $HEX  W_LOG+29,W_CLOSE_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
*
**       Close DAFSMF
*
         TM    W_FLAG,W_F$VSAM     DAFSMF VSAM ?
         BO    ESCLSV              . Yes
         TM    DAFSMF+48,X'10'     DAFSMF open ?
         BZ    ESSMNO              . No
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFSMF,MF=(E,W_CLOSE) Close DAFSMF
         ST    R15,W_CLOSE_RC      Save the return code from CLOSE
         $MSG  W_LOG,DAF554I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFSMF' Move DDNAME into message
         $HEX  W_LOG+29,W_CLOSE_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     ESSMNO              Continue
ESCLSV   EQU     *
         L     R2,W_ACB@
         CLOSE  ((R2))             Close DAFSMF
         ST    R15,W_CLOSE_RC      Save the return code from CLOSE
         $MSG  W_LOG,DAF554I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFSMF' Move DDNAME into message
         $HEX  W_LOG+29,W_CLOSE_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
ESSMNO   EQU     *
         CLC   W_SMFTOT,W_SMFOTH   Records Provided ?
         BNE   ESRECPRO            . Yes
         $MSG  W_LOG,DAF708E       Move message template
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_RC,=F'8'          . No
         B     ESRECSEL            Continue
ESRECPRO EQU   *
         CLC   W_RPTTOT,=F'0'      Records Selected ?
         BNE   ESRECSEL            . Yes
         $MSG  W_LOG,DAF704W       Move message template
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_RC,=F'4'          . No
ESRECSEL EQU   *
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(19),=CL019'Extract SMF Records'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAFES0              Exit
         DROP  R4                  SMF record dereference
         DROP  R5                  SMF table dereference
*
**       Invalid Triplet
*
DAFESIT  EQU   *
         CALL  DAFIT               Invalid triplet
         B     ESNEXT              Next DAFSMF record
DAFES    $EXIT                     Exit
         TITLE 'DAFGR - Generate Report'
DAFGR    $ENTRY AMODE=31,RMODE=24  Entry
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(15),=CL015'Generate Report'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         CLC   W_RPTTOT,=F'0'      Records Selected ?
         BE    GREXIT              . No, do not generate the report
*
**       Open SORTOUT
*
         MVC   SORTOUT(L_SORTOU),P_SORTOU Copy SORTOUT DCB template
         MVC   W_OPENI(L_OPENI),T_OPENI Copy open parameter list
         OPEN  SORTOUT,MF=(E,W_OPENI) Open SORTOUT
         ST    R15,W_OPEN_RC       Save the return code from OPEN
         $MSG  W_LOG,DAF553I       Move message template
         MVC   W_LOG+17(8),=CL008'SORTOUT' Move DDNAME into message
         $HEX  W_LOG+29,W_OPEN_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         TM    SORTOUT+48,X'10'    SORTOUT open ?
         BNZ   GRSOOK              . Yes
         ABEND 801,DUMP            User abend 801 (U0801)
GRSOOK   EQU   *                   The file is open
         $FILL W_LSTDSN,C' '       Blank out last entity
GETSORT  EQU   *
         GET   SORTOUT,W_SORT      Read next logical SORTOUT record
         PUT   DAFOUT,W_SORT       Write next logical DAFOUT record
         $FILL W_RPT1,C' '         Blank DAFRPT record
         CLC   W_LSTDSN,W_DSN1     Same entity ?
         BE    GRSKPDSN            Yes, skip DSN record
         CLI   W_LSTDSN+1,C' '     First DSN ?
         BE    GRSKPBLK            Yes, skip blank record
         $PRINT DAFRPT,P_BLANKS    Put blank DAFRPT record
GRSKPBLK EQU   *
         LA    R15,W_DAFRPT        DAFRPT control
         USING D_PRTCTL,R15        DAFRPT control reference
         CP    D_PRTLNE,=P'45'     Near bottom of page ?
         BL    GRMOVDSN            No
         ZAP   D_PRTLNE,=P'99'     Force new page
         DROP  R15                 DAFRPT control dereference
GRMOVDSN MVC   W_RPTDSN,W_DSN1     Dataset
         $PRINT DAFRPT,W_RPT       Put DAFRPT record
         $FILL W_RPT1,C' '         Blank DAFRPT record
         MVC   W_LSTDSN,W_DSN1     Set last entity
GRSKPDSN EQU   *
         LA    R15,W_DAFRPT        DAFRPT control
         USING D_PRTCTL,R15        DAFRPT control reference
         CP    D_PRTLNE,=P'50'     Near bottom of page ?
         BL    GRMOVDTE            No
         ZAP   D_PRTLNE,=P'99'     Force new page
         DROP  R15                 DAFRPT control dereference
GRMOVDTE MVC   W_RPTDTE,W_DATE     Date
         MVC   W_RPTTME,W_TIME     Time
         MVC   W_RPTSID,W_SYSTEM   System identification
         MVC   W_RPTJOB,W_JOB1     Job name
         MVC   W_RPTUSR,W_USER     User identification
         MVC   W_RPTRTY,W_RECTYP   Record type
         MVC   W_RPTSTY,W_SUBTYP   Sub type
         MVC   W_RPTCMT,W_SRTCM1   Comment line 1
         $PRINT DAFRPT,W_RPT       Put DAFRPT record
         CLI   W_SRTCM2,C' '       Second comment line ?
         BE    GETSORT             Any more SORTOUT records ?
         $FILL W_RPT1,C' '         Blank DAFRPT record
         MVC   W_RPTCMT,W_SRTCM2   Comment line 2
         $PRINT DAFRPT,W_RPT       Put DAFRPT record
         CLI   W_SRTCM3,C' '       Third comment line ?
         BE    GETSORT             Any more SORTOUT records ?
         $FILL W_RPT1,C' '         Blank DAFRPT record
         MVC   W_RPTCMT,W_SRTCM3   Comment line 3
         $PRINT DAFRPT,W_RPT       Put DAFRPT record
         CLI   W_SRTCM4,C' '       Fourth comment line ?
         BE    GETSORT             Any more SORTOUT records ?
         $FILL W_RPT1,C' '         Blank DAFRPT record
         MVC   W_RPTCMT,W_SRTCM4   Comment line 4
         $PRINT DAFRPT,W_RPT       Put DAFRPT record
         CLI   W_SRTCM5,C' '       Fifth comment line ?
         BE    GETSORT             Any more SORTOUT records ?
         $FILL W_RPT1,C' '         Blank DAFRPT record
         MVC   W_RPTCMT,W_SRTCM5   Comment line 5
         $PRINT DAFRPT,W_RPT       Put DAFRPT record
         B     GETSORT             Any more SORTOUT records ?
GREOD    EQU   *
*
**       Close SORTOUT
*
         TM    SORTOUT+48,X'10'    SORTOUT open ?
         BZ    GREXIT              . No
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE SORTOUT,MF=(E,W_CLOSE) Close SORTOUT
         ST    R15,W_CLOSE_RC      Save the return code from CLOSE
         $MSG  W_LOG,DAF554I       Move message template
         MVC   W_LOG+17(8),=CL008'SORTOUT' Move DDNAME into message
         $HEX  W_LOG+29,W_CLOSE_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
GREXIT   EQU *
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(15),=CL015'Generate Report'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
DAFGR    $EXIT                     Exit
         TITLE 'DAFGS - Generate Statistics'
DAFGS    $ENTRY AMODE=31,RMODE=24  Entry
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(19),=CL019'Generate Statistics'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         L     R3,W_TBLSMF         Set SMF table base address
         USING D_TBLSMF,R3         SMF table reference
         LA    R4,#_TBLSMF         SMF definition table count
GSNEXT   $FILL W_STAT,C' '         Blank DAFSTAT record
         MVC   W_STATNM,D_SMFRNM   Specific SMF record name
         L     R0,D_SMFSMF         Specific
         CVD   R0,W_DBL              DAFSMF
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATSM,W_RCTMSK+5
         L     R0,D_SMFRPT         Specific
         CVD   R0,W_DBL              DAFRPT
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATRP,W_RCTMSK+5
         L     R0,D_SMFINV         Specific
         CVD   R0,W_DBL              Invalid
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATIN,W_RCTMSK+5
         $PRINT DAFSTAT,W_STAT     Put DAFSTAT record (specific line)
         LA    R3,E_TBLSMF(,R3)    Next SMF table entry
         BCT   R4,GSNEXT           Another one ?
         $FILL W_STAT,C' '         Blank DAFSTAT record
         MVC   W_STATNM+8(58),P_OTH Other SMF record name
         L     R0,W_SMFOTH         Other
         CVD   R0,W_DBL              DAFSMF
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATSM,W_RCTMSK+5
         $PRINT DAFSTAT,W_STAT     Put DAFSTAT record (Other line)
         $FILL W_STAT,C' '         Blank DAFSTAT record
         MVC   W_STATNM+8(58),P_TOT Total SMF record name
         L     R0,W_SMFTOT         Total
         CVD   R0,W_DBL              DAFSMF
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATSM,W_RCTMSK+5
         L     R0,W_RPTTOT         Total
         CVD   R0,W_DBL              DAFRPT
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATRP,W_RCTMSK+5
         L     R0,W_INVTOT         Total
         CVD   R0,W_DBL              Invalid
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATIN,W_RCTMSK+5
         $PRINT DAFSTAT,W_STAT     Put DAFSTAT record (total line)
         $PRINT DAFSTAT,P_BLANKS   Put blank DAFSTAT record
         $FILL W_STAT,C' '         Blank DAFSTAT record
         MVC   W_STAT+01(23),=C'DAFSMF Date/Time Range:'
         $PRINT DAFSTAT,W_STAT     Put DAFSTAT record
         $FILL W_STAT,C' '         Blank DAFSTAT record
         MVC   W_STAT+01(13),=C'Low  - Date: '
         MVC   W_STAT+14(07),W_DTE_LO
         MVC   W_STAT+21(08),=C'  Time: '
         MVC   W_STAT+29(11),W_TME_LO
         $PRINT DAFSTAT,W_STAT     Put DAFSTAT record
         $FILL W_STAT,C' '         Blank DAFSTAT record
         MVC   W_STAT+01(13),=C'High - Date: '
         MVC   W_STAT+14(07),W_DTE_HI
         MVC   W_STAT+21(08),=C'  Time: '
         MVC   W_STAT+29(11),W_TME_HI
         $PRINT DAFSTAT,W_STAT     Put DAFSTAT record
         DROP  R3                  SMF table dereference
GSEXIT   EQU   *
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(19),=CL019'Generate Statistics'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
DAFGS    $EXIT                     Exit
         TITLE 'DAFINIT - Initialization'
DAFINIT  $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,0(R1)            Get JCL Parameter Pointer
         LH    R2,0(R3)            Get JCL parameter length
         LA    R3,2(R3)            Get JCL parameter address
*
**       Establish Recovery Environment
*
         MVC   W_ESTAE(L_ESTAE),T_ESTAE Copy ESTAE parameter list
         ESTAE 0,MF=(E,W_ESTAE)    Cancel ESTAE
         MVC   W_ESTAE(L_ESTAE),T_ESTAE Copy ESTAE parameter list
         L     R4,=A(DAFAT)        Abnormal termination CSECT address
         ESTAE (R4),CT,MF=(E,W_ESTAE)
         LTR   R15,R15             OK ?
         BZ    ESTAEOK2            . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(11),=CL011'ESTAE/DAFAT' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESTAEOK2 EQU   *
*
**       Open DAFLOG
*
         DEVTYPE =CL008'DAFLOG',W_WRK Check for DD
         LTR   R15,R15             DD present ?
         BZ    INITLODD            . Yes, continue
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         $MSG  W_WTOMSG,DAF552T+1  Move message template
         MVC   W_WTOMSG+16(8),=CL008'DAFLOG' Move DDNAME into message
         WTO   MF=(E,W_WTO)        Issue WTO
         MVC   W_RC,=F'20'         Return code 20
         B     DAFINIT0            Exit
INITLODD EQU   *                   DAFOUT is open
         MVC   DAFLOG(L_DAFLOG),T_DAFLOG Copy DAFLOG DCB template
         MVC   W_OPENO(L_OPENO),T_OPENO Copy open parameter list
         OPEN  DAFLOG,MF=(E,W_OPENO) Open DAFLOG
         TM    DAFLOG+48,X'10'     DAFLOG open ?
         BNZ   INITLGOK            . Yes
         ABEND 801,DUMP            User abend 801 (U0801)
INITLGOK EQU   *                   The file is open
         LA    R15,W_DAFLOG        DAFLOG control
         USING D_PRTCTL,R15        DAFLOG control reference
         LA    R1,P_LOG            Get header address
         ST    R1,D_PRTHDR         Store header address
         ZAP   D_PRTPGE,=P'0'      Initialize page counter
         ZAP   D_PRTLNE,=P'99'     Initialize line counter
         ZAP   D_MAXLPP,=P'55'     Initialize max lines per page
         DROP  R15                 DAFLOG control dereference
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(14),=CL014'Initialization'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
*
**       Check JCL DD Statements
*
         DEVTYPE =CL008'DAFCS',W_WRK  Check for DD
         LTR   R15,R15             DD present ?
         BZ    INITCSDD            . Yes, continue
         $MSG  W_LOG,DAF552T       Move message template
         MVC   W_LOG+17(8),=CL008'DAFCS' Move DDNAME into message
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_RC,=F'20'         Return code 20
INITCSDD EQU   *                   DAFOUT is open
         DEVTYPE =CL008'DAFOUT',W_WRK Check for DD
         LTR   R15,R15             DD present ?
         BZ    INITOUDD            . Yes, continue
         $MSG  W_LOG,DAF552T       Move message template
         MVC   W_LOG+17(8),=CL008'DAFOUT' Move DDNAME into message
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_RC,=F'20'         Return code 20
INITOUDD EQU   *                   DAFOUT is open
         DEVTYPE =CL008'DAFRPT',W_WRK Check for DD
         LTR   R15,R15             DD present ?
         BZ    INITRPDD            . Yes, continue
         $MSG  W_LOG,DAF552T       Move message template
         MVC   W_LOG+17(8),=CL008'DAFRPT' Move DDNAME into message
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_RC,=F'20'         Return code 20
INITRPDD EQU   *                   DAFOUT is open
         DEVTYPE =CL008'DAFSMF',W_WRK Check for DD
         LTR   R15,R15             DD present ?
         BZ    INITSMDD            . Yes, continue
         $MSG  W_LOG,DAF552T       Move message template
         MVC   W_LOG+17(8),=CL008'DAFSMF' Move DDNAME into message
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_RC,=F'20'         Return code 20
INITSMDD EQU   *                   DAFOUT is open
         DEVTYPE =CL008'DAFSNAP',W_WRK Check for DD
         LTR   R15,R15             DD present ?
         BZ    INITSNDD            . Yes, continue
         $MSG  W_LOG,DAF552T       Move message template
         MVC   W_LOG+17(8),=CL008'DAFSNAP' Move DDNAME into message
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_RC,=F'20'         Return code 20
INITSNDD EQU   *                   DAFOUT is open
         DEVTYPE =CL008'DAFSTAT',W_WRK Check for DD
         LTR   R15,R15             DD present ?
         BZ    INITSTDD            . Yes, continue
         $MSG  W_LOG,DAF552T       Move message template
         MVC   W_LOG+17(8),=CL008'DAFSTAT' Move DDNAME into message
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_RC,=F'20'         Return code 20
INITSTDD EQU   *                   DAFOUT is open
         DEVTYPE =CL008'DAFTRACE',W_WRK Check for DD
         LTR   R15,R15             DD present ?
         BZ    INITTRDD            . Yes, continue
         $MSG  W_LOG,DAF552T       Move message template
         MVC   W_LOG+17(8),=CL008'DAFTRACE' Move DDNAME into message
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_RC,=F'20'         Return code 20
INITTRDD EQU   *                   DAFOUT is open
         DEVTYPE =CL008'SORTIN',W_WRK Check for DD
         LTR   R15,R15             DD present ?
         BZ    INITSIDD            . Yes, continue
         $MSG  W_LOG,DAF552T       Move message template
         MVC   W_LOG+17(8),=CL008'SORTIN' Move DDNAME into message
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_RC,=F'20'         Return code 20
INITSIDD EQU   *                   DAFOUT is open
         DEVTYPE =CL008'SORTOUT',W_WRK Check for DD
         LTR   R15,R15             DD present ?
         BZ    INITSODD            . Yes, continue
         $MSG  W_LOG,DAF552T       Move message template
         MVC   W_LOG+17(8),=CL008'SORTOUT' Move DDNAME into message
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_RC,=F'20'         Return code 20
INITSODD EQU   *                   DAFOUT is open
         CLC   W_RC,=F'20'         Return code 20 ?
         BE    DAFINIT0            . Yes, exit
*
**       Open DAFCS
*
         MVC   DAFCS(L_DAFCS),T_DAFCS Copy DAFCS DCB template
         MVC   W_OPENI(L_OPENI),T_OPENI Copy open parameter list
         OPEN  DAFCS,MF=(E,W_OPENI) Open DAFCS
         ST    R15,W_OPEN_RC       Save the return code from OPEN
         $MSG  W_LOG,DAF553I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFCS'  Move DDNAME into message
         $HEX  W_LOG+29,W_OPEN_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         TM    DAFCS+48,X'10'      DAFCS open ?
         BNZ   INITCSOK            . Yes
         ABEND 801,DUMP            User abend 801 (U0801)
INITCSOK EQU   *                   The file is open
         LA    R15,DAFCS           DAFCS
         USING IHADCB,R15          DAFCS DCB reference
         LH    R0,DCBLRECL         DAFCS LRECL
         ST    R0,W_CSLEN          DAFCS LRECL
         DROP  R15                 DAFCS DCB dereference
*
**       Open DAFOUT
*
         MVC   DAFOUT(L_DAFOUT),T_DAFOUT Copy DAFOUT DCB template
         MVC   W_OPENO(L_OPENO),T_OPENO Copy open parameter list
         OPEN  DAFOUT,MF=(E,W_OPENO) Open DAFOUT
         ST    R15,W_OPEN_RC       Save the return code from OPEN
         $MSG  W_LOG,DAF553I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFOUT' Move DDNAME into message
         $HEX  W_LOG+29,W_OPEN_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         TM    DAFOUT+48,X'10'     DAFOUT open ?
         BNZ   INITOUOK            . Yes
         ABEND 801,DUMP            . No - User abend 801 (U0801)
INITOUOK EQU   *                   DAFOUT is open
*
**       Open DAFRPT
*
         MVC   DAFRPT(L_DAFRPT),T_DAFRPT Copy DAFRPT DCB template
         MVC   W_OPENO(L_OPENO),T_OPENO Copy open parameter list
         OPEN  DAFRPT,MF=(E,W_OPENO) Open DAFRPT
         ST    R15,W_OPEN_RC       Save the return code from OPEN
         $MSG  W_LOG,DAF553I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFRPT' Move DDNAME into message
         $HEX  W_LOG+29,W_OPEN_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         TM    DAFRPT+48,X'10'     DAFRPT open ?
         BNZ   INITRPOK            . Yes
         ABEND 801,DUMP            User abend 801 (U0801)
INITRPOK EQU   *                   The file is open
         LA    R15,W_DAFRPT        DAFRPT control
         USING D_PRTCTL,R15        DAFRPT control reference
         LA    R1,P_RPT            Get header address
         ST    R1,D_PRTHDR         Store header address
         ZAP   D_PRTPGE,=P'0'      Initialize page counter
         ZAP   D_PRTLNE,=P'99'     Initialize line counter
         ZAP   D_MAXLPP,=P'55'     Initialize max lines per page
         DROP  R15                 DAFRPT control dereference
*
**       Open DAFSNAP
*
         MVC   DAFSNAP(L_DAFSNAP),T_DAFSNAP Copy DAFSNAP DCB template
         MVC   W_OPENO(L_OPENO),T_OPENO Copy open parameter list
         OPEN  DAFSNAP,MF=(E,W_OPENO) Open DAFSNAP
         ST    R15,W_OPEN_RC       Save the return code from OPEN
         $MSG  W_LOG,DAF553I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFSNAP' Move DDNAME into message
         $HEX  W_LOG+29,W_OPEN_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         TM    DAFSNAP+48,X'10'    DAFSNAP open ?
         BNZ   INITSNOK            . Yes
         ABEND 801,DUMP            User abend 801 (U0801)
INITSNOK EQU   *                   The file is open
*
**       Open DAFSTAT
*
         MVC   DAFSTAT(L_DAFSTAT),T_DAFSTAT Copy DAFSTAT DCB template
         MVC   W_OPENO(L_OPENO),T_OPENO Copy open parameter list
         OPEN  DAFSTAT,MF=(E,W_OPENO) Open DAFSTAT
         ST    R15,W_OPEN_RC       Save the return code from OPEN
         $MSG  W_LOG,DAF553I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFSTAT' Move DDNAME into message
         $HEX  W_LOG+29,W_OPEN_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         TM    DAFSTAT+48,X'10'    DAFSTAT open ?
         BNZ   INITSTOK            . Yes
         ABEND 801,DUMP            User abend 801 (U0801)
INITSTOK EQU   *                   The file is open
         LA    R15,W_DAFSTAT       DAFSTAT control
         USING D_PRTCTL,R15        DAFSTAT control reference
         LA    R1,P_STAT           Get header address
         ST    R1,D_PRTHDR         Store header address
         ZAP   D_PRTPGE,=P'0'      Initialize page counter
         ZAP   D_PRTLNE,=P'999'    Initialize line counter
         ZAP   D_MAXLPP,=P'500'    Initialize max lines per page
         DROP  R15                 DAFSTAT control dereference
*
**       Open DAFTRACE
*
         MVC   DAFTRACE(L_DAFTRACE),T_DAFTRACE Copy DAFTRACE DCB templ
         MVC   W_OPENO(L_OPENO),T_OPENO Copy open parameter list
         OPEN  DAFTRACE,MF=(E,W_OPENO) Open DAFTRACE
         ST    R15,W_OPEN_RC       Save the return code from OPEN
         $MSG  W_LOG,DAF553I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFTRACE' Move DDNAME into message
         $HEX  W_LOG+29,W_OPEN_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         TM    DAFTRACE+48,X'10'   DAFTRACE open ?
         BNZ   INITTROK            . Yes
         ABEND 801,DUMP            User abend 801 (U0801)
INITTROK EQU   *                   The file is open
*
**       Display Obtain DAFDWA Storage Message
*
         XC    W_STG_RC,W_STG_RC   DAFDWA return code
         ST    R10,W_STG_ADDR      DAFDWA storage address
         MVC   W_STG_LENGTH,=A(DAFDWA#) DAFDWA storage length
         $MSG  W_LOG,DAF550I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(06),=CL006'DAFDWA'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
*
**       Obtain ARL Storage
*
         MVC   W_STG_LENGTH,=A(L_ARL) ARL storage length
         STORAGE OBTAIN,LENGTH=L_ARL,BNDRY=PAGE ARL storage
         ST    R1,W_STG_ADDR       Storage address
         ST    R15,W_STG_RC        Storage return code
         LTR   R15,R15             OK ?
         BZ    GMARLOK             . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(11),=CL011'OBTAIN/ARL' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GMARLOK  EQU   *
         $MSG  W_LOG,DAF550I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(04),=CL004'ARL'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_ARL@,W_STG_ADDR   ARL storage address
*
**       Obtain DAFPT Storage
*
         MVC   W_STG_LENGTH,=A(L_DAFPT) DAFPT storage length
         STORAGE OBTAIN,LENGTH=L_DAFPT,BNDRY=PAGE DAFPT storage
         ST    R1,W_STG_ADDR       Storage address
         ST    R15,W_STG_RC        Storage return code
         LTR   R15,R15             OK ?
         BZ    GMDAFPTOK           . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(12),=CL012'OBTAIN/DAFPT' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GMDAFPTOK EQU  *
         $MSG  W_LOG,DAF550I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(05),=CL005'DAFPT'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_DAFPT@,W_STG_ADDR DAFPT storage address
*
**       Obtain JFCB Storage
*
         MVC   W_STG_LENGTH,=A(L_JFCB) JFCB storage length
         STORAGE OBTAIN,LENGTH=L_JFCB,BNDRY=PAGE JFCB storage
         ST    R1,W_STG_ADDR       Storage address
         ST    R15,W_STG_RC        Storage return code
         LTR   R15,R15             OK ?
         BZ    GMJFCBOK            . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(11),=CL011'OBTAIN/JFCB' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GMJFCBOK EQU   *
         $MSG  W_LOG,DAF550I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(04),=CL004'JFCB'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_JFCB@,W_STG_ADDR  JFCB storage address
*
**       Obtain Keyword Table Storage
*
         MVC   W_STG_LENGTH,=A(L_TBLKWD) Keyword table length
         STORAGE OBTAIN,LENGTH=L_TBLKWD,BNDRY=PAGE Obtain Keyword table
         ST    R1,W_STG_ADDR       Storage address
         ST    R15,W_STG_RC        Storage return code
         LTR   R15,R15             OK ?
         BZ    GMKWDOK             . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(15),=CL015'OBTAIN/TBLKWD' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GMKWDOK  EQU   *
         $MSG  W_LOG,DAF550I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(13),=CL013'Keyword_Table'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_TBLKWD,W_STG_ADDR Dynamic keyword table address
         L     R0,W_TBLKWD         Dynamic keyword table address
         L     R1,=A(L_TBLKWD)     Keyword table length
         L     R14,=A(TBLKWD)      Static keyword table address
         LR    R15,R1              Keyword table length
         MVCL  R0,R14              Copy keyword table
*
**       Obtain SMF Table Storage
*
         MVC   W_STG_LENGTH,=A(L_TBLSMF) SMF table length
         STORAGE OBTAIN,LENGTH=L_TBLSMF,BNDRY=PAGE Obtain SMF table
         ST    R1,W_STG_ADDR       Storage address
         ST    R15,W_STG_RC        Storage return code
         LTR   R15,R15             OK ?
         BZ    GMSMFOK             . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(15),=CL015'OBTAIN/TBLSMF' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GMSMFOK  EQU   *
         $MSG  W_LOG,DAF550I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(09),=CL009'SMF_Table'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_TBLSMF,W_STG_ADDR Dynamic keyword table address
         L     R0,W_TBLSMF         Dynamic SMF table address
         L     R1,=A(L_TBLSMF)     SMF table length
         L     R14,=A(TBLSMF)      Static SMF table address
         LR    R15,R1              SMF table length
         MVCL  R0,R14              Copy SMF table
*
**       Obtain SMF SNAP Storage
*
         MVC   W_STG_LENGTH,=A(L_SMFSNAP) SMF SNAP storage length
         STORAGE OBTAIN,LENGTH=L_SMFSNAP,BNDRY=PAGE SMF SNAP storage
         ST    R1,W_STG_ADDR       Storage address
         ST    R15,W_STG_RC        Storage return code
         LTR   R15,R15             OK ?
         BZ    GMSNAPOK            . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(15),=CL015'OBTAIN/SMFSNAP' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GMSNAPOK EQU   *
         $MSG  W_LOG,DAF550I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(09),=CL009'SMF_SNAP'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_SMFSNAP,W_STG_ADDR SMF SNAP storage address
*
**       Obtain TRT Table Storage
*
         MVC   W_STG_LENGTH,=A(L_TBLTRT) TRT table length
         STORAGE OBTAIN,LENGTH=L_TBLTRT,BNDRY=PAGE Obtain TRT table
         ST    R1,W_STG_ADDR       Storage address
         ST    R15,W_STG_RC        Storage return code
         LTR   R15,R15             OK ?
         BZ    GMTRTOK             . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(15),=CL015'OBTAIN/TBLTRT' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GMTRTOK  EQU   *
         $MSG  W_LOG,DAF550I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(13),=CL013'TRT_Table'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_TBLTRT,W_STG_ADDR TRT table address
*
**       Obtain VSAM Work Area Storage
*
         MVC   W_STG_LENGTH,=F'32768' VSAM Workarea length
         STORAGE OBTAIN,LENGTH=32768,BNDRY=PAGE DAFSMF VSAM workarea
         ST    R1,W_STG_ADDR       Storage address
         ST    R15,W_STG_RC        Storage return code
         LTR   R15,R15             OK ?
         BZ    GMVWAOK             . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(15),=CL015'OBTAIN/VWA' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GMVWAOK  EQU   *
         $MSG  W_LOG,DAF550I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(13),=CL013'VSAM_Workarea'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_VWA@,W_STG_ADDR   VSAM workarea address
         MVC   W_SMFBAS,W_STG_ADDR DAFSMF VSAM workarea address
*
**       Process JCL EXEC PARMs
*
PARMNEXT EQU   *
         LTR   R2,R2               Any more JCL PARM= ?
         BZ    NOJCLPRM            . No, Continue
         CLC   0(1,R3),=C','       Comma ?
         BNE   PARMALL             . No, check criteria trace
         LA    R3,1(R3)            Next parm
         S     R2,=F'1'            Adjust for length
         BP    PARMNEXT            Next parm
         B     PARMDONE            Continue
PARMALL  EQU   *
         CLC   0(8,R3),=C'ALLTRACE'  All traces requested ?
         BNE   PARMCRIT            Yes, check criteria trace
         $MSG  W_LOG,DAF505I       Move message template
         MVC   W_LOG+34(08),=CL008'ALLTRACE' Move PARM Value
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$FLAG,W_F$CRI    Turn on criteria trace flag
         LA    R3,8(R3)            Next parm
         S     R2,=F'8'            Adjust for length
         BP    PARMNEXT            Next parm
         B     PARMDONE            Continue
PARMCRIT EQU   *
         CLC   0(8,R3),=C'CRITRACE'  Criteria trace requested ?
         BNE   PARMONLY            . No, continue
         $MSG  W_LOG,DAF505I       Move message template
         MVC   W_LOG+34(08),=CL008'CRITRACE' Move PARM Value
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$FLAG,W_F$CRI    Turn on criteria trace flag
         LA    R3,8(R3)            Next parm
         S     R2,=F'8'            Adjust for length
         BP    PARMNEXT            Next parm
         B     PARMDONE            Continue
PARMONLY EQU   *
         CLC   0(7,R3),=C'RDSONLY' Criteria trace requested ?
         BNE   PARMALSO            . No, continue
         $MSG  W_LOG,DAF505I       Move message template
         MVC   W_LOG+34(07),=CL007'RDSONLY' Move PARM Value
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$FLAG,W_F$CRI    Turn on criteria trace flag
         LA    R3,7(R3)            Next parm
         S     R2,=F'7'            Adjust for length
         BP    PARMNEXT            Next parm
         B     PARMDONE            Continue
PARMALSO EQU   *
         CLC   0(7,R3),=C'RDSALSO' Criteria trace requested ?
         BNE   PARMNEXT            . No, continue
         $MSG  W_LOG,DAF505I       Move message template
         MVC   W_LOG+34(07),=CL007'RDSALSO' Move PARM Value
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$FLAG,W_F$CRI    Turn on criteria trace flag
         LA    R3,7(R3)            Next parm
         S     R2,=F'7'            Adjust for length
         BP    PARMNEXT            Next parm
         B     PARMDONE            Continue
PARMDONE EQU   *
NOJCLPRM EQU   *
         CALL  DAFDSI              Display System Information
DAFINIT  $EXIT                     Exit
         TITLE 'DAFIP4 - IP V4 Address'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - IP binary address     (R2)             *
*                  . 04(R1) - IP character address  (R3)             *
*  Notes:          Exit if IP binary address zero                    *
*                  Exit if IP character address zero                 *
**********************************************************************
DAFIP4   $ENTRY AMODE=31,RMODE=24  Entry
         L     R2,0(R1)            IP binary address
         LTR   R2,R2               IP binary address zero ?
         BNP   DAFIP40             . Yes, Done
         L     R3,4(R1)            IP character address
         LTR   R3,R3               IP character address zero ?
         BNP   DAFIP40             . Yes, Done
         $FILL W_DAFIP4,C' '       Blank IP address
         XR    R15,R15             Clear
         IC    R15,0(R2)           1st octet
         CVD   R15,W_DBL
         MVC   W_MASK04,=XL4'40202120'
         EDMK  W_MASK04,W_DBL+6
         MVC   W_DAFIP4+00(3),W_MASK04+1
         MVI   W_DAFIP4+03,C'.'
         XR    R15,R15             Clear
         IC    R15,1(R2)           2nd octet
         CVD   R15,W_DBL
         MVC   W_MASK04,=XL4'40202120'
         EDMK  W_MASK04,W_DBL+6
         MVC   W_DAFIP4+04(3),W_MASK04+1
         MVI   W_DAFIP4+07,C'.'
         XR    R15,R15             Clear
         IC    R15,2(R2)           3rd octet
         CVD   R15,W_DBL
         MVC   W_MASK04,=XL4'40202120'
         EDMK  W_MASK04,W_DBL+6
         MVC   W_DAFIP4+08(3),W_MASK04+1
         MVI   W_DAFIP4+11,C'.'
         XR    R15,R15             Clear
         IC    R15,3(R2)           4th octet
         CVD   R15,W_DBL
         MVC   W_MASK04,=XL4'40202120'
         EDMK  W_MASK04,W_DBL+6
         MVC   W_DAFIP4+12(3),W_MASK04+1
         $STRIP W_DAFIP4,C' '      Strip blanks
         MVC   0(15,R3),W_DAFIP4   Copy
DAFIP4   $EXIT                     Exit
         TITLE 'DAFIP6 - IP V6 Address'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - IP binary address     (R2)             *
*                  . 04(R1) - IP character address  (R3)             *
*  Notes:          Exit if IP binary address zero                    *
*                  Exit if IP character address zero                 *
**********************************************************************
DAFIP6   $ENTRY AMODE=31,RMODE=24  Entry
         L     R2,0(R1)            IP binary address
         LTR   R2,R2               IP binary address zero ?
         BNP   DAFIP60             . Yes, Done
         L     R3,4(R1)            IP character address
         LTR   R3,R3               IP character address zero ?
         BNP   DAFIP60             . Yes, Done
         $FILL W_DAFIP6,C' '       Blank IP address
         XR    R15,R15             Clear  IP address
         ICM   R15,B'0011',00(R2)  Insert IP address
         STH   R15,W_HALF1         Store  IP address
         $HEX  W_DAFIP6+00,W_HALF1,LEN=2
         MVI   W_DAFIP6+04,C':'
         XR    R15,R15             Clear  IP address
         ICM   R15,B'0011',02(R2)  Insert IP address
         STH   R15,W_HALF1         Store  IP address
         $HEX  W_DAFIP6+05,W_HALF1,LEN=2
         MVI   W_DAFIP6+09,C':'
         XR    R15,R15             Clear  IP address
         ICM   R15,B'0011',04(R2)  Insert IP address
         STH   R15,W_HALF1         Store  IP address
         $HEX  W_DAFIP6+10,W_HALF1,LEN=2
         MVI   W_DAFIP6+14,C':'
         XR    R15,R15             Clear  IP address
         ICM   R15,B'0011',06(R2)  Insert IP address
         STH   R15,W_HALF1         Store  IP address
         $HEX  W_DAFIP6+15,W_HALF1,LEN=2
         MVI   W_DAFIP6+19,C':'
         XR    R15,R15             Clear  IP address
         ICM   R15,B'0011',08(R2)  Insert IP address
         STH   R15,W_HALF1         Store  IP address
         $HEX  W_DAFIP6+20,W_HALF1,LEN=2
         MVI   W_DAFIP6+24,C':'
         XR    R15,R15             Clear  IP address
         ICM   R15,B'0011',10(R2)  Insert IP address
         STH   R15,W_HALF1         Store  IP address
         $HEX  W_DAFIP6+25,W_HALF1,LEN=2
         MVI   W_DAFIP6+29,C':'
         XR    R15,R15             Clear  IP address
         ICM   R15,B'0011',12(R2)  Insert IP address
         STH   R15,W_HALF1         Store  IP address
         $HEX  W_DAFIP6+30,W_HALF1,LEN=2
         MVI   W_DAFIP6+34,C':'
         XR    R15,R15             Clear  IP address
         ICM   R15,B'0011',14(R2)  Insert IP address
         STH   R15,W_HALF1         Store  IP address
         $HEX  W_DAFIP6+35,W_HALF1,LEN=2
         MVC   0(15,R3),W_DAFIP6   Copy
DAFIP6   $EXIT                     Exit
         TITLE 'DAFIT - Invalid Triplet'
**********************************************************************
* Description: Gets called by the individual SMF record extraction   *
*              routines when they detect that a triplet is invalid   *
* Input:       None                                                  *
* Output:      None                                                  *
* Logic:       Increment invalid SMF record type counter             *
*              Increment invalid SMF sub type counter, if sub type   *
*              Increment invalid SMF total counter                   *
*              Issue DAF612I message                                 *
*              SNAP the SMF record, if SNAP limit not exceeded       *
**********************************************************************
DAFIT    $ENTRY AMODE=31,RMODE=24  Entry
         L     R1,W_SMFRTY         Set record type SMF table base
         USING D_TBLSMF,R1         SMF table reference
         $INCR D_SMFINV,F          Increment invalid individual counter
         DROP  R1                  SMF table dereference
         CLC   W_SMFSTY,=F'0'      Sub type ?
         BE    ITNOSUB             . No
         L     R1,W_SMFSTY         Set sub type SMF table base
         USING D_TBLSMF,R1         SMF table reference
         $INCR D_SMFINV,F          Increment invalid individual counter
         DROP  R1                  SMF table dereference
ITNOSUB  EQU   *
         $INCR W_INVTOT            Increment invalid total counter
         $MSG  W_LOG,DAF612I       Move message template
         MVC   W_LOG+09(L'W_RECTYP),W_RECTYP Record Type
         MVC   W_LOG+13(L'W_SUBTYP),W_SUBTYP Subtype
         MVC   W_LOG+17(L'W_DATE),W_DATE Record Date
         MVC   W_LOG+25(L'W_TIME),W_TIME Record Time
         MVC   W_CS,W_LOG          Populate SNAP header
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         L     R1,W_SMFRTY         Set record type SMF table base
         USING D_TBLSMF,R1         SMF table reference
         CLC   =F'&SNAPLIMIT',D_SMFINV SNAP limit reached ?
         BL    ITNOSNAP            . Yes, skip the SNAP
         DROP  R1                  SMF table dereference
         CALL  SMFSNAP             SNAP current SMF record
ITNOSNAP EQU   *
         B     DAFIT0              Exit
DAFIT    $EXIT                     Exit
         TITLE 'DAFLPA - LPALST'
DAFLPA   $ENTRY AMODE=31,RMODE=24  Entry
         L     R15,CVTPTR          CVT address
         USING CVT,R15             CVT reference
         L     R15,CVTSMEXT        VSE address
         DROP  R15                 CVT dereference
         USING CVTVSTGX,R15        VSE reference
         L     R15,CVTEPLPS        LPAT address
         DROP  R15                 VSE dereference
         USING LPAT,R15            LPAT reference
         LA    R4,LPATNTRY         Beginning address
         L     R5,LPATCNT          Dataset count
         DROP  R15                 LPAT dereference
         XC    W_LSTNUM,W_LSTNUM   Clear dataset number
         MVC   W_LSTLOC,=CL10'LPALST+000'
         $FILL W_SORT,C' '         Blank sort record
         $FILL W_CRIT,C' '         Blank criteria area
         LA    R15,W_SRTCMT        Initialize comment address
         ST    R15,W_CMT@          Initialize comment address
INITLPAN EQU   *
         L     R15,W_LSTNUM        Insert dataset number
         CVD   R15,DOUBLE          Convert dataset number
         OI    DOUBLE+7,X'0F'      Force sign
         UNPK  W_LSTLOC+7(3),DOUBLE+6(2) Unpack dataset number
         MVC   W_DSN1,1(R4)        Dataset 1
         MVC   W_JOB1,=CL008'LPALST' Job name
         MVC   W_USER,=CL008'LPALST' User identification
         LOCATE W_LOCATE           Locate the dataset
         CALL  DAFCC               Check criteria
GDSNLPAI EQU   *
         LA    R4,L'LPATNTRY(R4)   Next entry
         $INCR W_LSTNUM            Dataset number
         BCT   R5,INITLPAN         Process next dataset, if any
DAFLPA   $EXIT                     Exit
         TITLE 'DAFMB - Move Binary'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - Label address  (R2)                    *
*                  . 04(R1) - Binary address (R3)                    *
*                  . 08(R1) - Binary length  (R4)                    *
*  Notes:          Exit if the binary value is zero.                 *
**********************************************************************
DAFMB    $ENTRY AMODE=31,RMODE=24  Entry
         L     R2,0(R1)            Label address
         L     R3,4(R1)            Binary address
         LTR   R3,R3               Binary address zero ?
         BNP   DAFMB0              Yes, Done
         L     R4,8(R1)            Binary length
         LTR   R4,R4               Binary length zero ?
         BNP   DAFMB0              Yes, Done
         XC    W_DAFMB4,W_DAFMB4   Zero temp fullword
         LA    R5,W_DAFMB4         Temp fullword address
         AH    R5,=H'4'            Point to end of temp fullword
         SR    R5,R4               Adjust for length
         $VLM  (R5),(R3),(R4)      Move binary value
         L     R3,W_DAFMB4         Store binary value
         LTR   R3,R3               Binary value zero ?
         BNP   DAFMB0              Yes, Done
         MVC   W_TXTLBL,0(R2)
         CVD   R3,W_DBL
         MVC   W_BINEDT,P_BINMSK
         EDMK  W_BINEDT,W_DBL
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,W_BINEDT,16), Move                            X
               MF=(E,W_WRK)
DAFMB    $EXIT                     Exit
         TITLE 'DAFMC - Move Comment'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - Label address (R3)                     *
*                  . 04(R1) - Field address (R4)                     *
*                  . 08(R1) - Field length  (R5)                     *
*  Notes:          If input field leading null - exit.               *
*                  If input field completely blank - exit.           *
*                  Will stop moving characters if max length or      *
*                  trailing blank is encountered.                    *
*                  Will skip label if equal to CL004'NONE'.          *
**********************************************************************
DAFMC    $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,0(R1)            Input label address
         L     R4,4(R1)            Input field address
         CLI   0(R4),X'00'         Input field leading null ?
         BE    DAFMC0              Yes, get out
         L     R5,8(R1)            Input field max length
         LR    R15,R5              Input field max length
         $VLC  (R4),P_BLANKS,(R15) Input field completely blank ?
         BE    DAFMC0              Yes, get out
         XR    R7,R7               Clear counter
         $FILL W_SAVCM1,C' '       Blank temp comment
         LA    R2,W_SAVCM1         Temp comment address
         LA    R6,15               Maximum label length
         CLC   0(4,R3),=C'NONE'    Bypass label ?
         BE    MCFSLB              Yes, skip it
MCLSLB   CLC   0(1,R3),=C' '       Leading label blanks?
         BNE   MCLNXT              No, move it
         LA    R3,1(,R3)           Next input byte
         B     MCLSLB              Another label byte ?
MCLNXT   MVC   0(1,R2),0(R3)       Move one label byte
         CLC   0(1,R3),=C' '       Trailing label blank ?
         BE    MCLEXIT             Yes, Done
         CLC   0(1,R3),=C'='       Trailing label equal sign ?
         BE    MCLEXIT             Yes, Done
         LA    R3,1(,R3)           Next input byte
         LA    R2,1(,R2)           Next output byte
         LA    R7,1(,R7)           Increment counter
         BCT   R6,MCLNXT           Another label byte ?
MCLEXIT  LA    R2,1(,R2)           Next output byte
         LA    R7,1(,R7)           Increment counter
MCFSLB   CLC   0(1,R4),=C' '       Leading field blank ?
         BNE   MCFNXT              No, move it
         LA    R4,1(,R4)           Next input byte
         BCTR  R5,0                Decrement max length
         B     MCFSLB              Another field byte ?
MCFNXT   MVC   0(1,R2),0(R4)       Move one field byte
         CLC   0(1,R4),=C' '       Trailing field blank ?
         BE    MCFEXIT             Yes, Done
         LA    R4,1(,R4)           Next input byte
         LA    R2,1(,R2)           Next output byte
         LA    R7,1(,R7)           Increment counter
         BCT   R5,MCFNXT           Another field byte ?
MCFEXIT  EQU   *
         LA    R2,1(,R2)           Next output byte
         LA    R7,1(,R7)           Increment counter
         CLI   W_FMTMC,C'N'        Format MC  - No
         BE    MCMOVE              . Yes, skip formatting
         L     R6,W_CMT@           Comment address
         LA    R2,W_SRTCMT         Comment starting address
         SR    R6,R2               Comment length
         LR    R2,R6               Comment length
         AR    R2,R7               Determine new comment length
         C     R6,=F'80'           Comment line 1 ?
         BH    MCC2L               . No, check comment line 2
         C     R2,=F'80'           Too big for comment line 1 ?
         BNH   MCMOVE              . Move it
         LA    R15,W_SRTCM2        Bump it up to comment line 2
         ST    R15,W_CMT@          Save new comment address
         B     MCMOVE              Move it
MCC2L    C     R6,=F'160'          Comment line 2 ?
         BH    MCC3L               . No, check comment line 3
         C     R2,=F'160'          Too big for comment line 2 ?
         BNH   MCMOVE              . Move it
         LA    R15,W_SRTCM3        Bump it up to comment line 3
         ST    R15,W_CMT@          Save new comment address
         B     MCMOVE              Move it
MCC3L    C     R6,=F'240'          Comment line 3 ?
         BH    MCC4L               . No, check comment line 4
         C     R2,=F'240'          Too big for comment line 3 ?
         BNH   MCMOVE              . Move it
         LA    R15,W_SRTCM4        Bump it up to comment line 4
         ST    R15,W_CMT@          Save new comment address
         B     MCMOVE              Move it
MCC4L    C     R6,=F'320'          Comment line 4 ?
         BH    MCC5L               . No, check comment line 5
         C     R2,=F'320'          Too big for comment line 4 ?
         BNH   MCMOVE              . Move it
         LA    R15,W_SRTCM5        Bump it up to comment line 5
         ST    R15,W_CMT@          Save new comment address
         B     MCMOVE              Move it
MCC5L    C     R6,=F'400'          Comment line 5 ?
         BH    DAFMC4              . No, get out RC=04
         C     R2,=F'400'          Too big for comment line 5 ?
         BNH   MCMOVE              . Move it
         B     DAFMC4              Comment too long - Get out RC=04
MCMOVE   L     R6,W_CMT@           Comment address
         BCTR  R7,0                Move length - 1
         LR    R1,R7               Move length - 1
         $VLM  (R6),W_SAVCM1,(R1)  Move it
         AR    R6,R7               New address
         CLI   W_FMTMC,C'N'        Format MC  - No
         BE    MCMOVE1             . Yes, skip formatting
         LA    R6,1(,R6)           Incr
MCMOVE1  EQU   *
         ST    R6,W_CMT@           Save
DAFMC    $EXIT                     Exit
         TITLE 'DAFMD - Move Date'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - Label address  (R2)                    *
*                  . 04(R1) - Date  address  (R3)                    *
*  Notes:          Exit if the label address is zero.                *
*                  Exit if the date  address is zero.                *
**********************************************************************
DAFMD    $ENTRY AMODE=31,RMODE=24  Entry
         L     R2,0(R1)            Label address
         LTR   R2,R2               Label address zero ?
         BNP   DAFMD0              . Yes, exit
         L     R3,4(R1)            Date address
         LTR   R3,R3               Date address zero ?
         BNP   DAFMD0              . Yes, exit
         CALL  DAFCD,              Convert Date                        X
               ((R3),W_DATET),                                         X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Date                           X
               ((R2),W_DATET,7),                                       X
               MF=(E,W_WRK)
DAFMD    $EXIT                     Exit
         TITLE 'DAFMT - Move Time'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - Label address  (R2)                    *
*                  . 04(R1) - Time  address  (R3)                    *
*  Notes:          Exit if the label address is zero.                *
*                  Exit if the time  address is zero.                *
**********************************************************************
DAFMT    $ENTRY AMODE=31,RMODE=24  Entry
         L     R2,0(R1)            Label address
         LTR   R2,R2               Label address zero ?
         BNP   DAFMT0              . Yes, exit
         L     R3,4(R1)            Time address
         LTR   R3,R3               Time address zero ?
         BNP   DAFMT0              . Yes, exit
         CALL  DAFCT,              Convert Time                        X
               ((R3),W_TIMET),                                         X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Time                           X
               ((R2),W_TIMET,11),                                      X
               MF=(E,W_WRK)
DAFMT    $EXIT                     Exit
         TITLE 'DAFPC - Process Compare Table'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - Compare Table Address (R3)             *
*                  . 04(R1) - Comparator Address    (R4)             *
*  Output:         R15 -  00 - Comparator found                      *
*                  R15 -  04 - Comparator not found                  *
*  Notes:          Move compare table label to W_TXTLBL ending in =  *
*                  Compare values                                    *
*                  If equal:  Mov_cmt(label=text), RC=00             *
*                  If not:    Mov_cmt(label=Unknown), RC=04          *
*                  If text = reserved then get out                   *
**********************************************************************
DAFPC    $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,0(R1)            Compare table address
         L     R4,4(R1)            Comparator address
         L     R5,0(R3)            Compare length
         LA    R3,4(,R3)           Entries
         L     R6,0(,R3)           Entries
         LA    R3,4(,R3)           Input label address
         LA    R2,W_TXTLBL         Output label address
         $FILL W_TXTLBL,C' '       Blank label
         $FILL W_DAFPC,C' '        Blank work
PCLNXT   MVC   0(1,R2),0(R3)       Move one label byte
         CLC   0(1,R3),=C'='       Trailing label equal sign ?
         BE    PCLEXIT             Yes, Done
         LA    R3,1(,R3)           Next input label address
         LA    R2,1(,R2)           Next output label address
         B     PCLNXT              Get next input label byte
PCLEXIT  EQU   *
*CLEXIT  LR    R15,R5              Compare length
         LA    R3,1(,R3)           Next input label address
PCNEXT   $VLC  (R3),(R4),(R5)      CHAR match ?
         BNE   PCINCR
         LR    R7,R3               Entry address
         AR    R7,R5               Text address
         CLC   0(8,R7),=C'Reserved' Reserved value ?
         BE    DAFPC0              Yes, get out
         MVC   W_DAFPC,0(R7)       Save text value
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R7),41),                                     X
               MF=(E,W_WRK)
         B     DAFPC0              Get out
PCINCR   LA    R3,66(,R3)          Next CHAR table entry
         BCT   R6,PCNEXT           Another one ?
         CLC   W_TXTLBL(6),=C'MAJOR=' Major enqueue ?
         BE    DAFPC4              Indicate comparator not found
         $FILL W_CHAR16,C' '       Blank work area
         MVC   W_CHAR16(8),=C'Unknown(' Move prefix
         LR    R15,R5              Compare length
         $VLM  W_CHAR16+8,(R4),(R15)  Move comparator
         LA    R15,W_CHAR16        Work area address
         LA    R15,8(R15)          Add prefix
         AR    R15,R5              Add comparator length
         MVI   0(R15),C')'         Move suffix
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,W_CHAR16,16),                                 X
               MF=(E,W_WRK)
         $MSG  W_LOG,DAF613I       Move message template
         MVC   W_LOG+09(L'W_RECTYP),W_RECTYP Record Type
         MVC   W_LOG+13(L'W_SUBTYP),W_SUBTYP Subtype
         MVC   W_LOG+17(L'W_DATE),W_DATE Record Date
         MVC   W_LOG+25(L'W_TIME),W_TIME Record Time
         MVC   W_LOG+37(L'W_TXTLBL),W_TXTLBL Text Label
         MVC   W_LOG+54(L'W_CHAR16),W_CHAR16 Unknown data
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
*        CALL  SMFSNAP             SNAP current SMF record
         B     DAFPC4              Indicate comparator not found
DAFPC    $EXIT                     Exit
         TITLE 'DAFPP - Put Print Record'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - Printer Control Address (R3)           *
*                  . 04(R1) - Printer DCB Address     (R4)           *
*                  . 08(R1) - Record Address          (R5)           *
*  Output:         R15 -  00 - Normal                                *
**********************************************************************
DAFPP    $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,0(R1)            Printer Control Table Address
         L     R4,4(R1)            Printer DCB Address
         L     R5,8(R1)            Record Address
         USING D_PRTCTL,R3         Printer control reference
         CP    D_PRTLNE,D_MAXLPP   End of page ?
         BL    PPNOHEAD            No
         ZAP   D_PRTLNE,=P'0'      Reset line counter
         AP    D_PRTPGE,=P'1'      Increment page counter
         $FILL W_TRACE,C' '        Blank header record
         MVI   W_TRACE,C'1'        ANSI carriage control - new page
         MVC   W_TRACE+009(30),=CL030'Dataset Audit Facility (DAF) -'
         MVC   W_TRACE+039(12),=CL012' Level &GVRM'
         MVC   W_TRACE+051(21),=CL021'    Source=&GSRCDAT'
         MVC   W_TRACE+072(19),=CL019', Object=&GOBJDAT'
         MVC   W_TRACE+091(23),=CL023', &SYSTEM_ID'
         MVC   W_TRACE+110(5),=C'Page: ' Page number literal
         MVC   W_TRACE+125(6),=X'402020202120' Page number mask
         ED    W_TRACE+125(6),D_PRTPGE Edit page number
         PUT   (R4),W_TRACE        Write header record
         PUT   (R4),P_BLANKS       Write blank header record
         L     R15,D_PRTHDR        Get header address
         PUT   (R4),(R15)          Write next logical record
         L     R15,D_PRTHDR        Get header address
         CLC   1(4,R15),=C'Date'   Is this DAFRPT ?
         BNE   PPNOHEAD            Continue
         CP    D_PRTPGE,=P'1'      First page ?
         BE    PPNOHEAD            Continue
         CLC   W_LSTDSN,W_DSN1     Is this a continuation ?
         BNE   PPNOHEAD            No, Continue
         $FILL W_TRACE,C' '        Blank header record
         MVC   W_TRACE+01(L'W_DSN1),W_DSN1 Dataset
         MVC   W_TRACE+45(11),=C'(continued)'
         PUT   (R4),W_TRACE        Write next logical record
         $FILL W_TRACE,C' '        Blank header record
PPNOHEAD EQU   *
         AP    D_PRTLNE,=P'1'      Increment line counter
         PUT   (R4),(R5)           Write detail record
         DROP  R3                  Printer control dereference
DAFPP    $EXIT                     Exit
         TITLE 'DAFPS - Process Control Statements'
DAFPS    $ENTRY AMODE=31,RMODE=24  Entry
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(26),=CL026'Process Control Statements'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         XC    W_FLAG,W_FLAG       Turn off flags
         XC    W_F$CS,W_F$CS       Turn off control statement flags
         $FILL W_TYPE,C' '         Blank type
         $MSG  W_LOG,DAF502I       Move message template
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
PSGETCS  $FILL W_CS,C' '           Blank DAFCS record
         $FILL W_CSKWD,C' '        Blank control statement keyword
         $FILL W_CSOP,C' '         Blank control statement operator
         $FILL W_CSVAL,C' '        Blank control statement value
         GET   DAFCS,W_CS+9        Read next logical DAFCS record
         CALL  DAFCSP              Control Statement Parse
         LTR   R15,R15             OK ?
         BNZ   PSGETCS             No - Get next control statement
         L     R3,W_KWD@           Keyword table pointer
         USING D_TBLKWD,R3         Keyword table reference
         L     R4,W_OP@            Operator table pointer
         USING D_TBLOP,R4          Operator table reference
         LA    R5,D_KWDVGA         Get value getmain address
         A     R5,D_OPOFF          Adjust operator offset
         L     R15,0(R5)
         LTR   R15,R15             Any operands yet ?
         BNZ   PSNOGM              Yes, skip getmain
         LH    R0,D_KWDVGL         Value getmain length
         STORAGE OBTAIN,LENGTH=(0),BNDRY=PAGE Obtain operand area
         ST    R1,W_STG_ADDR       Storage address
         ST    R15,W_STG_RC        Storage return code
         LTR   R15,R15             OK ?
         BZ    PSGMVLOK            . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(15),=CL015'OBTAIN/VALUE' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
PSGMVLOK EQU   *
         $MSG  W_LOG,DAF550I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(12),=C'Operand_Area'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   0(4,R5),W_STG_ADDR  Dynamic operand area address
         L     R0,W_STG_ADDR       Receiving field address
         LH    R1,D_KWDVGL         Receiving field length
         XR    R14,R14             Sending field address - none
         XR    R15,R15             Sending field length - none
         ICM   R15,B'1000',=C' '   Pad character
         MVCL  R0,R14              Fill the field
PSNOGM   MVC   W_HALF1,D_KWDKVC    Keyword value count
         $INCR W_HALF1             Increment temporary operand counter
         CLC   W_HALF1,D_KWDOMC    Too many operands ?
         BL    PSMOVCS             No, operand OK
         MVC   W_CS+53(22),=C'<--- Too many keywords'
         $PRINT DAFLOG,W_CS        Put DAFLOG record
         OI    W_F$CS,W_F$KWD      Turn on keyword error flag
         B     PSGETCS             Any more DAFCS records ?
PSMOVCS  LH    R2,D_KWDOML         Maximum operand length
         LA    R2,5(,R2)           Add 5 (2 length, 3 flag)
         LA    R15,D_KWDOVC        Operator value count
         A     R15,D_OPOFF         Adjust with offset
         L     R15,0(R15)
         STH   R15,W_HALF1         Adjust with offset
         MH    R2,W_HALF1          Offset
         LA    R15,D_KWDVGA        Value getmain address
         A     R15,D_OPOFF
         A     R2,0(R15)           Address
         STH   R7,W_HALF1          Save
         MVC   0(1,R2),D_OPLO      Low operand
         MVC   1(1,R2),D_OPEQ      Equal operand
         MVC   2(1,R2),D_OPHI      High operand
         MVC   3(2,R2),W_HALF1     Move operand
         LA    R2,5(,R2)           Point to operand
         L     R1,W_CSVAL@         Control statement value length
         $VLM  (R2),W_CSVAL,(R1)   Move control statement value
         $INCR D_KWDKVC,H          Increment keyword value counter
         LA    R5,D_KWDOVC         Operator value count
         A     R5,D_OPOFF          Adjust with offset
         L     R15,0(R5)
         LA    R15,1(R15)          Increment specific
         ST    R15,0(R5)           Put it back
         MVC   W_CS+63(24),=C'<--- OK                 '
         $PRINT DAFLOG,W_CS        Put DAFLOG record
         TM    W_F$FLAG,W_F$CRI    Criteria Trace ?
         BNO   PSNOTRA1            . No
         $MSG  W_LOG,DAF620I       Move message template
         MVC   W_LOG+13(L'W_CSKWD),W_CSKWD Keyword
         MVC   W_LOG+27(L'W_CSOP),W_CSOP Operator
         MVC   W_LOG+37(L'W_CSVAL),W_CSVAL Value
         MVC   W_LOG+88(4),W_CSVAL@ Value
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
PSNOTRA1 EQU   *
         $INCR W_CSTOT             Increment DAFCS counter
         B     PSGETCS             Any more DAFCS records ?
PSEOD    EQU   *
         TM    W_F$CS,W_F$KWD+W_F$OP+W_F$VAL DAFCS error flag on ?
         BZ    PSNECS              . No
         TM    W_F$CS,W_F$KWD      Keyword error flag on ?
         BNO   PSNEKWD             . No, continue
         $PRINT DAFLOG,P_BLANKS    Put blank DAFLOG record
         $MSG  W_LOG,DAF500I       Move message template
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         L     R3,W_TBLKWD         Set keyword table address
         LA    R15,#_TBLKWD        Keyword table count
         ST    R15,W_KWDTB#        Keyword table count
         $FILL W_LOG,C' '          Blank log record
         MVC   W_LOG+09(07),=C'Keyword' Move keyword literal
         MVC   W_LOG+19(04),=C'Type' Move type literal
         MVC   W_LOG+28(02),=C'ML' Move ML literal
         MVC   W_LOG+32(11),=C'Description' Move description literal
         MVC   W_LOG+59(06),=C'Alias1' Move alias1 literal
         MVC   W_LOG+77(06),=C'Alias2' Move alias2 literal
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         $FILL W_LOG,C' '          Blank log record
         MVC   W_LOG+09(07),=C'=======' Move keyword literal
         MVC   W_LOG+19(04),=C'====' Move type literal
         MVC   W_LOG+28(02),=C'==' Move length literal
         MVC   W_LOG+32(11),=C'===========' Move description literal
         MVC   W_LOG+59(06),=C'======' Move alias1 literal
         MVC   W_LOG+77(06),=C'======' Move alias2 literal
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
PSEKWD   $FILL W_LOG,C' '          Blank log record
         MVC   W_LOG+09(L'D_KWDTXT),D_KWDTXT  Move keyword name
         MVC   W_LOG+19(L'D_KWDTYP),D_KWDTYP  Move keyword type
         LH    R1,D_KWDOML         Load keyword maximum length
         CVD   R1,W_DBL            Convert keyword maximum length
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  W_LOG+28(02),W_DBL+6(2) Unpack keyword maximum length
         MVC   W_LOG+32(L'D_KWDDES),D_KWDDES  Move keyword description
         MVC   W_LOG+59(L'D_KWDAL1),D_KWDAL1  Move keyword alias 1
         MVC   W_LOG+77(L'D_KWDAL2),D_KWDAL2  Move keyword alias 2
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         LA    R3,E_TBLKWD(,R3)    Increment keyword table entry
         L     R1,W_KWDTB#         Keyword table count
         $DECR W_KWDTB#            Keyword table count
         BCT   R1,PSEKWD           Print next keyword table entry
PSNEKWD  TM    W_F$CS,W_F$OP       Operator error flag on ?
         BNO   PSNEOP              . No, continue
         $PRINT DAFLOG,P_BLANKS    Put blank DAFLOG record
         $MSG  W_LOG,DAF501I       Move message template
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         L     R4,=A(TBLOP)        Set operator table address
         LA    R5,#_TBLOP          Operator table count
         $FILL W_LOG,C' '          Blank log record
         MVC   W_LOG+09(08),=C'Operator' Move operator literal
         MVC   W_LOG+23(11),=C'Description' Move description literal
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         $FILL W_LOG,C' '          Blank log record
         MVC   W_LOG+09(08),=C'========' Move operator literal
         MVC   W_LOG+23(11),=C'===========' Move description literal
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
PSEOP    $FILL W_LOG,C' '          Blank log record
         MVC   W_LOG+09(L'D_OPTXT),D_OPTXT  Move operator name
         MVC   W_LOG+23(L'D_OPDES),D_OPDES  Move operator description
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         LA    R4,L_TBLOP(,R4)     Increment operator table entry
         BCT   R5,PSEOP            Print next operator table entry
PSNEOP   EQU   *
         $MSG  W_LOG,DAF712S       Move message template
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_RC,=F'12'         Return Code 12
PSNECS   EQU   *
         CLC   W_CSTOT,=F'0'       Any DAFCS specified ?
         BNE   PSEXIT              . Yes, done
         $MSG  W_LOG,DAF503I       Move message template
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
PSEXIT   EQU   *
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(26),=CL026'Process Control Statements'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         DROP  R3                  Keyword table dereference
         DROP  R4                  Operator table dereference
DAFPS    $EXIT                     Exit
         TITLE 'DAFPT - Process TM Table'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - TM Table Address   (R2)                *
*                  . 04(R1) - Comparator Address (R3)                *
*  Notes:          Move compare table label to W_TXTLBL ending in =  *
*                  Test all eight bits                               *
*                  If on and text ne Reserved, Mov_cmt(label=text)   *
**********************************************************************
DAFPT    $ENTRY AMODE=31,RMODE=24  Entry
         L     R2,0(R1)            TM Table address
         L     R3,4(R1)            Compare address
         L     R5,W_ARL@           DAFSMF ARL address
         USING D_DAFPT,R5          DAFPT reference
         MVC   W_TM,0(R3)          Compare value
         $FILL W_TXTLBL,C' '       Blank label
         $FILL W_DAFPT1,C' '       Blank work 1
         $FILL W_DAFPT2,C' '       Blank work 2
         $FILL W_DAFPT3,C' '       Blank work 3
         $FILL W_DAFPT4,C' '       Blank work 4
         LA    R4,W_TXTLBL         Output label address
PTLNXT   MVC   0(1,R4),0(R2)       Move one label byte
         CLC   0(1,R2),=C'='       Trailing label equal sign ?
         BE    PTLEXIT             Yes, Done
         LA    R2,1(,R2)           Next input label address
         LA    R4,1(,R4)           Next output label address
         B     PTLNXT              Get next input label byte
PTLEXIT  LA    R2,1(,R2)           First entry
         TM    W_TM,W_F$BIT0       Is bit 0 on ?
         BNO   PTBIT1              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT1              Yes, Skip it
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),32),                                     X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB0M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB0M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB0M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB0M4              Yes - use it
PTB0M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB0EXIT            Next bit
PTB0M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB0EXIT            Next bit
PTB0M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB0EXIT            Next bit
PTB0M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB0EXIT            Next bit
PTB0EXIT EQU   *                   Next bit
PTBIT1   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT1       Is bit 1 on ?
         BNO   PTBIT2              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT2              Yes, Skip it
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),32),                                     X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB1M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB1M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB1M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB1M4              Yes - use it
PTB1M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB1EXIT            Next bit
PTB1M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB1EXIT            Next bit
PTB1M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB1EXIT            Next bit
PTB1M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB1EXIT            Next bit
PTB1EXIT EQU   *                   Next bit
PTBIT2   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT2       Is bit 2 on ?
         BNO   PTBIT3              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT3              Yes, Skip it
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),32),                                     X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB2M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB2M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB2M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB2M4              Yes - use it
PTB2M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB2EXIT            Next bit
PTB2M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB2EXIT            Next bit
PTB2M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB2EXIT            Next bit
PTB2M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB2EXIT            Next bit
PTB2EXIT EQU   *                   Next bit
PTBIT3   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT3       Is bit 3 on ?
         BNO   PTBIT4              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT4              Yes, Skip it
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),32),                                     X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB3M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB3M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB3M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB3M4              Yes - use it
PTB3M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB3EXIT            Next bit
PTB3M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB3EXIT            Next bit
PTB3M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB3EXIT            Next bit
PTB3M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB3EXIT            Next bit
PTB3EXIT EQU   *                   Next bit
PTBIT4   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT4       Is bit 4 on ?
         BNO   PTBIT5              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT5              Yes, Skip it
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),32),                                     X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB4M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB4M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB4M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB4M4              Yes - use it
PTB4M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB4EXIT            Next bit
PTB4M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB4EXIT            Next bit
PTB4M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB4EXIT            Next bit
PTB4M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB4EXIT            Next bit
PTB4EXIT EQU   *                   Next bit
PTBIT5   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT5       Is bit 5 on ?
         BNO   PTBIT6              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT6              Yes, Skip it
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),32),                                     X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB5M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB5M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB5M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB5M4              Yes - use it
PTB5M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB5EXIT            Next bit
PTB5M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB5EXIT            Next bit
PTB5M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB5EXIT            Next bit
PTB5M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB5EXIT            Next bit
PTB5EXIT EQU   *                   Next bit
PTBIT6   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT6       Is bit 6 on ?
         BNO   PTBIT7              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT7              Yes, Skip it
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),32),                                     X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB6M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB6M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB6M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB6M4              Yes - use it
PTB6M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB6EXIT            Next bit
PTB6M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB6EXIT            Next bit
PTB6M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB6EXIT            Next bit
PTB6M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB6EXIT            Next bit
PTB6EXIT EQU   *                   Next bit
PTBIT7   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT7       Is bit 7 on ?
         BNO   DAFPT0              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    DAFPT0              Yes, Skip it
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),32),                                     X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB7M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB7M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB7M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB7M4              Yes - use it
PTB7M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB7EXIT            Next bit
PTB7M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB7EXIT            Next bit
PTB7M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB7EXIT            Next bit
PTB7M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB7EXIT            Next bit
PTB7EXIT EQU   *                   Next bit
         DROP  R5                  DAFPT dereference
DAFPT    $EXIT                     Exit
         TITLE 'DAFPV - Process Volumes'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - Volume serial count address (R2)       *
*                  . 04(R1) - Volume serial count length  (R3)       *
*                  . 08(R1) - Volume serial address       (R4)       *
*                  . 12(R1) - Volume serial offset        (R5)       *
*                  . 16(R1) - Volume serial length        (R6)       *
*  Notes:          Handles up to ten volume serials                  *
**********************************************************************
DAFPV    $ENTRY AMODE=31,RMODE=24  Entry
         L     R2,00(R1)           Volume serial count address
         LTR   R2,R2               Volume serial count address zero ?
         BNP   DAFPV0              Yes, get out
         L     R3,04(R1)           Volume serial count length
         LTR   R3,R3               Volume serial count length zero ?
         BNP   DAFPV0              Yes, get out
         L     R4,08(R1)           Volume serial address
         LTR   R4,R4               Volume serial address zero ?
         BNP   DAFPV0              Yes, get out
         L     R5,12(R1)           Volume serial offset
         L     R6,16(R1)           Volume serial length
         XC    W_DAFPV4,W_DAFPV4   Zero temp fullword
         LA    R7,W_DAFPV4         Temp fullword address
         AH    R7,=H'4'            Point to end of temp fullword
         SR    R7,R3               Adjust for count length
         $VLM  (R7),(R2),(R3)      Move volume serial count
         L     R3,W_DAFPV4         Store volume serial count
         LTR   R3,R3               Volume serial count zero ?
         BNP   DAFPV0              Yes, Done
         LA    R8,W_VOL1           Volume serial criteria address
         AR    R4,R5               Apply volume serial offset
         XR    R9,R9               Zero unique volume serials
PVNEXT   EQU   *
         LA    R15,10              Original volume serial count
         LA    R1,W_VOL1           Volume serial criteria address
DAFPVCHK EQU   *
         CLC   0(6,R4),0(R1)       Duplicate volume serial ?
         BE    DAFPVINC            Yes, skip it
         LA    R1,6(,R1)           Increment Volume serial criteria add
         BCT   R15,DAFPVCHK         Any more ?
         L     R15,=A(TBLDSN)      Set DSN table base
         USING TBLDSN,R15          DSN table reference
         TRT   0(6,R4),TBLDSN      Valid volume serial ?
         BNZ   DAFPV0              . No - exit - valid dataset name
         DROP  R15                 DSN table dereference
         CLC   0(6,R4),=CL006' '   Blank volume serial ?
         BE    DAFPV0              Yes, get out
         C     R9,=F'10'           More than 10 unique volume serials ?
         BNH   DAFPVCOK            No, continue
         $MSG  W_LOG,DAF540I       Move message template
         MVC   W_LOG+23(L'W_RECTYP),W_RECTYP Record Type
         MVC   W_LOG+27(L'W_DATE),W_DATE Record Date
         MVC   W_LOG+35(L'W_TIME),W_TIME Record Time
         MVC   W_LOG+51(L'W_DSN1),W_DSN1 Dataset
         $HEX  W_LOG+19,W_DAFPV4,LEN=3 Volume serial count
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAFPV0              Get out
DAFPVCOK EQU   *
         LA    R9,1(,R9)           Increment unique volume serials
         CALL  DAFMC,              Move Comment                        X
               (=C'VOL=',(R4),6), Volume serial                        X
               MF=(E,W_WRK)
         MVC   0(6,R8),0(R4)       Move volume serial criteria
         LA    R8,6(R8)            Next volume serial criteria address
DAFPVINC EQU   *
         AR    R4,R6               Next entry
         BCT   R3,PVNEXT           Any more ?
DAFPV    $EXIT                     Exit
         TITLE 'DAFRECFM - Convert RECFM bitmask to RECFM character'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - RECFM bitmask address   (R3)           *
*                  . 04(R1) - RECFM character address (R4)           *
**********************************************************************
DAFRECFM $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,0(R1)            RECFM bitmask address
         L     R4,4(R1)            RECFM character address
         MVC   0(5,R4),=CL005' '   Blank RECFM character
DAFRECFMU EQU  *
         TM    0(R3),DS1RECFU      Undefined ?
         BNO   DAFRECFMF           . No, check fixed
         MVC   0(1,R4),=CL001'U'   . Yes
         LA    R4,1(R4)            Next character
         B     DAFRECFMB           Check blocked
DAFRECFMF EQU  *
         TM    0(R3),DS1RECFF      Fixed ?
         BNO   DAFRECFMV           . No, check variable
         MVC   0(1,R4),=CL001'F'   . Yes
         LA    R4,1(R4)            Next character
         B     DAFRECFMB           Check blocked
DAFRECFMV EQU  *
         TM    0(R3),DS1RECFV      Variable ?
         BNO   DAFRECFMB           . No, check blocked
         MVC   0(1,R4),=CL001'V'   . Yes
         LA    R4,1(R4)            Next character
         B     DAFRECFMB           Check blocked
DAFRECFMB EQU  *
         TM    0(R3),DS1RECFB      Blocked ?
         BNO   DAFRECFMS           . No, check spanned
         MVC   0(1,R4),=CL001'B'   . Yes
         LA    R4,1(R4)            Next character
         B     DAFRECFMS           Check spanned
DAFRECFMS EQU  *
         TM    0(R3),DS1RECFS      Spanned ?
         BNO   DAFRECFMT           . No, check track overflow
         MVC   0(1,R4),=CL001'S'   . Yes
         LA    R4,1(R4)            Next character
         B     DAFRECFMT           Check track overflow
DAFRECFMT EQU  *
         TM    0(R3),DS1RECFT      Track overflow ?
         BNO   DAFRECFMA           . No, check ANSI control
         MVC   0(1,R4),=CL001'T'   . Yes
         LA    R4,1(R4)            Next character
         B     DAFRECFMA           Check ANSI control
DAFRECFMA EQU  *
         TM    0(R3),DS1RECFA      ANSI control ?
         BNO   DAFRECFMM           . No, check machine control
         MVC   0(1,R4),=CL001'A'   . Yes
         LA    R4,1(R4)            Next character
         B     DAFRECFMM           Check machine control
DAFRECFMM EQU  *
         TM    0(R3),DS1RECMC      Machine control ?
         BNO   DAFRECFMX           . No, exit
         MVC   0(1,R4),=CL001'M'   . Yes
         B     DAFRECFMX           Exit
DAFRECFM $EXIT                     Exit
         TITLE 'DAFRM - Reslove Mask'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - OP address (R3)                        *
*                  . 04(R1) - CS address (R4)                        *
*                  . 08(R1) - Length  (R5)                           *
*  Notes:          If input field leading null - exit.               *
**********************************************************************
DAFRM    $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,0(R1)            Original value 1 address
         L     R4,4(R1)            Original value 2 address
         L     R5,8(R1)            Maximum length
         LH    R5,0(R5)            Maximum length
         $FILL W_VAL1O,C' '        Blank original value 1
         $FILL W_VAL2O,C' '        Blank original value 2
         $VLM  W_VAL1O,(R3),(R5)   Save original value 1
         $VLM  W_VAL2O,(R4),(R5)   Save original value 2
         $FILL W_VAL1R,C' '        Blank resolved value 1
         $FILL W_VAL2R,C' '        Blank resolved value 2
         LA    R3,W_VAL1O          Original value 1 address
         LA    R4,W_VAL2O          Original value 2 address
         LA    R6,W_VAL1R          Resolved value 1 address
         LA    R7,W_VAL2R          Resolved value 2 address
         XR    R8,R8               Zero resolved length
RMNEXT   CLI   0(R3),C' '          End ?
         BE    RMCOPY              Yes, get out
         CLI   0(R3),C'?'          Single character wildcard ?
         BE    RMINCR              Yes, skip it
         CLC   0(2,R3),=C'* '      Multiple character wildcard ending ?
         BE    RMDONE              Yes, get out
         CLI   0(R3),C'*'          Multiple character wildcard ?
         BNE   RMCOPY              No, copy it
         LA    R3,1(,R3)           Increment original value 1 address
         BCTR  R5,0                Decrement maximum length
RMNEXT2  LA    R4,1(,R4)           Increment original value 2 address
         CLC   0(1,R3),0(R4)       End of multiple character wildcard ?
         BE    RMCOPY              Yes, copy it
         BCT   R5,RMNEXT2          Loop until end of original value 2
         XR    R8,R8               Zero resolved length
         $FILL W_VAL2R,C' '        Blank resolved value 2
         B     RMDONE              Get out
RMCOPY   MVC   0(1,R6),0(R3)       Copy original to resolved value 1
         MVC   0(1,R7),0(R4)       Copy original to resolved value 2
         LA    R6,1(,R6)           Increment resolved value 1 address
         LA    R7,1(,R7)           Increment resolved value 2 address
         LA    R8,1(,R8)           Increment resolved length
RMINCR   LA    R3,1(,R3)           Increment original value 1 address
         LA    R4,1(,R4)           Increment original value 2 address
         BCT   R5,RMNEXT           Loop until end of original value 1
RMDONE   TM    W_F$FLAG,W_F$CRI    Criteria Trace ?
         BNO   RMNOCTRA            No, do not trace
         $MSG  W_TRACE,DAF621I     Move message template
         MVC   W_TRACE+18(44),W_VAL1O Original value 1
         MVC   W_TRACE+65(44),W_VAL2O Original value 2
         PUT   DAFTRACE,W_TRACE    Print a DAFTRACE record
         $MSG  W_TRACE,DAF622I     Move message template
         MVC   W_TRACE+18(44),W_VAL1R Resolved value 1
         MVC   W_TRACE+65(44),W_VAL2R Resolved value 2
         PUT   DAFTRACE,W_TRACE    Print a DAFTRACE record
RMNOCTRA LR    R15,R8              Return code
         B     DAFRMR              Return code
DAFRM    $EXIT                     Exit
         TITLE 'DAFSS - Sort Extracted SMF Records'
DAFSS    $ENTRY AMODE=31,RMODE=24  Entry
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(26),=CL026'Sort Extracted SMF Records'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         CLC   W_RPTTOT,=F'0'      Records Selected ?
         BE    SSEXIT              . No, do not sort
         MVC   W_LINK(L_LINK),T_LINK Copy LINK parameter list
         LINK  EP=SORT,MF=(E,P_ICEEPL),SF=(E,W_LINK) LINK to sort
         LTR   R15,R15             Sort OK ?
         BZ    SSEXIT              . Yes, continue
         $MSG  W_LOG,DAF716T       Move message template
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_RC,=F'16'         Return code 16
         B     SSEXIT              Continue
SSEXIT   EQU   *
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(26),=CL026'Sort Extracted SMF Records'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
DAFSS    $EXIT                     Exit
         TITLE 'DAFSWA - Static Workarea'
DAFSWA   CSECT                     Workarea static
T_DAF801 DC    CL100'DAF801A System Macro Problem - R15=________ '
T_DAF900 DC    CL100'DAF900A Abend Sxxx Uxxxx Module=________ +'
T_DAF901 DC    CL100'DAF901A Abend SDWA not present'
P_TBLHEX DC    C'0123456789ABCDEF'
P_BLANKS DC    CL133' '
P_RCTMSK DS    0CL20               Record count mask
         DC    X'40202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202120'
P_EDTMSK DC    XL016'404020206B2020206B2020206B202120'
P_BINMSK DC    XL016'40202020202020202020202020202120'
P_VLC    CLC   0(*-*,R14),0(R15)   Variable Length Compare (Executed)
P_VLM    MVC   0(*-*,R14),0(R15)   Variable Length Move (Executed)
P_VLTRT  TRT   0(*-*,R14),0(R15)   Variable Length TRT (Executed)
P_OTH    DC    CL058'Other'
P_TOT    DC    CL058'Total'
P_LOG    DS    0CL133              DAFLOG header record
         DC    CL133' DAF Log: '
P_RPT    DS    0CL133              DAFRPT header record
         DC    CL47' Date    Time        SID  Job      User     Rty'
         DC    CL044' Sty '
         DC    CL42' '
P_STAT   DS    0CL133              DAFSTAT header record
         DC    C'          DAFSMF          DAFRPT         Invalid'
         DC    C'    Rty Sty Description'
         ORG   P_STAT+133          DAFSTAT header record
*
**       SORT Extended Parameter List
*
         CNOP  0,4                 Fullword alignment
P_ICEEPL DC    A(P_ICECSA)         Address of control statement area
         DC    A(0)                Address of user exit E15 or E32
         DC    A(0)                Address of user exit E35
         DC    A(0)                Address of user exit constant
         DC    A(0)                Address of ALTSEQ translation table
         DC    A(0)                Address of ESTAE area pointer
         DC    A(0)                Address of user exit E18
         DC    A(0)                Address of user exit E39
         DC    A(0)                Four character call identifier
         DC    F'-1'               End of parameter list
P_ICECSA EQU   *                   Control statement area
         DC    AL2(P_ICECSE-P_ICECSB) Control statement length
P_ICECSB EQU   *
         DC    C'OPTION MSGDDN=DAFLOG '
         DC    C'DEBUG NOABEND '
         DC    C'SORT FIELDS=(1,80,CH,A) '
         DC    C'RECORD LENGTH=488,TYPE=F '
P_ICECSE EQU   *
*
**       System Macro Templates
*
T_CLOSE  CLOSE (),MF=L             CLOSE parameter list
L_CLOSE  EQU   *-T_CLOSE           CLOSE parameter list length
T_DAFCS  DCB   DDNAME=DAFCS,       DAFCS DCB                           X
               BLKSIZE=0,                                              X
               BUFNO=10,                                               X
               DSORG=PS,                                               X
               EODAD=PSEOD,                                            X
               LRECL=80,                                               X
               MACRF=(GM)
L_DAFCS  EQU   *-T_DAFCS           DAFCS DCB Length
T_DAFLOG DCB   DDNAME=DAFLOG,      DAFLOG DCB                          X
               BLKSIZE=0,                                              X
               BUFNO=10,                                               X
               DSORG=PS,                                               X
               LRECL=133,                                              X
               MACRF=(PM),                                             X
               RECFM=FBA
L_DAFLOG EQU   *-T_DAFLOG          DAFLOG DCB length
T_DAFOUT DCB   DDNAME=DAFOUT,      DAFOUT DCB                          X
               BLKSIZE=0,                                              X
               BUFNO=25,                                               X
               DSORG=PS,                                               X
               LRECL=488,                                              X
               MACRF=(PM),                                             X
               RECFM=FB
L_DAFOUT EQU   *-T_DAFOUT          DAFOUT DCB length
T_DAFRPT DCB   DDNAME=DAFRPT,      DAFRPT DCB                          X
               BLKSIZE=0,                                              X
               BUFNO=25,                                               X
               DSORG=PS,                                               X
               LRECL=133,                                              X
               MACRF=(PM),                                             X
               RECFM=FBA
L_DAFRPT EQU   *-T_DAFRPT          DAFRPT DCB length
T_DAFSMF DCB   DDNAME=DAFSMF,      DAFSMF DCB                          X
               BFTEK=A,                                                X
               BLKSIZE=0,                                              X
               BUFNO=150,                                              X
               DCBE=T_DCBE,                                            X
               DSORG=PS,                                               X
               EROPT=SKP,                                              X
               MACRF=(GL)
L_DAFSMF EQU   *-T_DAFSMF          DAFSMF DCB length
T_DCBE   DCBE  EODAD=ESEOD,        DAFSMF DCBE                         X
               RMODE31=BUFF
L_DCBE   EQU   *-T_DCBE            DAFSMF DCBE length
T_DAFSNAP DCB  DDNAME=DAFSNAP,     DAFSNAP DCB                         X
               BLKSIZE=1632,                                           X
               BUFNO=10,                                               X
               DSORG=PS,                                               X
               LRECL=125,                                              X
               MACRF=(W),                                              X
               RECFM=VBA
L_DAFSNAP EQU  *-T_DAFSNAP         DAFSNAP DCB length
T_DAFSTAT DCB  DDNAME=DAFSTAT,     DAFSTAT DCB                         X
               BLKSIZE=0,                                              X
               BUFNO=10,                                               X
               DSORG=PS,                                               X
               LRECL=133,                                              X
               MACRF=(PM),                                             X
               RECFM=FBA
L_DAFSTAT EQU  *-T_DAFSTAT         DAFSTAT DCB length
T_DAFTRACE DCB DDNAME=DAFTRACE,    DAFTRACE DCB                        X
               BLKSIZE=0,                                              X
               BUFNO=10,                                               X
               DSORG=PS,                                               X
               LRECL=133,                                              X
               MACRF=(PM),                                             X
               RECFM=FBA
L_DAFTRACE EQU *-T_DAFTRACE        DAFTRACE DCB length
T_ESTAE  ESTAE 0,MF=L              ESTAE parameter list
L_ESTAE  EQU   *-T_ESTAE           ESTAE parameter list length
T_LINK   LINK  ,SF=L               LINK parameter list
L_LINK   EQU   *-T_LINK            LINK parameter list length
T_OPENI  OPEN  (,INPUT),MF=L       OPEN parameter list (Input)
L_OPENI  EQU   *-T_OPENI           OPEN parameter list length (Input)
T_OPENO  OPEN  (,OUTPUT),MF=L      OPEN parameter list (Output)
L_OPENO  EQU   *-T_OPENO           OPEN parameter list length (Output)
T_RDJFCB RDJFCB (,INPUT),MF=L      RDJFCB parameter list
L_RDJFCB EQU   *-T_RDJFCB          RDJFCB parameter list length
T_SHOWCB SHOWCB ACB=*-*,           SHOWCB parameter list               X
               AREA=*-*,                                               X
               FIELDS=(BUFNO,CINV,LRECL,NEXT,NLOGR),                   X
               LENGTH=*-*,                                             X
               MF=L
L_SHOWCB EQU   *-T_SHOWCB          SHOWCB parameter list length
T_SNAP   SNAP  DCB=*-*,            SNAP parameter list                 X
               STORAGE=(*-*,*-*),                                      X
               MF=L
L_SNAP   EQU   *-T_SNAP            SNAP parameter list length
P_SORTIN DCB   DDNAME=SORTIN,      SORTIN DCB                          X
               BLKSIZE=0,                                              X
               BUFNO=25,                                               X
               DSORG=PS,                                               X
               LRECL=488,                                              X
               MACRF=(PM),                                             X
               RECFM=FB
L_SORTIN EQU   *-P_SORTIN          SORTIN DCB Length
P_SORTOU DCB   DDNAME=SORTOUT,     SORTOUT DCB                         X
               BLKSIZE=0,                                              X
               BUFNO=25,                                               X
               DSORG=PS,                                               X
               EODAD=GREOD,                                            X
               LRECL=488,                                              X
               MACRF=(GM),                                             X
               RECFM=FB
L_SORTOU EQU   *-P_SORTOU          SORTOUT DCB Length
T_SWAREQ SWAREQ EPA=*-*,           SWAREQ parameter list               X
               FCODE=RL,                                               X
               MF=L
L_SWAREQ EQU   *-T_SWAREQ          SWAREQ parameter list length
T_WTO    WTO   '1234567890123456789012345678901234567890123456789012345X
               678901234567890123456789012345678901234567890',         X
               DESC=6,             Job status                          X
               ROUTCDE=11,         Programmer Information              X
               MF=L
L_WTO    EQU   *-T_WTO             WTO parameter list length
         TITLE 'DAFTERM - Termination'
DAFTERM  $ENTRY AMODE=31,RMODE=24  Entry
         TM    DAFLOG+48,X'10'     DAFLOG open ?
         BZ    TERMBENO            . No
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(11),=CL011'Termination'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
TERMBENO EQU   *
*
**       Release Value Area
*
         CLC   W_TBLKWD,=F'0'      Keyword table address zero ?
         BE    RLVALNO             . Yes
         L     R3,W_TBLKWD         Set keyword table base
         USING D_TBLKWD,R3         Keyword table reference
         LA    R4,#_TBLKWD         Keyword table count
DTNXTKW  LH    R6,D_KWDVGL         Value getmain length
         LA    R7,#_TBLOP          Operator table count
         LA    R8,D_KWDVGA         Operand address
DTNXTOP  L     R5,0(R8)
         LTR   R5,R5               Any ?
         BZ    DTINCOP             . No
         STORAGE RELEASE,ADDR=(5),LENGTH=(6) Release value area
         LTR   R15,R15             OK ?
         BZ    RLVALOK             . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(15),=CL015'RELEASE/VALUE' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLVALOK  EQU   *
DTINCOP  LA    R8,4(,R8)           Next value getmain address
         BCT   R7,DTNXTOP          Another operator ?
DTNOFRE  LA    R3,E_TBLKWD(,R3)    Next keyword table entry
         BCT   R4,DTNXTKW          Another keyword ?
RLVALNO  EQU   *
         DROP  R3                  keyword table dereference
*
**       Release VSAM Workarea Storage
*
         CLC   W_VWA@,=F'0'        VSAM workarea address zero ?
         BE    RLVWANO             . No
         L     R0,=F'32768'        VSAM Workarea length
         ST    R0,W_STG_LENGTH     VSAM Workarea length
         L     R2,W_VWA@           VSAM workarea address
         ST    R2,W_STG_ADDR       VSAM workarea address
         STORAGE RELEASE,ADDR=(2),LENGTH=(0) Release VSAM workarea
         ST    R15,W_STG_RC        Storage return code
         LTR   R15,R15             OK ?
         BZ    RLVWAOK             . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(15),=CL015'RELEASE/VWA' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLVWAOK  EQU     *
         $MSG  W_LOG,DAF551I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(13),=CL013'VSAM_Workarea'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
RLVWANO  EQU *
*
**       Release TRT Table Storage
*
         CLC   W_TBLTRT,=F'0'      TRT table address zero ?
         BE    RLTRTNO             . Yes
         L     R0,=A(L_TBLTRT)     TRT table length
         ST    R0,W_STG_LENGTH     TRT table length
         L     R5,W_TBLTRT         TRT table address
         ST    R5,W_STG_ADDR       TRT table address
         STORAGE RELEASE,ADDR=(5),LENGTH=(0) Release TRT table
         LTR   R15,R15             OK ?
         BZ    RLTRTOK             . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(15),=CL015'RELEASE/TBLTRT' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLTRTOK  EQU   *
         $MSG  W_LOG,DAF551I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(13),=CL013'TRT_Table'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
RLTRTNO  EQU   *
*
**       Release SMF SNAP Storage
*
         CLC   W_SMFSNAP,=F'0'     SMF SNAP storage address zero ?
         BE    RLSNAPNO            . Yes
         L     R0,=A(L_SMFSNAP)    SMF SNAP storage length
         ST    R0,W_STG_LENGTH     SMF SNAP storage length
         L     R5,W_SMFSNAP        SMF SNAP storage address
         ST    R5,W_STG_ADDR       SMF SNAP storage address
         STORAGE RELEASE,ADDR=(5),LENGTH=(0) Release SMF SNAP storage
         LTR   R15,R15             OK ?
         BZ    RLSNAPOK            . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(15),=CL015'RELEASE/SMFSNAP' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLSNAPOK EQU   *
         $MSG  W_LOG,DAF551I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(13),=CL013'SMF_SNAP'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
RLSNAPNO EQU   *
*
**       Release SMF Table Storage
*
         CLC   W_TBLSMF,=F'0'      SMF table address zero ?
         BE    RLSMFNO             . Yes
         L     R0,=A(L_TBLSMF)     SMF table length
         ST    R0,W_STG_LENGTH     SMF table length
         L     R5,W_TBLSMF         SMF table address
         ST    R5,W_STG_ADDR       SMF table address
         STORAGE RELEASE,ADDR=(5),LENGTH=(0) Release SMF table
         ST    R15,W_STG_RC        Storage return code
         LTR   R15,R15             OK ?
         BZ    RLSMFOK             . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(15),=CL015'RELEASE/TBLSMF' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLSMFOK  EQU   *
         $MSG  W_LOG,DAF551I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(09),=CL009'SMF_Table'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
RLSMFNO  EQU   *
*
**       Release Keyword Table Storage
*
         CLC   W_TBLKWD,=F'0'      Keyword table address zero ?
         BE    RLKWDNO             . Yes
         L     R0,=A(L_TBLKWD)     Keyword table length
         ST    R0,W_STG_LENGTH     Keyword table length
         L     R5,W_TBLKWD         Keyword table address
         ST    R5,W_STG_ADDR       Keyword table address
         STORAGE RELEASE,ADDR=(5),LENGTH=(0) Release dynamic keyword
         LTR   R15,R15             OK ?
         BZ    RLKWDOK             . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(15),=CL015'RELEASE/TBLKWD' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLKWDOK  EQU   *
         $MSG  W_LOG,DAF551I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(13),=CL013'Keyword_Table'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
RLKWDNO  EQU   *
*
**       Release JFCB Storage
*
         CLC   W_JFCB@,=F'0'       JFCB storage address zero ?
         BE    RLJFCBNO            . Yes
         L     R0,=A(L_JFCB)       JFCB storage length
         ST    R0,W_STG_LENGTH     JFCB storage length
         L     R5,W_JFCB@          JFCB storage address
         ST    R5,W_STG_ADDR       JFCB storage address
         STORAGE RELEASE,ADDR=(5),LENGTH=(0) Release JFCB storage
         LTR   R15,R15             OK ?
         BZ    RLJFCBOK            . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(12),=CL012'RELEASE/JFCB' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLJFCBOK EQU   *
         $MSG  W_LOG,DAF551I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(04),=CL004'JFCB'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
RLJFCBNO EQU   *
*
**       Release DAFPT Storage
*
         CLC   W_DAFPT@,=F'0'      DAFPT storage address zero ?
         BE    RLDAFPTNO           . Yes
         L     R0,=A(L_DAFPT)      DAFPT storage length
         ST    R0,W_STG_LENGTH     DAFPT storage length
         L     R5,W_DAFPT@         DAFPT storage address
         ST    R5,W_STG_ADDR       DAFPT storage address
         STORAGE RELEASE,ADDR=(5),LENGTH=(0) Release DAFPT storage
         LTR   R15,R15             OK ?
         BZ    RLDAFPTOK           . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(13),=CL013'RELEASE/DAFPT' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLDAFPTOK EQU  *
         $MSG  W_LOG,DAF551I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(05),=CL005'DAFPT'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
RLDAFPTNO EQU  *
*
**       Release ARL Storage
*
         CLC   W_ARL@,=F'0'        ARL storage address zero ?
         BE    RLARLNO             . Yes
         L     R0,=A(L_ARL)        ARL storage length
         ST    R0,W_STG_LENGTH     ARL storage length
         L     R5,W_ARL@           ARL storage address
         ST    R5,W_STG_ADDR       ARL storage address
         STORAGE RELEASE,ADDR=(5),LENGTH=(0) Release ARL storage
         LTR   R15,R15             OK ?
         BZ    RLARLOK             . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(12),=CL012'RELEASE/ARL' Macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLARLOK  EQU   *
         $MSG  W_LOG,DAF551I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(04),=CL004'ARL'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
RLARLNO  EQU   *
*
**       Display Release DAFDWA Storage Message
*
         XC    W_STG_RC,W_STG_RC   DAFDWA return code
         ST    R10,W_STG_ADDR      DAFDWA storage address
         MVC   W_STG_LENGTH,=A(DAFDWA#) DAFDWA storage length
         $MSG  W_LOG,DAF551I       Move message template
         $HEX  W_LOG+29,W_STG_RC,LEN=1 Return code
         $HEX  W_LOG+40,W_STG_ADDR,LEN=4 Storage address
         $HEX  W_LOG+56,W_STG_LENGTH,LEN=4 Storage length
         MVC   W_LOG+65(06),=CL006'DAFDWA'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
*
**       Close DAFTRACE
*
         TM    DAFTRACE+48,X'10'   DAFTRACE open ?
         BZ    TERMTRNO            . No
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFTRACE,MF=(E,W_CLOSE) Close DAFTRACE
         ST    R15,W_CLOSE_RC      Save the return code from CLOSE
         $MSG  W_LOG,DAF554I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFTRACE' Move DDNAME into message
         $HEX  W_LOG+29,W_CLOSE_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
TERMTRNO EQU *
*
**       Close DAFSTAT
*
         TM    DAFSTAT+48,X'10'    DAFSTAT open ?
         BZ    TERMSTNO            . No
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFSTAT,MF=(E,W_CLOSE) Close DAFSTAT
         ST    R15,W_CLOSE_RC      Save the return code from CLOSE
         $MSG  W_LOG,DAF554I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFSTAT' Move DDNAME into message
         $HEX  W_LOG+29,W_CLOSE_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
TERMSTNO EQU *
*
**       Close DAFSNAP
*
         TM    DAFSNAP+48,X'10'    DAFSNAP open ?
         BZ    TERMSNNO            . No
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFSNAP,MF=(E,W_CLOSE) Close DAFSNAP
         ST    R15,W_CLOSE_RC      Save the return code from CLOSE
         $MSG  W_LOG,DAF554I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFSNAP' Move DDNAME into message
         $HEX  W_LOG+29,W_CLOSE_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
TERMSNNO EQU *
*
**       Close DAFRPT
*
         TM    DAFRPT+48,X'10'     DAFRPT open ?
         BZ    TERMRPNO            . No
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFRPT,MF=(E,W_CLOSE) Close DAFRPT
         ST    R15,W_CLOSE_RC      Save the return code from CLOSE
         $MSG  W_LOG,DAF554I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFRPT' Move DDNAME into message
         $HEX  W_LOG+29,W_CLOSE_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
TERMRPNO EQU *
*
**       Close DAFOUT
*
         TM    DAFOUT+48,X'10'     DAFOUT open ?
         BZ    TERMOUNO            . No
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFOUT,MF=(E,W_CLOSE) Close DAFOUT
         ST    R15,W_CLOSE_RC      Save the return code from CLOSE
         $MSG  W_LOG,DAF554I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFOUT' Move DDNAME into message
         $HEX  W_LOG+29,W_CLOSE_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
TERMOUNO EQU *
*
**       Close DAFCS
*
         TM    DAFCS+48,X'10'      DAFCS open ?
         BZ    TERMCSNO            . No
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFCS,MF=(E,W_CLOSE) Close DAFCS
         ST    R15,W_CLOSE_RC      Save the return code from CLOSE
         $MSG  W_LOG,DAF554I       Move message template
         MVC   W_LOG+17(8),=CL008'DAFCS' Move DDNAME into message
         $HEX  W_LOG+29,W_CLOSE_RC,LEN=1 Return code
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
TERMCSNO EQU *
*
**       Cancel ESTAE
*
         MVC   W_ESTAE(L_ESTAE),T_ESTAE Copy ESTAE parameter list
         ESTAE 0,MF=(E,W_ESTAE)    Cancel ESTAE
         LTR   R15,R15             OK ?
         BZ    ESTAEOK3            . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(12),=CL012'ESTAE/CANCEL' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESTAEOK3 EQU   *
         TM    DAFLOG+48,X'10'     DAFLOG open ?
         BZ    TERMCONO            . No
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(11),=CL011'Termination'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
TERMCONO EQU   *
*
**       Close DAFLOG
*
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFLOG,MF=(E,W_CLOSE) Close DAFLOG
DAFTERM  $EXIT                     Exit
         TITLE 'DAF000 - IPL'
DAF000   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD0,R3          SMF record reference
         $MSG  W_LOG,DAF510I       Move message template
         MVC   W_LOG+33(04),W_SYSTEM System id
         MVC   W_LOG+43(07),W_DATE Date
         MVC   W_LOG+56(11),W_TIME Time
         CALL  DAFMB,              Job wait time                       X
               (=C'JWT=',SMF0JWT,4),                                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Virtual storage in 1K bytes         X
               (=C'VST=',SMF0VST,4),                                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Central storage in 1K bytes         X
               (=C'RST=',SMF0RST,4),                                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              System name                         X
               (=C'SYN=',SMF0SYN,8),                                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Sysplex name                        X
               (=C'SYP=',SMF0SYP,8),                                   X
               MF=(E,W_WRK)
         LA    R7,W_LOG+68         Message address
         L     R8,W_CMT@           Next comment address
         LA    R1,W_SRTCMT         Starting comment address
         SR    R8,R1               Move length
         $VLM  (R7),W_SRTCMT,(R8)  Move it
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAF0004             Do not process
         DROP  R3                  SMF record dereference
DAF000   $EXIT                     Exit
         TITLE 'DAF002 - Dump Header'
DAF002   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD2,R3          SMF record reference
         $MSG  W_LOG,DAF511I       Move message template
         MVC   W_LOG+33(04),W_SYSTEM System id
         MVC   W_LOG+43(07),W_DATE Date
         MVC   W_LOG+56(11),W_TIME Time
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAF0024             Do not process
         DROP  R3                  SMF record dereference
DAF002   $EXIT                     Exit
         TITLE 'DAF003 - Dump Trailer'
DAF003   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD3,R3          SMF record reference
         $MSG  W_LOG,DAF512I       Move message template
         MVC   W_LOG+33(04),W_SYSTEM System id
         MVC   W_LOG+43(07),W_DATE Date
         MVC   W_LOG+56(11),W_TIME Time
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAF0034             Do not process
         DROP  R3                  SMF record dereference
DAF003   $EXIT                     Exit
         TITLE 'DAF007 - Data Lost'
DAF007   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         $MSG  W_LOG,DAF513W       Move message template
         MVC   W_LOG+33(04),SMFNNSID Lost system
         CALL  DAFCD,              Convert Date                        X
               (SMF7STD,W_LOG+43), Input/Output Dates                  X
               MF=(E,W_WRK)
         CALL  DAFCT,              Convert Time                        X
               (SMF7STM,W_TIME),   Input/Output Times                  X
               MF=(E,W_WRK)
         MVC   W_LOG+51(11),W_TIME Lost from time
         CALL  DAFCD,              Convert Date                        X
               (SMFNNDTE,W_LOG+66), Input/Output Dates                 X
               MF=(E,W_WRK)
         CALL  DAFCT,              Convert Time                        X
               (SMFNNTME,W_TIME),  Input/Output Times                  X
               MF=(E,W_WRK)
         MVC   W_LOG+74(11),W_TIME Lost to time
         LA    R15,W_LOG+92        Lost to time
         ST    R15,W_CMT@          Lost to time
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NONE',SMF7NRO,2), Lost Records                      X
               MF=(E,W_WRK)
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAF0074             Do not process
         DROP  R3                  SMF record dereference
DAF007   $EXIT                     Exit
         TITLE 'DAF014 - Non VSAM Data Set Activity'
**********************************************************************
*  Notes:          If Data definition name is blank, do not use it.  *
*                  If member name is blank, do not use it.           *
*                  If GDG is blank, do not use it.                   *
*                  JFCBNVOL can contain a number larger than five,   *
*                  however, only the first five volumes are in       *
*                  JFCBVOLS.                                         *
**********************************************************************
DAF014   $ENTRY AMODE=31,RMODE=24  Entry
DAF015   EQU   DAF014
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         LA    R4,SMFJFCB1         JFCB address
         USING JFCB,R4             JFCB reference
         MVC   W_DSN1,JFCBDSNM     Dataset 1
         MVC   W_JOB1,SMF14JBN     Job name
         MVC   W_USER,SMF14UID     User identification
         MVC   W_BYTE1,JFCBNVOL    Number of volumes
         CLC   W_BYTE1,=AL1(5)     More than five volumes ?
         BNH   E14VOLOK            . No, continue
         MVC   W_BYTE1,=AL1(5)     Process only five volumes
E14VOLOK EQU   *
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SDC=',SMF14SDC,1), SDC                              X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NUC=',SMF14NUC,1), NUC                              X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SUC=',SMF14SUC,1), SUC                              X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SET=',SMF14SET,1), SET                              X
               MF=(E,W_WRK)
         CALL  DAFPV,              Volume Serials                      X
               (W_BYTE1,1,JFCBVOLS,0,6),                               X
               MF=(E,W_WRK)
         CLC   SMFTIOE5,=CL008' '  Blank Data definition name ?
         BE    E14NODDN            . Yes
         MVC   W_DD,SMFTIOE5       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
E14NODDN EQU   *
         TM    JFCBIND1,JFCPDS     Member of PDS ?
         BNO   E14NOMEM            . No
         CLC   JFCBELNM,=CL008' '  Member present ?
         BE    E14NOMEM            . No
         MVC   W_MEMBER1,JFCBELNM  Member name
         CALL  DAFMC,              Move Comment                        X
               (=C'MEMBER=',W_MEMBER1,8), Member name                  X
               MF=(E,W_WRK)
E14NOMEM EQU   *
         TM    JFCBIND1,JFCGDG     GDG ?
         BNO   E14NOGDG            . No
         CLC   JFCBELNM,=CL008' '  GDG present ?
         BE    E14NOGDG            . No
         CALL  DAFMC,              Move Comment                        X
               (=C'GDG=',JFCBELNM,8), GDG                              X
               MF=(E,W_WRK)
E14NOGDG EQU   *
         CALL  DAFCT,              Convert Time                        X
               (SMF14OPE,W_TMPTME), Input/Output Times                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'OPE=',W_TMPTME,11), Open time                       X
               MF=(E,W_WRK)
         XR    R15,R15             Clear julian year
         ICM   R15,B'0001',JFCBCRDT  Insert julian year
         CVD   R15,W_DBL           Convert julian year
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  W_FULL1,W_DBL+6(2)  Unpack julian year
         MVC   W_YY,W_FULL1+2      Move julian year
         XR    R15,R15             Clear julian days
         ICM   R15,B'0011',JFCBCRDT+1 Insert julian days
         CVD   R15,W_DBL           Convert julian days
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  W_DDD,W_DBL+6(2)    Unpack julian days
         MVC   W_CRTDT,W_YYDDD     Creation date
         CALL  DAFMC,              Creation date                       X
               (=C'CRTDT=',W_CRTDT,5),                                 X
               MF=(E,W_WRK)
         XR    R15,R15             Clear julian year
         ICM   R15,B'0001',JFCBXPDT  Insert julian year
         CVD   R15,W_DBL           Convert julian year
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  W_FULL1,W_DBL+6(2)  Unpack julian year
         MVC   W_YY,W_FULL1+2      Move julian year
         XR    R15,R15             Clear julian days
         ICM   R15,B'0011',JFCBXPDT+1 Insert julian days
         CVD   R15,W_DBL           Convert julian days
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  W_DDD,W_DBL+6(2)    Unpack julian days
         MVC   W_EXPDT,W_YYDDD     Expiration date
         CALL  DAFMC,              Expiration date                     X
               (=C'EXPDT=',W_EXPDT,5),                                 X
               MF=(E,W_WRK)
         NI    JFCBIND2,255-JFCBRWPW Turn off extra bits
         NI    JFCBIND2,255-JFCENT Turn off extra bits    X'04'
         NI    JFCBIND2,255-JFCREQ Turn off extra bits    X'02'
         NI    JFCBIND2,255-JFCTEMP Turn off extra bits   X'01'
         L     R14,=A(T14DSP)      DISP
         CALL  DAFPC,              Process Compare Table               X
               ((R14),JFCBIND2),   DISP                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BUFNO=',JFCBUFNO,1), Buffers                        X
               MF=(E,W_WRK)
         CALL  DAFDSORG,           Process DSORG                       X
               (JFCDSORG,W_DSORG),                                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DSORG=',W_DSORG,3), DSORG                           X
               MF=(E,W_WRK)
         CALL  DAFRECFM,           RECFM                               X
               (JFCRECFM,W_RECFM),                                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'RECFM=',W_RECFM),  RECFM                            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BLKSIZE=',JFCBLKSI,2), BLKSIZE                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'LRECL=',JFCLRECL,2), LRECL                          X
               MF=(E,W_WRK)
         MVC   W_LRECL,W_LRECL     Clear LRECL
         MVC   W_LRECL+2(2),JFCLRECL LRECL
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NVOL=',JFCBNVOL,1),  Volumes                        X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'EXCP=',SMFEXCP,4), EXCP                             X
               MF=(E,W_WRK)
         MVC   W_EXCP,SMFEXCP      EXCP
         TM    SMF14RIN,SMF14EOV   EOV ?
         BNO   E14NOEOV            . No
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE=',=C'EOV',3), EOV                              X
               MF=(E,W_WRK)
E14NOEOV EQU   *
         TM    SMF14RIN,W_F$BIT2   DASD ?
         BNO   E14TAPE             . No, tape
         NI    JFCBCTRI,255-W_F$CTRI Turn off insignificant bits
         L     R14,=A(T14SPC)      Space type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),JFCBCTRI),   Space type                          X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'PQTY=',JFCBPQTY,3), Primary quantity                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SQTY=',JFCBSQTY,3), Secondary quantity              X
               MF=(E,W_WRK)
         TM    JFCBIND1,JFCRLSE    Release specified ?
         BNO   E14NORLS            . No
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE=',=C'Release',7), Release                      X
               MF=(E,W_WRK)
E14NORLS EQU   *
         XR    R0,R0               Clear
         ICM   R1,B'1111',SMF14NTU Tracks used
         SLDL  R0,4                Move four bits to the left
         STCM  R0,B'1111',W_DBL    Store in work field
         STCM  R1,B'1111',W_DBL+4  Store in work field
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  W_NTU,W_DBL+3(5)    Unpack it
         L     R15,=A(TBLHEX)      Set HEX table address
         USING TBLHEX,R15          HEX table reference
         TR    W_NTU,TBLHEX        Convert to HEX
         DROP  R15                 HEX table dereference
         CALL  DAFMC,              Move Comment                        X
               (=C'NTU=',W_NTU,8), Tracks used                         X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NTR=',SMF14NTR,4), Tracks released                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NER=',SMF14NER,1), Extents released                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NEX=',SMF14NEX,1), Extents                          X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NTA=',SMF14NTA,4), Tracks allocated                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'VOL=',SMFSRTEV,6), Volume                           X
               MF=(E,W_WRK)
         B     E14DASDX            Continue
E14TAPE  EQU   *
         NI    JFCBLTYP,255-JFCDSEQN Turn off dataset sequence num bit
         L     R14,=A(T14LTP)      Label type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),JFCBLTYP),   Label type                          X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'FLSQ=',JFCBFLSQ,2), File sequence number            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DEBVL=',SMFDEBVL,2), Volume sequence number         X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DCBBL=',SMFDCBBL,4), Volume block count             X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DSSNO=',SMFDSSNO,6), Dataset serial number          X
               MF=(E,W_WRK)
         B     E14TAPEX            Continue
E14DASDX EQU   *
E14TAPEX EQU   *
E14EI    EQU   *
         TM    SMF14RIN+1,SMF14XSG Extended Information ?
         BNO   E14NOEI             . No
         LA    R5,SMFDCBDE         Set SMF record base
         XR    R15,R15             Clear
         ICM   R15,B'0001',SMF14SDC Insert DCB/DEB size
         AR    R5,R15              Set SMF record base
         XR    R0,R0               Clear
         XR    R14,R14             Clear
         XR    R15,R15             Clear
         ICM   R0,B'0001',SMF14NUC Insert UCB number
         ICM   R15,B'0001',SMF14SUC Insert UCB size
         MR    R14,R0              UCB length
         AR    R5,R15              Set SMF record base
         TM    SMF14RIN+1,SMF14HBT Hiperbatch ?
         BNO   E14NOHB             . No
         LA    R15,SMFHBEND-SMFHBTCH Hiperbatch size
         AR    R5,R15              Set SMF record base
E14NOHB  EQU   *
         XR    R15,R15             Clear
         ICM   R15,B'0001',SMF14SET Insert ISAM size
         AR    R5,R15              Set SMF record base
EI       USING D_SMFREC,R5         SMF record reference
*       CALL  DAFMC,              Move Comment                        X
*             (=C'EI=',SMF14XIC,20),                                  X
*             MF=(E,W_WRK)
E14NOEI  EQU   *
         DROP  R3                  SMF record dereference
         DROP  R4                  JFCB dereference
         DROP  EI                  EI dereference
DAF014   $EXIT                     Exit
         AIF   ('&RT_DFSORT' EQ '000').NODFSORT5
         TITLE 'DAF016 - DFSORT Statistics'
DAF016   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          SMF record reference - Header
         A     R3,ICEPROD          Add product section offset
         DROP  R3                  Header dereference
         USING ICESMFP,R3          SMF record reference - Product
         CLC   ICERELNM,=CL004'13.0' DFSORT Release 13 ?
         BL    DAF0164             Lower than Release 13 - Exit
         DROP  R3                  SMF record - Product dereference
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          SMF record reference - Header
         L     R4,ICEDATA          Load data section offset
         XR    R5,R5               Clear
         LH    R5,ICEDATAL         Load data section length
         XR    R6,R6               Clear
         LH    R6,ICEDATAN         Load data section number
         LTR   R6,R6               Any data sections ?
         BNP   E16DATAEND          No, continue
         AR    R3,R4               Add data section offset
         ST    R3,W_SMFSO1         Add data section offset
         CALL  DAFD16              Extract SMF Record 16 - Data
E16DATAEND EQU   *                 End of data section
         DROP  R3                  SMF record - Product dereference
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          SMF record reference - Header
         L     R4,ICEINDS          Load input section offset
         XR    R5,R5               Clear
         LH    R5,ICEINDSL         Load input section length
         XR    R6,R6               Clear
         LH    R6,ICEINDSN         Load input section number
         LTR   R6,R6               Any input sections ?
         BNP   E16INEND            No, continue
         AR    R3,R4               Add input section offset
         ST    R3,W_SMFSO1         Add input section offset
E16IN    EQU   *
         CALL  DAFI16              Extract SMF Record 16 - Input
         AR    R3,R5               Next input
         ST    R3,W_SMFSO1         Add data section offset
         BCT   R6,E16IN            Next input
E16INEND EQU   *                   End of Input
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          SMF record - Header reference
         L     R4,ICEOTDS          Load SORTOUT section offset
         XR    R5,R5               Clear
         LH    R5,ICEOTDSL         Load SORTOUT section length
         XR    R6,R6               Clear
         LH    R6,ICEOTDSN         Load SORTOUT section number
         LTR   R6,R6               Any SORTOUT sections ?
         BNP   E16OTEND            No, continue
         AR    R3,R4               Add SORTOUT section offset
         ST    R3,W_SMFSO1         Add SORTOUT section offset
E16OT    EQU   *
         CALL  DAFS16              Extract SMF Record 16 - SORTOUT
         AR    R3,R5               Next SORTOUT
         ST    R3,W_SMFSO1         Add data section offset
         BCT   R6,E16OT            Next SORTOUT
E16OTEND EQU   *                   End of SORTOUT
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          SMF record - Header reference
         L     R4,ICEOFDS          Load Outfil section offset
         XR    R5,R5               Clear
         LH    R5,ICEOFDSL         Load Outfil section length
         XR    R6,R6               Clear
         LH    R6,ICEOFDSN         Load Outfil section number
         LTR   R6,R6               Any Outfil sections ?
         BNP   E16OFEND            No, continue
         AR    R3,R4               Add SORTOUT section offset
         ST    R3,W_SMFSO1         Add SORTOUT section offset
E16OF    EQU   *
         CALL  DAFO16              Extract SMF Record 16 - Outfil
         AR    R3,R5               Next Outfil
         ST    R3,W_SMFSO1         Add SORTOUT section offset
         BCT   R6,E16OF            Next Outfil
E16OFEND EQU   *                   End of Outfil
         B     DAF0164             Check criteria not needed
DAF016   $EXIT                     Exit
         TITLE 'DAFD16 - DFSORT Statisticsd - Data'
DAFD16   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          SMF record - Header reference
         MVC   W_JOB1,ICEJOBNM     Job name
         MVC   W_USER,ICEUSER      User identification
         MVC   W_GROUP,ICEGROUP    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         L     R3,W_SMFSO1         Load data section offset
         DROP  R3                  SMF record - Header dereference
         USING ICESMFD,R3          SMF record - Data reference
         CLI   ICEIDSNM,X'00'      SORTIN present ?
         BE    DAFD16NI            . No
         MVC   W_DSN1,ICEIDSNM     Dataset
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,ICEIVOLS,0,6),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'INPDS=',ICEINPDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'INNDS=',ICEINNDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'OUTDS=',ICEOUTDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'OFLDS=',ICEOFLDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'RCDS=',ICERCDS,4), Records sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BYTES=',ICEBYTES,4), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CPUT=',ICECPUT,4), Sort CPU time                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'WBLK=',ICEWBLK,4), Sort work tracks used            X
               MF=(E,W_WRK)
         L     R14,=A(T16TOO)      ICEFLBY2
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEFLBY2),   ICEFLBY2                            X
               MF=(E,W_WRK)
         L     R14,=A(T16CSF)      ICECSFLG
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICECSFLG),   ICECSFLG                            X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
DAFD16NI EQU   *
         $FILL W_SRTCMT,C' '       Blank comment
         LA    R15,W_SRTCMT        Initialize comment address
         ST    R15,W_CMT@          Initialize comment address
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          SMF record - Header reference
         MVC   W_JOB1,ICEJOBNM     Job name
         MVC   W_USER,ICEUSER      User identification
         MVC   W_GROUP,ICEGROUP    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         L     R3,W_SMFSO1         Load data section offset
         DROP  R3                  SMF record - Header dereference
         USING ICESMFD,R3          SMF record - Data reference
         CLI   ICEODSNM,X'00'      SORTIN present ?
         BE    DAFD16NO            . No
         MVC   W_DSN1,ICEODSNM     Dataset
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,ICEOVOLS,0,6),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'INPDS=',ICEINPDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'INNDS=',ICEINNDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'OUTDS=',ICEOUTDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'OFLDS=',ICEOFLDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'RCDS=',ICERCDS,4), Records sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BYTES=',ICEBYTES,4), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CPUT=',ICECPUT,4), Sort CPU time                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'WBLK=',ICEWBLK,4), Sort work tracks used            X
               MF=(E,W_WRK)
         L     R14,=A(T16TOO)      ICEFLBY2
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEFLBY2),   ICEFLBY2                            X
               MF=(E,W_WRK)
         L     R14,=A(T16CSF)      ICECSFLG
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICECSFLG),   ICECSFLG                            X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
DAFD16NO EQU   *
         DROP  R3                  SMF record - Data dereference
DAFD16   $EXIT                     Exit
         TITLE 'DAFI16 - DFSORT Statisticsd - Input'
DAFI16   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          SMF record - Header reference
         MVC   W_JOB1,ICEJOBNM     Job name
         MVC   W_USER,ICEUSER      User identification
         MVC   W_GROUP,ICEGROUP    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         L     R3,W_SMFSO1         Load data section offset
         DROP  R3                  SMF record - Header dereference
         USING ICESMFIN,R3         SMF record - Input reference
         MVC   W_DSN1,ICEINNAM     Dataset
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,ICEINVOL,0,6),                                 X
               MF=(E,W_WRK)
         CLC   ICEINDDN,=CL008' '  Blank DDNAME ?
         BNE   I16DDN1             No
         MVC   W_DD,W_SAVDD        Data definition name
         B     I16DDN2
I16DDN1  MVC   W_DD,ICEINDDN       Data definition name
         MVC   W_SAVDD,W_DD        Data definition name
I16DDN2  CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         CALL  DAFRECFM,           RECFM                               X
               (ICEINRCF,W_RECFM),                                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'RECFM=',W_RECFM),  RECFM                            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BLKSIZE=',ICEINBKZ,2), BLKSIZE                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'LRECL=',ICEINLRL,2), LRECL                          X
               MF=(E,W_WRK)
         XC    W_LRECL,W_LRECL     Clear LRECL
         MVC   W_LRECL+2(2),ICEINLRL LRECL
         L     R14,=A(T16AMB)      Access Method Flags
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEINAMB),   Access Method Flags                 X
               MF=(E,W_WRK)
         L     R14,=A(T16FL1)      Flags Byte
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEINFL2),   Flags Byte                          X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         DROP  R3                  SMF record - Input dereference
DAFI16   $EXIT                     Exit
         TITLE 'DAFO16 - DFSORT Statisticsd - Outfil'
DAFO16   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          SMF record - Header reference
         MVC   W_JOB1,ICEJOBNM     Job name
         MVC   W_USER,ICEUSER      User identification
         MVC   W_GROUP,ICEGROUP    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         L     R3,W_SMFSO1         Load data section offset
         DROP  R3                  SMF record - Header dereference
         USING ICESMFOF,R3         SMF record - Outfil reference
         MVC   W_DSN1,ICEOFNAM     Dataset
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,ICEOFVOL,0,6),                                 X
               MF=(E,W_WRK)
         CLC   ICEOFDDN,=CL008' '  Blank DDNAME ?
         BNE   O16DDN1             No
         MVC   W_DD,W_SAVDD        Data definition name
         B     O16DDN2
O16DDN1  MVC   W_DD,ICEOFDDN       Data definition name
         MVC   W_SAVDD,W_DD        Data definition name
O16DDN2  CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         CALL  DAFRECFM,           RECFM                               X
               (ICEOFRCF,W_RECFM),                                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'RECFM=',W_RECFM),  RECFM                            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BLKSIZE=',ICEOFBKZ,2), BLKSIZE                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'LRECL=',ICEOFLRL,2), LRECL                          X
               MF=(E,W_WRK)
         XC    W_LRECL,W_LRECL     Clear LRECL
         MVC   W_LRECL+2(2),ICEOFLRL LRECL
         L     R14,=A(T16AMB)      Access Method Flags
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEOFAMB),   Access Method Flags                 X
               MF=(E,W_WRK)
         L     R14,=A(T16FL1)      Flags Byte 1
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEOFFL1),   Flags Byte 1                        X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         DROP  R3                  SMF record - Outfil dereference
DAFO16   $EXIT                     Exit
         TITLE 'DAFS16 - DFSORT Statisticsd - SORTOUT'
DAFS16   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          SMF record - Header reference
         MVC   W_JOB1,ICEJOBNM     Job name
         MVC   W_USER,ICEUSER      User identification
         MVC   W_GROUP,ICEGROUP    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         L     R3,W_SMFSO1         Load SORTOUT section offset
         DROP  R3                  SMF record - Header dereference
         USING ICESMFOT,R3         SMF record - SORTOUT reference
         MVC   W_DSN1,ICEOTNAM     Dataset
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,ICEOTVOL,0,6),                                 X
               MF=(E,W_WRK)
         CLC   ICEOTDDN,=CL008' '  Blank DDNAME ?
         BNE   S16DDN1             No
         MVC   W_DD,W_SAVDD        Data definition name
         B     S16DDN2
S16DDN1  MVC   W_DD,ICEOTDDN       Data definition name
         MVC   W_SAVDD,W_DD        Data definition name
S16DDN2  CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         CALL  DAFRECFM,           RECFM                               X
               (ICEOTRCF,W_RECFM),                                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'RECFM=',W_RECFM),  RECFM                            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BLKSIZE=',ICEOTBKZ,2), BLKSIZE                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'LRECL=',ICEOTLRL,2), LRECL                          X
               MF=(E,W_WRK)
         XC    W_LRECL,W_LRECL     Clear LRECL
         MVC   W_LRECL+2(2),ICEOTLRL LRECL
         L     R14,=A(T16AMB)      Access Method Flags
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEOTAMB),   Access Method Flags                 X
               MF=(E,W_WRK)
         L     R14,=A(T16FL1)      Flags Byte 1
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEOTFL1),   Flags Byte 1                        X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         DROP  R3                  SMF record - SORTOUT dereference
DAFS16   $EXIT                     Exit
.NODFSORT5     ANOP
         TITLE 'DAF017 - Scratch Data Set Status'
DAF017   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_DSN1,SMF17DSN     Dataset 1
         MVC   W_JOB1,SMF17JBN     Job name
         MVC   W_USER,SMF17UID     User identification
         CALL  DAFPV,              Volume Serials                      X
               (SMF17NVL,1,SMF17RV2,2,8),                              X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NVL=',SMF17NVL,1), Volumes                          X
               MF=(E,W_WRK)
         DROP  R3                  SMF record dereference
DAF017   $EXIT                     Exit
         TITLE 'DAF018 - Rename Non-VSAM Data Set Status'
DAF018   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CALL  DAFPV,              Volume Serials                      X
               (SMF18NVL,1,SMF18RV2,2,8),                              X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NVL=',SMF18NVL,1), Volumes                          X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMF18ODS     Old dataset name
         CALL  DAFMC,              Move Comment                        X
               (=C'ODS=',SMF18ODS,44), Old dataset name                X
               MF=(E,W_WRK)
         MVC   W_JOB1,SMF18JBN     Job name
         MVC   W_USER,SMF18UID     User identification
         MVC   W_DSN2,SMF18NDS     New dataset name
         CALL  DAFMC,              Move Comment                        X
               (=C'NDS=',SMF18NDS,44), New dataset name                X
               MF=(E,W_WRK)
         MVC   W_CMTCLR,=C'N'      Do not clear comment area
         CALL  DAFCC               Check criteria
         MVC   W_DSN1,SMF18NDS     New dataset name
         MVC   W_DSN2,SMF18ODS     Old dataset name
         DROP  R3                  SMF record dereference
DAF018   $EXIT                     Exit
         TITLE 'DAF019 - Direct Access Volume'
DAF019   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_JOB1,=CL008'SMF'  Job name - SMF
         MVC   W_USER,=CL008'SMF'  User identification - SMF
         MVC   W_DSN1,=CL044'FORMAT4.DSCB ' VTOC
         CALL  DAFPV,              Volume Serial                       X
               (=F'1',4,SMF19VOL,0,6),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Owner identification                X
               (=C'OID=',SMF19OID,10),                                 X
               MF=(E,W_WRK)
         L     R14,=A(T19DEV)      Device type
         CALL  DAFPC,              Device type                         X
               ((R14),SMF19DEV+3),                                     X
               MF=(E,W_WRK)
         $HEX  W_CL016,SMF19VTC,LEN=5 VTOC Address (CCHHR)
         CALL  DAFMC,              VTOC Address (CCHHR)                X
               (=C'VTC=',W_CL016,10),                                  X
               MF=(E,W_WRK)
         L     R14,=A(T19VTI)      VTOC Indicator
         CALL  DAFPT,              VTOC Indicator                      X
               ((R14),SMF19VTI),                                       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of Total DSCBs               X
               (=C'NDS=',SMF19NDS,2),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of Available DSCBs           X
               (=C'DSR=',SMF19DSR,2),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of Unused Alternate Tracks   X
               (=C'NAT=',SMF19NAT,2),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of Unallocated Cylinders     X
               (=C'SPCC=',SMF19SPC,2),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of Unallocated Tracks        X
               (=C'SPCT=',SMF19SPC+2,2),                               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Largest Free Extent Cylinders       X
               (=C'LEXC=',SMF19LEX,2),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Largest Free Extent Tracks          X
               (=C'LEXT=',SMF19LEX+2,2),                               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of Unallocated Extents       X
               (=C'NUE=',SMF19NUE,2),                                  X
               MF=(E,W_WRK)
         $HEX  W_FULL1,SMF19CUU,LEN=2 Device number
         CALL  DAFMC,              Move Comment                        X
               (=C'CUU=',W_FULL1,4), Device number                     X
               MF=(E,W_WRK)
         DROP  R3                  SMF record dereference
DAF019   $EXIT                     Exit
         TITLE 'DAF022 - Configuration'
**********************************************************************
*  Notes:          Only process activate records                     *
*                  Only process I/O config change elements           *
*                  Only process first record of each change          *
**********************************************************************
DAF022   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMF22IND,=AL2(9)    Activate ?
         BE    E022T09             . Yes
         B     DAF0224             Exit, no check
         DROP  R3                  SMF record dereference
*
**       Subtype 09 - Activate
*
E022T09  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMF22OID,=X'0B'     I/O config change element ?
         BNE   DAF0224             . No, exit
         CLC   SMF22R#,=AL1(1)     First record of this change ?
         BNE   DAF0224             . No, exit
         MVC   W_DSN1,SMF22IDN     IODF dataset name
         MVC   W_JOB1,=CL008'MVS'  Job name - MVS
         MVC   W_USER,=CL008'MVS'  User identification - MVS
         CALL  DAFMC,              Move Comment                        X
               (=C'EDT=',SMF22EDT,2), EDT identification               X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CFI=',SMF22CFI,8), OS configuration identification  X
               MF=(E,W_WRK)
         L     R14,=A(T22FNC)      Function
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF22FNC),   Function                            X
               MF=(E,W_WRK)
         B     DAF0220             Exit
         DROP  R3                  SMF record dereference
DAF022   $EXIT                     Exit
         TITLE 'DAF024 - JES2 Spool Offload'
DAF024   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(01)   Job transmitted ?
         BE    DAF024T01           . Yes
         CLC   SMFNNSTY,=AL2(02)   Job received ?
         BE    DAF024T01           . Yes
         CLC   SMFNNSTY,=AL2(03)   SYSOUT transmitted ?
         BE    DAF024T01           . Yes
         CLC   SMFNNSTY,=AL2(04)   SYSOUT received ?
         BE    DAF024T01           . Yes
         B     DAF0244             Exit, no check
         DROP  R3                  SMF record dereference
*
**       Subtype 01 - Job transmitted
**       Subtype 02 - Job received
**       Subtype 03 - SYSOUT transmitted
**       Subtype 04 - SYSOUT received
*
DAF024T01 EQU *
DAF024T02 EQU *
DAF024T03 EQU *
DAF024T04 EQU *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD24,R3         SMF record reference
         MVC   W_SMFSO1,SMF24OGN   General offset
         MVC   W_SMFSL1,SMF24LGN   General length
         MVC   W_SMFSN1,SMF24NGN   General number
         L     R1,W_SMFSO1         General offset
         LTR   R1,R1               General offset ?
         BNP   DAF024IT            . No - invalid triplet
         LH    R1,W_SMFSL1         General length
         LTR   R1,R1               General length ?
         BNP   DAF024IT            . No - invalid triplet
         LH    R1,W_SMFSN1         General number
         LTR   R1,R1               General number ?
         BNP   DAF024IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add General offset
GN       USING SMF24GLN,R4         General reference
         MVC   W_SMFSO2,SMF24OSP   SPOF offset
         MVC   W_SMFSL2,SMF24LSP   SPOF length
         MVC   W_SMFSN2,SMF24NSP   SPOF number
         L     R1,W_SMFSO2         SPOF offset
         LTR   R1,R1               SPOF offset ?
         BNP   DAF024IT            . No - invalid triplet
         LH    R1,W_SMFSL2         SPOF length
         LTR   R1,R1               SPOF length ?
         BNP   DAF024IT            . No - invalid triplet
         LH    R1,W_SMFSN2         SPOF number
         LTR   R1,R1               SPOF number ?
         BNP   DAF024IT            . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add SPOF offset
SP       USING SMF24LN1,R5         SPOF reference
         CLC   SMF24OSW,=F'0'      ESS ?
         BE    DAF024NOSW1         . No
         MVC   W_SMFSO3,SMF24OSW   ESS offset
         MVC   W_SMFSL3,SMF24LSW   ESS length
         MVC   W_SMFSN3,SMF24NSW   ESS number
         L     R1,W_SMFSO3         ESS offset
         LTR   R1,R1               ESS offset ?
         BNP   DAF024IT            . No - invalid triplet
         LH    R1,W_SMFSL3         ESS length
         LTR   R1,R1               ESS length ?
         BNP   DAF024IT            . No - invalid triplet
         LH    R1,W_SMFSN3         ESS number
         LTR   R1,R1               ESS number ?
         BNP   DAF024IT            . No - invalid triplet
         L     R6,W_SMFBAS         Set SMF record base
         A     R6,W_SMFSO3         Add ESS offset
SW       USING SMF24LN3,R6         SMF record reference
DAF024NOSW1 EQU *
         CLC   SMF24OSA,=F'0'      SYSAFF ?
         BE    DAF024NOSA1         . No
         MVC   W_SMFSO4,SMF24OSA   SYSAFF offset
         MVC   W_SMFSL4,SMF24LSA   SYSAFF length
         MVC   W_SMFSN4,SMF24NSA   SYSAFF number
         L     R1,W_SMFSO4         SYSAFF offset
         LTR   R1,R1               SYSAFF offset ?
         BNP   DAF024IT            . No - invalid triplet
         LH    R1,W_SMFSL4         SYSAFF length
         LTR   R1,R1               SYSAFF length ?
         BNP   DAF024IT            . No - invalid triplet
         LH    R1,W_SMFSN4         SYSAFF number
         LTR   R1,R1               SYSAFF number ?
         BNP   DAF024IT            . No - invalid triplet
         L     R7,W_SMFBAS         Set SMF record base
         A     R7,W_SMFSO4         Add SYSAFF offset
SA       USING SMF24LS4,R7         SYSAFF reference
DAF024NOSA1 EQU *
         L     R14,=A(T24SUB)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF24SUB), Subtype                               X
               MF=(E,W_WRK)
         L     R14,=A(T24BCF)      SMF24BCF
         CALL  DAFPT,              Process TM Table                    X
               ((R14),GN.SMF24BCF), SMF24BCF                           X
               MF=(E,W_WRK)
         L     R14,=A(T24EOJ)      SMF24EOJ
         CALL  DAFPT,              Process TM Table                    X
               ((R14),GN.SMF24EOJ), SMF24EOJ                           X
               MF=(E,W_WRK)
         MVC   W_DSN1,GN.SMF24DSN  Dataset 1
         MVC   W_JOB1,GN.SMF24JBN  Job name
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CNT=',GN.SMF24CNT,4), Number of records             X
               MF=(E,W_WRK)
         B     DAF0240             Exit
         DROP  R3                  SMF record dereference
         DROP  GN                  General dereference
         DROP  SP                  SPOF dereference
         DROP  SW                  ESS dereference
         DROP  SA                  SYSAFF dereference
*
**       Invalid Triplet
*
DAF024IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0244             Exit, no check
DAF024   $EXIT                     Exit
         TITLE 'DAF036 - Integrated Catalog Facility Catalog'
DAF036   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_SMFSO1,SMF36DOF   Data offset
         MVC   W_SMFSL1,SMF36DLN   Data length
         MVC   W_SMFSN1,SMF36DNO   Data number
         L     R1,W_SMFSO1         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF036IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Data length
         LTR   R1,R1               Any Data length ?
         BNP   DAF036IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Data number
         LTR   R1,R1               Any Data number ?
         BNP   DAF036IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Data offset
         USING SMF36DAT,R4         Data reference
         MVC   W_JOB1,SMF36JNM     Job name
         MVC   W_USER,SMF36UID     User identification
         MVC   W_PGM,SMF36PGM      Program name
         CALL  DAFMC,              Program name                        X
               (=C'PGM=',W_PGM,8),                                     X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMF36CNM     Catalog dataset name
         MVC   W_CATALOG,SMF36CNM  Catalog dataset name
         CALL  DAFMC,              Catalog dataset name                X
               (=C'CNM=',W_DSN1,44),                                   X
               MF=(E,W_WRK)
         MVC   W_VOL1,SMF36CVS     Catalog volume serial
         CALL  DAFMC,              Catalog volume serial               X
               (=C'CVS=',W_VOL1,6),                                    X
               MF=(E,W_WRK)
         CALL  DAFMC,              Export date                         X
               (=C'EDT=',SMF36EDT,8),                                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Export time                         X
               (=C'ETM=',SMF36ETM,8),                                  X
               MF=(E,W_WRK)
         MVC   W_DSN2,SMF36PDS     Portable dataset name
         CALL  DAFMC,              Portable dataset name               X
               (=C'PDS=',W_DSN2,44),                                   X
               MF=(E,W_WRK)
         MVC   W_VOL2,SMF36PVS     Portable volume serial
         CALL  DAFMC,              Portable volume serial              X
               (=C'PVS=',W_VOL2,6),                                    X
               MF=(E,W_WRK)
         L     R14,=A(T36EIN)      Indicator
         CALL  DAFPC,              Indicator                           X
               ((R14),SMF36EIN),                                       X
               MF=(E,W_WRK)
         MVC   W_CMTCLR,=C'N'      Do not clear comment area
         CALL  DAFCC               Check criteria
         MVC   W_DSN1,SMF36PDS     Portable dataset name
         MVC   W_DSN2,SMF36CNM     Catalog dataset name
         B     DAF0360             Exit
         DROP  R3                  SMF Record dereference
         DROP  R4                  Data dereference
*
**       Invalid Triplet
*
DAF036IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0364             Exit, no check
DAF036   $EXIT                     Exit
         AIF   ('&RT_DFSMS' EQ '000').NODFSMS5
         TITLE 'DAF042 - DFSMS Statistics and Configuration'
**********************************************************************
*  Notes:          SMF42EAD/ESD can contain 'NO xCDS SPECIFIED'      *
*                  (where xCDS is either ACDS or SCDS)               *
*                  Bypass VARY SMS volume - DSN low values           *
**********************************************************************
DAF042   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         AIF   ('&ST_DFSMS03' EQ 'NO').NODFSMS035
         CLC   SMFNNSTY,=AL2(03)   SMS Configuration ?
         BE    E042T03             . Yes
.NODFSMS035    ANOP
         AIF   ('&ST_DFSMS06' EQ 'NO').NODFSMS065
         CLC   SMFNNSTY,=AL2(06)   Dataset Statistics ?
         BE    E042T06             . Yes
.NODFSMS065    ANOP
         AIF   ('&ST_DFSMS07' EQ 'NO').NODFSMS075
         CLC   SMFNNSTY,=AL2(07)   Dataset Statistics ?
         BE    E042T07             . Yes
.NODFSMS075    ANOP
         AIF   ('&ST_DFSMS09' EQ 'NO').NODFSMS095
         CLC   SMFNNSTY,=AL2(09)   X37 Abend ?
         BE    E042T09             . Yes
.NODFSMS095    ANOP
         AIF   ('&ST_DFSMS10' EQ 'NO').NODFSMS105
         CLC   SMFNNSTY,=AL2(10)   Volume Selection Failure ?
         BE    E042T10             . Yes
.NODFSMS105    ANOP
         AIF   ('&ST_DFSMS16' EQ 'NO').NODFSMS165
         CLC   SMFNNSTY,=AL2(16)   Dataset Response Time Summary ?
         BE    E042T16             . Yes
.NODFSMS165    ANOP
         AIF   ('&ST_DFSMS20' EQ 'NO').NODFSMS205
         CLC   SMFNNSTY,=AL2(20)   STOW Initialize ?
         BE    E042T20             . Yes
.NODFSMS205    ANOP
         AIF   ('&ST_DFSMS21' EQ 'NO').NODFSMS215
         CLC   SMFNNSTY,=AL2(21)   Member Delete ?
         BE    E042T21             . Yes
.NODFSMS215    ANOP
         B     DAF0424             Exit - No criteria check
         DROP  R3                  SMF record dereference
         AIF   ('&ST_DFSMS03' EQ 'NO').NODFSMS037
*
**       Subtype 03 - SMS Configuration
*
E042T03  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF42,R3            SMF record reference
         MVC   W_JOB1,SMF42SSI     Job name
         MVC   W_USER,SMF42SSI     User identification
         LA    R3,SMF42_LEN(R3)    Set subtype 3 header
         USING SMF42S3,R3          Subtype 3 Header reference
         MVC   W_SMFSO1,SMF42EAO   Get offset to event audit section
         L     R3,W_SMFBAS         Set SMF record base
         A     R3,W_SMFSO1         Add event audit section offset
         USING SMF4203A,R3         Event audit section reference
         CLC   SMF42EAC(8),=C'ACTIVATE' ACTIVATE ?
         BNE   DAF0424             . No, bypass the record
         CLC   SMF42EAD(17),=C'NO ACDS SPECIFIED' ACDS specified ?
         BE    E42ESD              No, check SCSD
         MVC   W_DSN1,SMF42EAD     ACDS dataset 1
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE=',=C'ACDS_Dataset',12), ACDS DSN               X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'EAC=',SMF42EAC,8), Action                           X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
E42ESD   CLC   SMF42ESD(17),=C'NO SCDS SPECIFIED' SCDS specified ?
         BE    DAF0424             . No, get out
         MVC   W_DSN1,SMF42ESD     SCDS dataset 1
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE=',=C'SCDS_Dataset',12), SCDS DSN               X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'EAC=',SMF42EAC,8), Action                           X
               MF=(E,W_WRK)
         B     DAF0420             Return to caller
         DROP  R3                  SMF record dereference
.NODFSMS037    ANOP
         AIF   ('&ST_DFSMS06' EQ 'NO').NODFSMS067
*
**       Subtype 06 - Dataset Statistics
*
E042T06  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF42,R3            SMF record reference
         LA    R3,SMF42_LEN(R3)    Set subtype 6 header
         USING SMF42S6,R3          Subtype 6 Header reference
         MVC   W_SMFSO1,SMF42JHO   Job Header offset
         MVC   W_SMFSL1,SMF42JHL   Job Header length
         MVC   W_SMFSN1,SMF42JHN   Job Header number
         L     R1,W_SMFSO1         Job Header offset
         LTR   R1,R1               Job Header offset ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Job Header length
         LTR   R1,R1               Job Header length ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Job Header number
         LTR   R1,R1               Job Header number ?
         BNP   DAF042IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Job Header offset
         USING SMF4206A,R4         Job Header reference
         MVC   W_SMFSO2,S42JDDSO   Dataset Header offset
         MVC   W_SMFSL2,S42JDDSL   Dataset Header length
         L     R1,W_SMFSO2         Dataset Header offset
         LTR   R1,R1               Dataset Header offset ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Dataset Header length
         LTR   R1,R1               Dataset Header length ?
         BNP   DAF042IT            . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add Dataset Header offset
         USING S42DSH,R5           Dataset Header reference
DAF042T6N EQU *
         MVC   W_JOB1,S42JDJNM     Job name
         MVC   W_USER,S42JDUID     User identification
         L     R14,=A(T42JDCOD)    Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),S42JDCOD),   Type                                X
               MF=(E,W_WRK)
         MVC   W_DSN1,S42DSN       Dataset name
         L     R14,=A(T42DSTYP)    Dataset Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),S42DSTYP),   Dataset Type                        X
               MF=(E,W_WRK)
         L     R14,=A(T42DSFL1)    Dataset descriptor flags
         CALL  DAFPT,              Process TM Table                    X
               ((R14),S42DSFL1),   Dataset descriptor flags            X
               MF=(E,W_WRK)
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,S42DSVOL,0,6),                                 X
               MF=(E,W_WRK)
         $HEX  W_FULL1,S42DSDEV,LEN=2 Device number
         CALL  DAFMC,              Move Comment                        X
               (=C'DSDEV=',W_FULL1,4), Device number                   X
               MF=(E,W_WRK)
         MVC   W_STORCLAS,S42DSSC  Storage class name
         CALL  DAFMC,              Storage class name                  X
               (=C'STORCLAS=',W_STORCLAS,8),                           X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DSBSZ=',S42DSBSZ,4), Blocksize                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DSTRP=',S42DSTRP,2), Stripes                        X
               MF=(E,W_WRK)
         MVC   W_SMFSO3,S42DSIOO   I/O Statistics offset
         MVC   W_SMFSL3,S42JDIOL   I/O Statistics length
         L     R1,W_SMFSO3         I/O Statistics offset
         LTR   R1,R1               I/O Statistics offset ?
         BNP   DAF042IOX           . No - continue
         LH    R1,W_SMFSL3         I/O Statistics length
         LTR   R1,R1               I/O Statistics length ?
         BNP   DAF042IOX           . No - continue
         L     R6,W_SMFBAS         Set SMF record base
         A     R6,W_SMFSO3         Add I/O Statistics offset
         USING S42DSIO,R6          I/O Statistics reference
         CALL  DAFMB,              Average response time               X
               (=C'DSIOR=',S42DSIOR,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Average I/O connect time            X
               (=C'DSIOC=',S42DSIOC,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Average I/O pending time            X
               (=C'DSIOP=',S42DSIOP,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Average I/O disconnect time         X
               (=C'DSIOD=',S42DSIOD,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Average control unit queue time     X
               (=C'DSIOQ=',S42DSIOQ,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Total number of I/Os                X
               (=C'DSION=',S42DSION,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of cache candidates          X
               (=C'DSCND=',S42DSCND,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of cache hits                X
               (=C'DSHTS=',S42DSHTS,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of write candidates          X
               (=C'DSWCN=',S42DSWCN,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of write hits                X
               (=C'DSWHI=',S42DSWHI,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of sequential I/O operations X
               (=C'DSSEQ=',S42DSSEQ,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,      Number of record level cache I/O operations X
               (=C'DSRLC=',S42DSRLC,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,      Number of inhibit cache load I/O operations X
               (=C'DSICL=',S42DSICL,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Average I/O device-active-only time X
               (=C'DSDAO=',S42DSDAO,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Maximum data set I/O response time  X
               (=C'DSMXR=',S42DSMXR,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Maximum data set service time       X
               (=C'DSMXS=',S42DSMXS,4),                                X
               MF=(E,W_WRK)
DAF042IOX EQU   *
         MVC   W_SMFSO4,S42DSAMO   Access Method Statistics offset
         MVC   W_SMFSL4,S42JDAML   Access Method Statistics length
         L     R1,W_SMFSO4         Access Method Statistics offset
         LTR   R1,R1               Access Method Statistics offset ?
         BNP   DAF042AMX           . No - continue
         LH    R1,W_SMFSL4         Access Method Statistics length
         LTR   R1,R1               Access Method Statistics length ?
         BNP   DAF042AMX           . No - continue
         L     R7,W_SMFBAS         Set SMF record base
         A     R7,W_SMFSO4         Add Access Method Statistics offset
         USING S42DSAM,R7          Access Method Statistics reference
         CALL  DAFMB,              Sequential read: number of blocks   X
               (=C'AMSRB=',S42AMSRB,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Sequential read: input/output delay X
               (=C'AMSRR=',S42AMSRR,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Sequential write: number of blocks  X
               (=C'AMSWB=',S42AMSWB,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,             Sequential write: input/output delay X
               (=C'AMSWR=',S42AMSWR,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Direct read: number of blocks       X
               (=C'AMDRB=',S42AMDRB,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,            Direct read: total input/output delay X
               (=C'AMDRR=',S42AMDRR,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Direct write: number of blocks      X
               (=C'AMDWB=',S42AMDWB,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,           Direct write: total input/output delay X
               (=C'AMDWR=',S42AMDWR,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of directory reads           X
               (=C'AMZRB=',S42AMZRB,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Directory read: input/output delay  X
               (=C'AMZRR=',S42AMZRR,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of directory writes          X
               (=C'AMZWB=',S42AMZWB,4),                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Directory write: input/output delay X
               (=C'AMZWR=',S42AMZWR,4),                                X
               MF=(E,W_WRK)
DAF042AMX EQU   *
         CALL  DAFCC               Check criteria
         CLC   S42DSNXT,=F'0'      Any more ?
         BE    DAF0424             Exit - No criteria check
         L     R15,S42DSNXT        Next Dataset Header offset
         L     R5,W_SMFBAS         Set SMF record base
         AR    R5,R15              Add Dataset Header offset
         B     DAF042T6N
         DROP  R3                  SMF record dereference
         DROP  R4                  Job Header dereference
         DROP  R5                  Dataset Header dereference
         DROP  R6                  I/O Statistics dereference
         DROP  R7                  Access Method Statistics dereference
.NODFSMS067    ANOP
         AIF   ('&ST_DFSMS07' EQ 'NO').NODFSMS077
*
**       Subtype 07 - Dataset Statistics
*
E042T07  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF42,R3            SMF record reference
         MVC   W_JOB1,SMF42SSI     Job name
         MVC   W_USER,SMF42SSI     User identification
         LA    R3,SMF42_LEN(R3)    Set subtype 7 header
         USING SMF427H,R3          Subtype 7 Header reference
         MVC   W_SMFSO1,SMF42NFO   File Timeout Statistics offset
         MVC   W_SMFSL1,SMF42NFL   File Timeout Statistics length
         MVC   W_SMFSN1,SMF42NFN   File Timeout Statistics number
         L     R1,W_SMFSO1         File Timeout Statistics offset
         LTR   R1,R1               File Timeout Statistics offset ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSL1         File Timeout Statistics length
         LTR   R1,R1               File Timeout Statistics length ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSN1         File Timeout Statistics number
         LTR   R1,R1               File Timeout Statistics number ?
         BNP   DAF042IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add File Timeout Statistics offset
         USING SMF42S7,R4          File Timeout Statistics reference
         L     R14,=A(T42FFS)      File system type indicator
         CALL  DAFPC,              File system type indicator          X
               ((R14),SMF42FFS),                                       X
               MF=(E,W_WRK)
         L     R14,=A(T42FTY)      File type in NFS protocol
         CALL  DAFPC,              File type in NFS protocol           X
               ((R14),SMF42FTY),                                       X
               MF=(E,W_WRK)
         L     R14,=A(T42FTM)      MVS data set type
         CALL  DAFPC,              MVS data set type                   X
               ((R14),SMF42FTM),                                       X
               MF=(E,W_WRK)
         CALL  DAFMB,              File Serial Number, HFS INODE #     X
               (=C'FSN=',SMF42FSN,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Unique device number HFS file systemX
               (=C'FDN=',SMF42FDN,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of I/O blocks read           X
               (=C'FIR=',SMF42FIR,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of I/O blocks written        X
               (=C'FIW=',SMF42FIW,4),                                  X
               MF=(E,W_WRK)
         LH    R1,SMF42FNL         Dataset name length
         $VLM  W_DSN1,SMF42FFN,(R1) Dataset name
         B     DAF0420             Return to caller
         DROP  R3                  SMF record dereference
         DROP  R4                  File Timeout Statistics dereference
.NODFSMS077    ANOP
         AIF   ('&ST_DFSMS09' EQ 'NO').NODFSMS097
*
**       Subtype 09 - X37 Abend
*
E042T09  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF42,R3            SMF record reference
         LA    R3,SMF42_LEN(R3)    Set subtype 9 header
         USING SMF42S9,R3          Subtype 9 header reference
         MVC   W_SMFSO1,SMF42ABO   X37 Abend offset
         MVC   W_SMFSL1,SMF42ABL   X37 Abend length
         MVC   W_SMFSN1,SMF42ABN   X37 Abend number
         L     R1,W_SMFSO1         X37 Abend offset
         LTR   R1,R1               X37 Abend offset ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSL1         X37 Abend length
         LTR   R1,R1               X37 Abend length ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSN1         X37 Abend number
         LTR   R1,R1               X37 Abend number ?
         BNP   DAF042IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add X37 Abend offset
         USING SMF4209A,R4         X37 Abend reference
         MVC   W_JOB1,S42JOBN      Job name
         MVC   W_USER,S42AAUID     User identification
         MVC   W_DSN1,S42DSNME     Dataset
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,S42VOLSR,0,6),                                 X
               MF=(E,W_WRK)
         CALL  DAFDSORG,           Process DSORG                       X
               (S42DSORG,W_DSORG),                                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DSORG=',W_DSORG,3), DSORG                           X
               MF=(E,W_WRK)
         L     R14,=A(T42FLAGS)    T42FLAGS
         CALL  DAFPT,              Process TM Table                    X
               ((R14),S42FLAGS),   S42FLAGS                            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NEXT=',S42NEXT,1), Number of extents                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'TNTRK=',S42TNTRK,4), Total number tracks this vol   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'ASSAT=',S42ASSAT,4), Secondary allocation amount    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'ADRLH=',S42ADRLH,3), Average data block length      X
               MF=(E,W_WRK)
         CLC   SMF42SMO,=F'0'      SMS Data ?
         BE    DAF0420             . No, check criteria
         MVC   W_SMFSO2,SMF42SMO   SMS Data offset
         MVC   W_SMFSL2,SMF42SML   SMS Data length
         MVC   W_SMFSN2,SMF42SMN   SMS Data number
         L     R1,W_SMFSO2         SMS Data offset
         LTR   R1,R1               SMS Data offset ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSL2         SMS Data length
         LTR   R1,R1               SMS Data length ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSN2         SMS Data number
         LTR   R1,R1               SMS Data number ?
         BNP   DAF042IT            . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add SMS Data offset
         USING SMF4209B,R5         SMS Data reference
         MVC   W_MGMTCLAS,S42MCNME Management class name
         CALL  DAFMC,              Move Comment                        X
               (=C'MGMTCLAS=',W_MGMTCLAS,8),     Management class name X
               MF=(E,W_WRK)
         MVC   W_STORCLAS,S42SCNME Storage class name
         CALL  DAFMC,              Move Comment                        X
               (=C'STORCLAS=',W_STORCLAS,8),        Storage class name X
               MF=(E,W_WRK)
         MVC   W_DATACLAS,S42DCNME Data class name
         CALL  DAFMC,              Move Comment                        X
               (=C'DATACLAS=',W_DATACLAS,8),           Data class name X
               MF=(E,W_WRK)
         B     DAF0420             Return to caller
         DROP  R3                  SMF record dereference
         DROP  R4                  X37 Abend dereference
         DROP  R5                  SMS Data dereference
.NODFSMS097    ANOP
         AIF   ('&ST_DFSMS10' EQ 'NO').NODFSMS107
*
**       Subtype 10 - Volume Selection Failure
*
E042T10  EQU  *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF42,R3            SMF record reference
         LA    R3,SMF42_LEN(R3)    Set subtype 10 header
         USING SMF42SA,R3          Subtype 10 header reference
         MVC   W_SMFSO1,SMF42VSF   Volume Selection Failure offset
         MVC   W_SMFSL1,SMF42VSL   Volume Selection Failure length
         MVC   W_SMFSN1,SMF42VSN   Volume Selection Failure number
         L     R1,W_SMFSO1         Volume Selection Failure offset
         LTR   R1,R1               Volume Selection Failure offset ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Volume Selection Failure length
         LTR   R1,R1               Volume Selection Failure length ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Volume Selection Failure number
         LTR   R1,R1               Volume Selection Failure number ?
         BNP   DAF042IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Volume Selection Failure offset
         USING SMF420AA,R4         Volume Selection Failure reference
         MVC   W_JOB1,SMF42JBN     Job name
         MVC   W_DSN1,SMF42DSN     Dataset
         MVC   W_DD,SMF42DDN       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DDN=',W_DD,8), Data definition name                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'PGN=',SMF42PGN,8), Program name                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'STN=',SMF42STN,8), Step name                        X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'RSP=',SMF42RSP,4), Requested space quantity         X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'UNT=',SMF42UNT,2), Unit of Requested space quantity X
               MF=(E,W_WRK)
         MVC   W_DATACLAS,SMF42DCN Data class name
         CALL  DAFMC,              Move Comment                        X
               (=C'DATACLAS=',W_DATACLAS,8),           Data class name X
               MF=(E,W_WRK)
         MVC   W_MGMTCLAS,SMF42MCN Management class name
         CALL  DAFMC,              Move Comment                        X
               (=C'MGMTCLAS=',W_MGMTCLAS,8),     Management class name X
               MF=(E,W_WRK)
         MVC   W_STORCLAS,SMF42SNM Storage class name
         CALL  DAFMC,              Move Comment                        X
               (=C'STORCLAS=',W_STORCLAS,8),        Storage class name X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SGS=',SMF42SGS+2,30), Storage group name (1 of 15)  X
               MF=(E,W_WRK)
         B     DAF0420             Return to caller
         DROP  R3                  SMF record dereference
         DROP  R4                  Volume Selection Failure dereference
.NODFSMS107    ANOP
         AIF   ('&ST_DFSMS16' EQ 'NO').NODFSMS167
*
**       Subtype 16 - Dataset Response Time Summary
*
E042T16  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF42,R3            SMF record reference
         LA    R3,SMF42_LEN(R3)    Set subtype 16 header
         USING SMF42SG,R3          Subtype 16 Header reference
         LH    R4,SMF42GD3         Sysplex wide count
         LTR   R4,R4               Sysplex wide ?
         BNP   E042T16C1           No, continue
E042T16N1 EQU   *
         MVC   W_SMFSO1,SMF42GD1   Sysplex wide
         L     R3,W_SMFBAS         Set SMF record base
         A     R3,W_SMFSO1         Add Volume Selection Failure data
         USING SMF420GA,R3         Sysplex wide reference
         MVC   W_DSN1,SMF42GAB     Dataset
         MVC   W_DSN2,SMF42GAC     VSAM Spere Name
         CALL  DAFMC,              Move Comment                        X
               (=C'VSN=',SMF42GAC,44), VSAM Spere Name                 X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
E042T16C1 EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF42,R3            SMF record reference
         LA    R3,SMF42_LEN(R3)    Set subtype 16 header
         USING SMF42SG,R3          Subtype 16 Header reference
         LH    R4,SMF42GD6         Sysplex wide count
         LTR   R4,R4               Sysplex wide ?
         BNP   E042T16C2           No, continue
E042T16N2 EQU   *
         MVC   W_SMFSO1,SMF42GD4   Sysplex wide
         L     R3,W_SMFBAS         Set SMF record base
         A     R3,W_SMFSO1         Add Volume Selection Failure data
         USING SMF420GB,R3         Sysplex wide reference
         MVC   W_DSN1,SMF42GBB     Dataset
         MVC   W_DSN2,SMF42GBC     VSAM Spere Name
         CALL  DAFMC,              Move Comment                        X
               (=C'VSN=',SMF42GBC,44), VSAM Spere Name                 X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
E042T16C2 EQU   *
         B     DAF0424             Return to caller - No Check
         DROP  R3                  SMF record dereference
.NODFSMS167    ANOP
         AIF   ('&ST_DFSMS20' EQ 'NO').NODFSMS207
*
**       Subtype 20 - STOW Initialize
*
E042T20  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF42,R3            SMF record reference
         LA    R3,SMF42_LEN(R3)    Set subtype 20 header
         USING SMF42SK,R3          Subtype 20 Header reference
         MVC   W_SMFSO1,SMF42KN1   STOW Initialize offset
         MVC   W_SMFSL1,SMF42KN2   STOW Initialize length
         MVC   W_SMFSN1,SMF42KN3   STOW Initialize number
         L     R1,W_SMFSO1         STOW Initialize offset
         LTR   R1,R1               STOW Initialize offset ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSL1         STOW Initialize length
         LTR   R1,R1               STOW Initialize length ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSN1         STOW Initialize number
         LTR   R1,R1               STOW Initialize number ?
         BNP   DAF042IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add STOW Initialize offset
         USING SMF420KA,R4         STOW Initialize reference
         MVC   W_JOB1,SMF42KJB     Job name
         CALL  DAFMC,              Move Comment                        X
               (=C'KST=',SMF42KST,8), Step name                        X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'KPR=',SMF42KPR,8), PROC name                        X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMF42KDS     Dataset
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,SMF42KVS,0,6),                                 X
               MF=(E,W_WRK)
         B     DAF0420             Return to caller
         DROP  R3                  SMF record dereference
         DROP  R4                  STOW Initialize dereference
.NODFSMS207    ANOP
         AIF   ('&ST_DFSMS21' EQ 'NO').NODFSMS217
*
**       Subtype 21 - Member Delete
*
E042T21  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF42,R3            SMF record reference
         XR    R1,R1               Clear
         LH    R1,SMF42NT          Number of triplets
         C     R1,=F'3'            Member Delete ?
         BL    DAF0424             . Exit - No Check
         LA    R4,SMF42_LEN(R3)    Set subtype 21 header
         USING SMF42SL,R4          Subtype 21 Header reference
         MVC   W_SMFSO1,SMF42LN1   Member Delete offset
         MVC   W_SMFSL1,SMF42LN2   Member Delete length
         MVC   W_SMFSN1,SMF42LN3   Member Delete number
         L     R1,W_SMFSO1         Member Delete offset
         LTR   R1,R1               Member Delete offset ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Member Delete length
         LTR   R1,R1               Member Delete length ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Member Delete number
         LTR   R1,R1               Member Delete number ?
         BNP   DAF042IT            . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO1         Add Member Delete offset
         USING SMF420LA,R5         Member Delete reference
         MVC   W_JOB1,SMF42LJB     Job name
         CALL  DAFMC,              Move Comment                        X
               (=C'LST=',SMF42LST,8), Step name                        X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'LPR=',SMF42LPR,8), PROC name                        X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMF42LDS     Dataset
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,SMF42LVS,0,6),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'Len=',SMF42LNL,2), Length of member name            X
               MF=(E,W_WRK)
         MVC   W_MEMBER1,SMF42LMN  Member
         CALL  DAFMC,              Move Comment                        X
               (=C'Member=',SMF42LMN,8), Member name                   X
               MF=(E,W_WRK)
         XR    R1,R1               Clear
         LH    R1,SMF42NT          Number of triplets
         C     R1,=F'4'            Alias Delete ?
         BL    DAF0420             . Exit - Check
         MVC   W_SMFSO2,SMF42LN4   Alias Delete offset
         MVC   W_SMFSL2,SMF42LN5   Alias Delete length
         MVC   W_SMFSN2,SMF42LN6   Alias Delete number
         L     R1,W_SMFSO2         Alias Delete offset
         LTR   R1,R1               Alias Delete offset ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Alias Delete length
         LTR   R1,R1               Alias Delete length ?
         BNP   DAF042IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Alias Delete number
         LTR   R1,R1               Alias Delete number ?
         BNP   DAF042IT            . No - invalid triplet
         L     R6,W_SMFBAS         Set SMF record base
         A     R6,W_SMFSO2         Add Alias Delete offset
         USING SMF420LB,R6         Alias Delete reference
         LH    R7,SMF42LNA         Number of Aliases deleted
         LTR   R7,R7               Number of Aliases deleted ?
         BNP   DAF0420             Return to caller
         LA    R8,SMF42LAA         Aliases deleted array
E042T21N EQU   *
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'Len=',0(R8),2), Length of alias name                X
               MF=(E,W_WRK)
*        MVC   W_MEMBER1,SMF42LMN  Member
         CALL  DAFMC,              Move Comment                        X
               (=C'Alias=',2(R8),8), Alias name                        X
               MF=(E,W_WRK)
         LA    R8,2(R8)
         AH    R8,0(R8)
         BCT   R7,E042T21N
         B     DAF0420             Return to caller
         DROP  R3                  SMF record dereference
         DROP  R4                  Subtype 21 Header dereference
         DROP  R5                  Member Delete dereference
         DROP  R6                  Alias Delete dereference
.NODFSMS217    ANOP
*
**       Invalid Triplet
*
DAF042IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0424             Exit, no check
DAF042   $EXIT                     Exit
.NODFSMS5      ANOP
         TITLE 'DAF043 - JESx Start'
DAF043   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         $MSG  W_LOG,DAF516I       Move message template
         MVC   W_LOG+33(04),W_SYSTEM System id
         MVC   W_LOG+43(07),W_DATE Date
         MVC   W_LOG+56(11),W_TIME Time
         CLC   SMF43SBS,=X'0002'   JES2 ?
         BE    DAF043J2            . Yes
         CLC   SMF43SBS,=X'0005'   JES3 ?
         BE    DAF043J3            . Yes
         B     DAF0434             Do not process
DAF043J2 EQU   *                   JES2 Specific
         MVC   W_LOG+12(01),=C'2'  JES2
         TM    SMF43RST,SMF$ESYS   Restart ?
         BO    DAF043J2R           . Yes
         L     R14,=A(T43OPT)      SMF43OPT
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF43OPT),   SMF43OPT                            X
               MF=(E,W_WRK)
         LA    R7,W_LOG+68         Message address
         L     R8,W_CMT@           Next comment address
         LA    R1,W_SRTCMT         Starting comment address
         SR    R8,R1               Move length
         $VLM  (R7),W_SRTCMT,(R8)  Move it
         B     DAF043JX            Continue
DAF043J2R EQU   *                  JES2 Restart
         MVC   W_LOG+68(04),=C'EID='
         MVC   W_LOG+72(04),SMF43EID System id to be reclaimed
         B     DAF043JX            Continue
DAF043J3 EQU   *                   JES3 Specific
         MVC   W_LOG+12(01),=C'3'  JES3
         B     DAF043JX            Continue
DAF043JX EQU   *
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAF0434             Do not process
         DROP  R3                  SMF record dereference
DAF043   $EXIT                     Exit
         TITLE 'DAF045 - JESx Stop'
DAF045   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         $MSG  W_LOG,DAF517I       Move message template
         MVC   W_LOG+33(04),W_SYSTEM System id
         MVC   W_LOG+43(07),W_DATE Date
         MVC   W_LOG+56(11),W_TIME Time
         CLC   SMF45SBS,=X'0002'   JES2 ?
         BE    DAF045J2            . Yes
         CLC   SMF45SBS,=X'0005'   JES3 ?
         BE    DAF045J3            . Yes
         B     DAF0454             Do not process
DAF045J2 EQU   *                   JES2 Specific
         MVC   W_LOG+12(01),=C'2'  JES2
         MVC   W_LOG+68(04),=C'JCC='
         LH    R15,SMF45JCC        JES2 completion code
         $HEX  W_LOG+72,(R15),LEN=2 JES2 completion code
         B     DAF045JX            Continue
DAF045J3 EQU   *                   JES3 Specific
         MVC   W_LOG+12(01),=C'3'  JES3
         B     DAF045JX            Continue
DAF045JX EQU   *
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAF0454             Do not process
         DROP  R3                  SMF record dereference
DAF045   $EXIT                     Exit
         AIF   ('&RT_BDT' EQ '000').NOBDT5
         TITLE 'DAF059 - Bulk Data Transfer (BDT)'
DAF059   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFSTART,R3         SMF record reference
         MVC   W_SMFSO1,SMF59OPD   Product offset
         MVC   W_SMFSL1,SMF59LPD   Product length
         MVC   W_SMFSN1,SMF59NPD   Product number
         L     R1,W_SMFSO1         Product offset
         LTR   R1,R1               Product offset ?
         BNP   DAF059IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Product length
         LTR   R1,R1               Product length ?
         BNP   DAF059IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Product number
         LTR   R1,R1               Product number ?
         BNP   DAF059IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Product offset
PD       USING SMF59PRS,R4         Product reference
         MVC   W_SMFSO2,SMF59OTI   Transaction ID offset
         MVC   W_SMFSL2,SMF59LTI   Transaction ID length
         MVC   W_SMFSN2,SMF59NTI   Transaction ID number
         L     R1,W_SMFSO2         Transaction ID offset
         LTR   R1,R1               Transaction ID offset ?
         BNP   DAF059IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Transaction ID length
         LTR   R1,R1               Transaction ID length ?
         BNP   DAF059IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Transaction ID number
         LTR   R1,R1               Transaction ID number ?
         BNP   DAF059IT            . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add Transaction ID offset
TI       USING SMF59TRI,R5         Transaction ID reference
         MVC   W_SMFSO3,SMF59OTT   Transaction Type offset
         MVC   W_SMFSL3,SMF59LTT   Transaction Type length
         MVC   W_SMFSN3,SMF59NTT   Transaction Type number
         L     R1,W_SMFSO3         Transaction Type offset
         LTR   R1,R1               Transaction Type offset ?
         BNP   DAF059IT            . No - invalid triplet
         LH    R1,W_SMFSL3         Transaction Type length
         LTR   R1,R1               Transaction Type length ?
         BNP   DAF059IT            . No - invalid triplet
         LH    R1,W_SMFSN3         Transaction Type number
         LTR   R1,R1               Transaction Type number ?
         BNP   DAF059IT            . No - invalid triplet
         L     R6,W_SMFBAS         Set SMF record base
         A     R6,W_SMFSO3         Add Transaction Type offset
TT       USING SMF59TTS,R6         Transaction Type reference
         MVC   W_SMFSO4,SMF59OTD   Transaction Data offset
         MVC   W_SMFSL4,SMF59LTD   Transaction Data length
         MVC   W_SMFSN4,SMF59NTD   Transaction Data number
         L     R1,W_SMFSO4         Transaction Data offset
         LTR   R1,R1               Transaction Data offset ?
         BNP   DAF059IT            . No - invalid triplet
         LH    R1,W_SMFSL4         Transaction Data length
         LTR   R1,R1               Transaction Data length ?
         BNP   DAF059IT            . No - invalid triplet
         LH    R1,W_SMFSN4         Transaction Data number
         LTR   R1,R1               Transaction Data number ?
         BNP   DAF059IT            . No - invalid triplet
         L     R7,W_SMFBAS         Set SMF record base
         A     R7,W_SMFSO4         Add Transaction Data offset
TD       USING SMF59TRD,R7         Transaction Data reference
         CLC   SMF59TID,=C'FF'     File to File ?
         BNE   DAF0594             . No, bypass the record
         MVC   W_USER,SMF59TSU     User identification
         CLC   SMF59OFG,=C'D'      Origin DD Dummy ?
         BNE   E59ONUL1            . No, origin is a real dataset
         MVC   W_DSN1,=CL044'NULLFILE' Origin is NULLFILE
         B     E59ONUL2            Continue
E59ONUL1 EQU   *
         MVC   W_DSN1,SMF59OFN     Origin dataset
         MVC   W_MEMBER1,SMF59OMN  Origin member
         CALL  DAFMC,              Move Comment                        X
               (=C'OMN=',W_MEMBER1,8), Origin member                   X
               MF=(E,W_WRK)
         MVC   W_VOL1,SMF59OVI     Origin volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'OVI=',W_VOL1,6), Origin volume serial               X
               MF=(E,W_WRK)
E59ONUL2 EQU   *
         MVC   W_DSN2,SMF59DFN     Destination dataset
         CALL  DAFMC,              Move Comment                        X
               (=C'DFN=',W_DSN2,44), Destination dataset               X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DMN=',SMF59DMN,8), Destination member               X
               MF=(E,W_WRK)
         MVC   W_VOL2,SMF59DVI     Destination volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'DVI=',W_VOL2,6), Destination volume serial          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'ONN=',SMF59ONN,8), Origin node name                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DNN=',SMF59DNN,8), Destination node name            X
               MF=(E,W_WRK)
         MVC   W_JOB1,SMF59BJN     Job name
         CALL  DAFCC               Check criteria
         MVC   W_USER,SMF59TSU     User identification
         CLC   SMF59DFG,=C'D'      Destination DD Dummy ?
         BNE   E59DNUL1            . No, check for internal reader
         MVC   W_DSN1,=CL044'NULLFILE' Destination is NULLFILE
         B     E59DNUL3            Continue
E59DNUL1 EQU   *
         CLC   SMF59DFG,=C'I'      Destination internal reader ?
         BNE   E59DNUL2            . No, destination is a real dataset
         MVC   W_DSN1,=CL044'INTRDR' Destination is INTRDR
         B     E59DNUL3            Continue
E59DNUL2 EQU   *
         MVC   W_DSN1,SMF59DFN     Destination dataset
         MVC   W_MEMBER1,SMF59DMN  Destination member
         CALL  DAFMC,              Move Comment                        X
               (=C'DMN=',W_MEMBER1,8), Destination member              X
               MF=(E,W_WRK)
         MVC   W_VOL1,SMF59DVI     Destination volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'DVI=',W_VOL1,6), Destination volume serial          X
               MF=(E,W_WRK)
E59DNUL3 EQU   *
         MVC   W_DSN2,SMF59OFN     Origin dataset
         CALL  DAFMC,              Move Comment                        X
               (=C'OFN=',W_DSN2,44), Origin dataset                    X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'OMN=',SMF59OMN,8), Origin member                    X
               MF=(E,W_WRK)
         MVC   W_VOL2,SMF59OVI     Origin volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'OVI=',W_VOL2,6), Origin volume serial               X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'ONN=',SMF59ONN,8), Origin node name                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DNN=',SMF59DNN,8), Destination node name            X
               MF=(E,W_WRK)
         MVC   W_JOB1,SMF59BJN     Job name
         B     DAF0590             Return to caller
         DROP  R3                  SMF record dereference
         DROP  PD                  Product dereference
         DROP  TI                  Transaction Id dereference
         DROP  TT                  Transaction Type dereference
         DROP  TD                  Transaction Data dereference
*
**       Invalid Triplet
*
DAF059IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0594             Exit, no check
DAF059   $EXIT                     Exit
.NOBDT5        ANOP
         TITLE 'DAF060 - VSAM Volume Data Set Updated'
DAF060   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_DSN1,SMF60ENM     Dataset 1
         MVC   W_JOB1,SMF60JNM     Job name
         MVC   W_USER,SMF60UID     User identification
         MVC   W_VVDS,SMF60CNM     VVDS name
         L     R14,=A(T6XSUB)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF60SUB),   Subtype                             X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'VVDS=',W_VVDS,44), VVDS name                        X
               MF=(E,W_WRK)
         L     R14,=A(T6XTYP)      Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF60TYP),   Type                                X
               MF=(E,W_WRK)
         CALL  DSOTYP,             Process DSORG in the SMF6XTYP       X
               (SMF60TYP,W_DSORG),                                     X
               MF=(E,W_WRK)
         DROP  R3                  SMF record dereference
DAF060   $EXIT                     Exit
         TITLE 'DAF061 - Integrated Catalog Facility Define Activity'
DAF061   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_DSN1,SMF61ENM     Dataset 1
         MVC   W_JOB1,SMF61JNM     Job name
         MVC   W_USER,SMF61UID     User identification
         MVC   W_CATALOG,SMF61CNM  Catalog name
         L     R14,=A(T6XSUB)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF61SUB),   Subtype                             X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CAT=',W_CATALOG,44), Catalog name                   X
               MF=(E,W_WRK)
         L     R14,=A(T6XTYP)      Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF61TYP),   Type                                X
               MF=(E,W_WRK)
         CALL  DSOTYP,             Process DSORG in the SMF6XTYP       X
               (SMF61TYP,W_DSORG),                                     X
               MF=(E,W_WRK)
         DROP  R3                  SMF record dereference
DAF061   $EXIT                     Exit
         TITLE 'DAF062 - VSAM Component or Cluster Opened'
DAF062   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_DSN1,SMF62DNM     Dataset 1
         MVC   W_JOB1,SMF62JBN     Job name
         MVC   W_USER,SMF62UIF     User identification
         CALL  DAFPV,              Volume Serials                      X
               (SMF62VCT,2,SMF62VSR,0,10),                             X
               MF=(E,W_WRK)
         MVC   W_CATALOG,SMF62CNM  Catalog name
         L     R14,=A(T62IND)      SMF62IND
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF62IND),   SMF62IND                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CAT=',W_CATALOG,44), Catalog name                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CVS=',SMF62CVS,6), Catalog volume serial            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'VCT=',SMF62VCT,2), Volumes                          X
               MF=(E,W_WRK)
         DROP  R3                  SMF record dereference
DAF062   $EXIT                     Exit
         TITLE 'DAF063 - VSAM Catalog Entry Defined'
DAF063   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_DSN1,SMF63ENM     Dataset 1
         MVC   W_JOB1,SMF63JBN     Job name
         MVC   W_USER,SMF63UIF     User identification
         MVC   W_CATALOG,SMF63CNM  Catalog name
         L     R14,=A(T63FDT)      SMF63FDT
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF63FDT),   SMF63FDT                            X
               MF=(E,W_WRK)
         L     R14,=A(T6XIOD)      SMF63TYP
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF63TYP),   SMF63TYP                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CAT=',W_CATALOG,44), Catalog name                   X
               MF=(E,W_WRK)
         DROP  R3                  SMF record dereference
DAF063   $EXIT                     Exit
         TITLE 'DAF064 - VSAM Component or Cluster Status'
**********************************************************************
*  Notes:          If DDN is blank, do not use it                    *
*                  Bypass MSTJCL00 STGINDEX - DSN low values         *
**********************************************************************
DAF064   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_DSN1,SMF64DNM     Dataset
         MVC   W_JOB1,SMF64JBN     Job name
         MVC   W_USER,SMF64UIF     User identification
         MVC   W_DSORG,=CL003'VS'  DSORG
         LH    R1,SMF64ESL         Extent length
         XR    R0,R0               Clear
         D     R0,=F'26'           Determine volume serial count
         ST    R1,W_FULL1          Volume serial count
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'VOL=',W_FULL1,4), Volume serial count               X
               MF=(E,W_WRK)
         CALL  DAFPV,              Volume Serials                      X
               (W_FULL1,4,SMF64FCC,8,26),                              X
               MF=(E,W_WRK)
         LA    R4,SMF64ESL
         AH    R4,SMF64ESL
         AH    R4,=H'2'
         DROP  R3                  SMF record dereference
         USING SMF64STS,R4         Statistics reference
         CLC   SMF64DDN,=CL008' '  Blank Data definition name ?
         BE    E64NODDN            . Yes
         MVC   W_DD,SMF64DDN       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         DROP  R4                  statistics dereference
         USING D_SMFREC,R3         SMF record reference
E64NODDN EQU   *
         MVC   W_CATALOG,SMF64CNM  Catalog
         CALL  DAFMC,              Catalog                             X
               (=C'CAT=',W_CATALOG,44),                                X
               MF=(E,W_WRK)
         L     R14,=A(T64RIN)      SMF64RIN
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF64RIN),   SMF64RIN                            X
               MF=(E,W_WRK)
         L     R14,=A(T64DTY)      SMF64DTY
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF64DTY),   SMF64DTY                            X
               MF=(E,W_WRK)
         DROP  R3                  SMF record dereference
         USING SMF64STS,R4         Statistics reference
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NIL=',SMF64NIL,4), Prior levels                     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NEX=',SMF64NEX,4), Prior extents                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NLR=',SMF64NLR,4), Prior records                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NDE=',SMF64NDE,4), Prior deletes                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NIN=',SMF64NIN,4), Prior inserts                    X
               MF=(E,W_WRK)
         MVC   W_NUP,SMF64NUP      NUP
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NUP=',SMF64NUP,4), Prior updates                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NRE=',SMF64NRE,4), Prior retrieves                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NFS=',SMF64NFS,4), Prior unused ci's                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NCS=',SMF64NCS,4), Prior ci splits                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NAS=',SMF64NAS,4), Prior ca splits                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NEP=',SMF64NEP,4), Prior EXCPs                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DIL=',SMF64DIL,4), Change levels                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DEX=',SMF64DEX,4), Change extents                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DLR=',SMF64DLR,4), Change records                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DDE=',SMF64DDE,4), Change deletes                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DIN=',SMF64DIN,4), Change inserts                   X
               MF=(E,W_WRK)
         MVC   W_DUP,SMF64DUP      DUP
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DUP=',SMF64DUP,4), Change updates                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DRE=',SMF64DRE,4), Change retrieves                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DFS=',SMF64DFS,4), Change unused ci's               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DCS=',SMF64DCS,4), Change ci splits                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DAS=',SMF64DAS,4), Change ca splits                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DEP=',SMF64DEP,4), Change EXCPs                     X
               MF=(E,W_WRK)
         MVC   W_EXCP,SMF64DEP     EXCP
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DBS=',SMF64DBS,4), Physical blocksize               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DCI=',SMF64DCI,4), Control interval size            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DLS=',SMF64DLS,4), Maximum logical recordsize       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DKL=',SMF64DKL,2), Key length                       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'STR=',SMF64STR,1), Strings specified                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BNO=',SMF64BNO,1), Buffers specified                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BSP=',SMF64BSP,4), Bufferspace                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BFD=',SMF64BFD,2), Data buffers                     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BFI=',SMF64BFI,2), Index buffers                    X
               MF=(E,W_WRK)
         MVC   W_DSN2,SMF64CLN     Cluster name
         CALL  DAFMC,              Cluster name                        X
               (=C'CLN=',SMF64CLN,44),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'PLH=',SMF64PLH,2), Concurrent strings               X
               MF=(E,W_WRK)
         L     R14,=A(T64MC1)      SMF64MC1
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF64MC1),   SMF64MC1                            X
               MF=(E,W_WRK)
         L     R14,=A(T64MC2)      SMF64MC2
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF64MC2),   SMF64MC2                            X
               MF=(E,W_WRK)
         L     R14,=A(T64MC3)      SMF64MC3
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF64MC3),   SMF64MC3                            X
               MF=(E,W_WRK)
         DROP  R4                  Statistics dereference
DAF064   $EXIT                     Exit
         TITLE 'DAF065 - Integrated Catalog Facility Delete Activity'
DAF065   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_DSN1,SMF65ENM     Dataset 1
         MVC   W_JOB1,SMF65JNM     Job name
         MVC   W_USER,SMF65UID     User identification
         MVC   W_CATALOG,SMF65CNM  Catalog name
         L     R14,=A(T6XSUB)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF65SUB),   Subtype                             X
               MF=(E,W_WRK)
         L     R14,=A(T6XFNC)      Function
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF65FNC),   Function                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CAT=',W_CATALOG,44), Catalog name                   X
               MF=(E,W_WRK)
         L     R14,=A(T6XTYP)      Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF65TYP),   Type                                X
               MF=(E,W_WRK)
         CALL  DSOTYP,             Process DSORG in the SMF6XTYP       X
               (SMF65TYP,W_DSORG),                                     X
               MF=(E,W_WRK)
         DROP  R3                  SMF record dereference
DAF065   $EXIT                     Exit
         TITLE 'DAF066 - Integrated Catalog Facility Alter Activity'
DAF066   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_DSN1,SMF66ENM     Old dataset name
         MVC   W_JOB1,SMF66JNM     Job name
         MVC   W_USER,SMF66UID     User identification
         MVC   W_CATALOG,SMF66CNM  Catalog name
         L     R14,=A(T6XSUB)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF66SUB),   Subtype                             X
               MF=(E,W_WRK)
         L     R14,=A(T6XTYP)      Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF66TYP),   Type                                X
               MF=(E,W_WRK)
         CALL  DSOTYP,             Process DSORG in the SMF6XTYP       X
               (SMF66TYP,W_DSORG),                                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'ENM=',SMF66ENM,44), Old dataset name                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CAT=',W_CATALOG,44), Catalog name                   X
               MF=(E,W_WRK)
         CLC   SMF66FNC,=C'R'      Rename ?
         BNE   DAF0660             . Get out
         MVC   W_DSN2,SMF66NNM     New dataset name
         CALL  DAFMC,              Move Comment                        X
               (=C'NNM=',SMF66NNM,44), New name                        X
               MF=(E,W_WRK)
         MVC   W_CMTCLR,=C'N'      Do not clear comment area
         CALL  DAFCC               Check criteria
         MVC   W_DSN1,SMF66NNM     New dataset name
         MVC   W_DSN2,SMF66ENM     Old dataset name
         DROP  R3                  SMF record dereference
DAF066   $EXIT                     Exit
         TITLE 'DAF067 - VSAM Catalog Entry Deleted'
DAF067   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_DSN1,SMF67DEN     Dataset 1
         MVC   W_JOB1,SMF67JBN     Job name
         MVC   W_USER,SMF67UIF     User identification
         MVC   W_CATALOG,SMF67CNM  Catalog name
         L     R14,=A(T67FDT)      SMF67FDT
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF67FDT),   SMF67FDT                            X
               MF=(E,W_WRK)
         L     R14,=A(T6XIOD)      SMF67IOD
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF67IOD),   SMF67IOD                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CAT=',W_CATALOG,44), Catalog name                   X
               MF=(E,W_WRK)
         DROP  R3                  SMF record dereference
DAF067   $EXIT                     Exit
         TITLE 'DAF068 - VSAM Catalog Entry Renamed'
DAF068   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_DSN1,SMF68ONM     Old dataset name
         CALL  DAFMC,              Move Comment                        X
               (=C'ONM=',SMF68ONM,44), Old DSN                         X
               MF=(E,W_WRK)
         MVC   W_JOB1,SMF68JBN     Job name
         MVC   W_USER,SMF68UIF     User identification
         MVC   W_DSN2,SMF68NNM     New dataset name
         CALL  DAFMC,              Move Comment                        X
               (=C'NNM=',SMF68NNM,44), New dataset name                X
               MF=(E,W_WRK)
         MVC   W_CATALOG,SMF68CNM  Catalog name
         CALL  DAFMC,              Move Comment                        X
               (=C'CAT=',W_CATALOG,44), Catalog name                   X
               MF=(E,W_WRK)
         MVC   W_CMTCLR,=C'N'      Do not clear comment area
         CALL  DAFCC               Check criteria
         MVC   W_DSN1,SMF68NNM     New dataset name
         MVC   W_DSN2,SMF68ONM     Old dataset name
         DROP  R3                  SMF record dereference
DAF068   $EXIT                     Exit
         TITLE 'DAF069 - VSAM Data Space Defined, Extended or Deleted'
DAF069   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_DSN1,SMF69CNM     Dataset 1
         MVC   W_JOB1,SMF69JBN     Job name
         MVC   W_USER,SMF69UIF     User identification
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,SMF69VSR,0,6),                                 X
               MF=(E,W_WRK)
         MVC   W_CATALOG,SMF69CNM  Catalog name
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NDS=',SMF69NDS,2), Free extents                     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NUC=',SMF69NUC,2), Free cylinders                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NUT=',SMF69NUT,2), Free tracks                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'LNC=',SMF69LNC,2), Continuous cylinders             X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'LNT=',SMF69LNT,2), Continuous tracks                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CAT=',W_CATALOG,44), Catalog name                   X
               MF=(E,W_WRK)
         DROP  R3                  SMF record dereference
DAF069   $EXIT                     Exit
         AIF   ('&RT_RMF' EQ '000').NORMF5
         TITLE 'DAF073 - RMF Channel Path Activity'
DAF073   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(01)   Channel Path Activity ?
         BE    E073T01             . Yes
         B     DAF0734             Exit, no check
         DROP  R3                  SMF record dereference
*
**       Subtype 01 - Channel Path Activity
*
E073T01  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF73HDR,R3         SMF record reference
         MVC   W_SMFSO1,SMF73HIS   Channel Control offset
         MVC   W_SMFSL1,SMF73HIL   Channel Control length
         MVC   W_SMFSN1,SMF73HIN   Channel Control number
         L     R1,W_SMFSO1         Channel Control offset
         LTR   R1,R1               Channel Control offset ?
         BNP   DAF073IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Channel Control length
         LTR   R1,R1               Channel Control length ?
         BNP   DAF073IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Channel Control number
         LTR   R1,R1               Channel Control number ?
         BNP   DAF073IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Channel Control offset
         USING SMF73CTL,R4         Channel Control reference
         MVC   W_JOB1,=CL008'RMF'  Job name
         MVC   W_USER,=CL008'RMF'  User identification
         L     R14,=A(T73CFL)      T73CFL
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF73CFL),   SMF73CFL                            X
               MF=(E,W_WRK)
         L     R14,=A(T73SFL)      T73SFL
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF73SFL),   SMF73SFL                            X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMF73TNM     Dataset 1
         CALL  DAFMC,              Move Comment                        X
               (=C'TSF=',SMF73TSF,2), IODF name suffix                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TOK=',SMF73TOK,16), Partial token information       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TDT=',SMF73TDT,8), IODF creation date               X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TTM=',SMF73TTM,8), IODF creation time               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CRC=',SMF73CRC,4), CPMF restart count               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CSC=',SMF73CSC,4), Last CPMF sample count           X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TDY=',SMF73TDY,10), IODF creation date              X
               MF=(E,W_WRK)
         L     R14,=A(T73CMI)      T73CMI
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF73CMI),   SMF73CMI                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CSS=',SMF73CSS,1), Channel subsystem id             X
               MF=(E,W_WRK)
         B     DAF0730             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Channel Control dereference
*
**       Invalid Triplet
*
DAF073IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0734             Exit, no check
DAF073   $EXIT                     Exit
         TITLE 'DAF074 - RMF Activity of Several Resources'
DAF074   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(01)   Device activity ?
         BE    E074T01             . Yes
         CLC   SMFNNSTY,=AL2(06)   HFS Statistics ?
         BE    E074T06             . Yes
         CLC   SMFNNSTY,=AL2(07)   FICON Director Statistics ?
         BE    E074T07             . Yes
         B     DAF0744             Exit - No criteria check
         DROP  R3                  SMF record dereference
*
**       Subtype 01 - Device activity
*
E074T01  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF74HDR,R3         SMF record reference
         MVC   W_SMFSO1,SMF74DCS   Device Control Data offset
         MVC   W_SMFSL1,SMF74DCL   Device Control Data length
         MVC   W_SMFSN1,SMF74DCN   Device Control Data number
         L     R1,W_SMFSO1         Device Control Data offset
         LTR   R1,R1               Device Control Data offset ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Device Control Data length
         LTR   R1,R1               Device Control Data length ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Device Control Data number
         LTR   R1,R1               Device Control Data number ?
         BNP   DAF074IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Device Control Data offset
         USING SMF74A,R4           Device Control Data reference
         MVC   W_JOB1,=CL008'RMF'  Job name
         MVC   W_USER,=CL008'RMF'  User identification
         MVC   W_DSN1,SMF74TNM     Dataset 1
         CALL  DAFMC,              Move Comment                        X
               (=C'TSF=',SMF74TSF,2), IODF name suffix                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TOK=',SMF74TOK,16), Partial token information       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TDY=',SMF74TDY,10), IODF creation date              X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TTM=',SMF74TTM,9), IODF creation time               X
               MF=(E,W_WRK)
         B     DAF0740             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Device Control Data dereference
*
**       Subtype 06 - HFS Statistics
*
E074T06  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF74HDR,R3         SMF record reference
         MVC   W_SMFSO1,SMF746DO   Global Data offset
         MVC   W_SMFSL1,SMF746DL   Global Data length
         MVC   W_SMFSN1,SMF746DN   Global Data number
         L     R1,W_SMFSO1         Global Data offset
         LTR   R1,R1               Global Data offset ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Global Data length
         LTR   R1,R1               Global Data length ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Global Data number
         LTR   R1,R1               Global Data number ?
         BNP   DAF074IT            . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Global Data
         USING R746GDAT,R4         Global Data reference
         MVC   W_SMFSO2,SMF746BO   Global Buffer offset
         MVC   W_SMFSL2,SMF746BL   Global Buffer length
         MVC   W_SMFSN2,SMF746BN   Global Buffer number
         L     R1,W_SMFSO2         Global Buffer offset
         LTR   R1,R1               Global Buffer offset ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Global Buffer length
         LTR   R1,R1               Global Buffer length ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Global Buffer number
         LTR   R1,R1               Global Buffer number ?
         BNP   DAF074IT            . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address Global Buffer
         USING R746GBUF,R5         Global Buffer reference
         MVC   W_SMFSO3,SMF746FO   File System Data offset
         MVC   W_SMFSL3,SMF746FL   File System Data length
         MVC   W_SMFSN3,SMF746FN   File System Data number
         L     R1,W_SMFSO3         File System Data offset
         LTR   R1,R1               File System Data offset ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSL3         File System Data length
         LTR   R1,R1               File System Data length ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSN3         File System Data number
         LTR   R1,R1               File System Data number ?
         BP    E074T06C            . Yes - continue
         TM    W_FLAG,W_F$HFS      HFS flag on ?
         BNO   E074T06M            . No
         B     DAF0744             Exit - No criteria check
E074T06M EQU   *
         OI    W_FLAG,W_F$HFS      Turn on HFS flag
         $MSG  W_LOG,DAF531W       Move message template
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAF0744             Exit - No criteria check
E074T06C EQU   *
         L     R6,W_SMFBAS         Address SMF record
         A     R6,W_SMFSO3         Address File System Data
         USING R746FSYS,R6         File System Data reference
         MVC   W_DSN1,R746FSNM     Dataset name
         B     DAF0740             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  SMF record dereference
         DROP  R5                  SMF record dereference
         DROP  R6                  SMF record dereference
*
**       Subtype 07 - FICON Director Statistics
*
E074T07  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF74HDR,R3         SMF record reference
         MVC   W_SMFSO1,SMF747GO   FCD Global Data offset
         MVC   W_SMFSL1,SMF747GL   FCD Global Data length
         MVC   W_SMFSN1,SMF747GN   FCD Global Data number
         L     R1,W_SMFSO1         FCD Global Data offset
         LTR   R1,R1               FCD Global Data offset ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSL1         FCD Global Data length
         LTR   R1,R1               FCD Global Data length ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSN1         FCD Global Data number
         LTR   R1,R1               FCD Global Data number ?
         BNP   DAF074IT            . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address FCD Global Data
         USING R747GDAT,R4         FCD Global Data reference
         MVC   W_SMFSO2,SMF747SO   FCD Switch Data offset
         MVC   W_SMFSL2,SMF747SL   FCD Switch Data length
         MVC   W_SMFSN2,SMF747SN   FCD Switch Data number
         L     R1,W_SMFSO2         FCD Switch Data offset
         LTR   R1,R1               FCD Switch Data offset ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSL2         FCD Switch Data length
         LTR   R1,R1               FCD Switch Data length ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSN2         FCD Switch Data number
         LTR   R1,R1               FCD Switch Data number ?
         BNP   DAF074IT            . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address FCD Switch Data
         USING R747SDAT,R5         FCD Switch Data reference
         MVC   W_SMFSO3,SMF747PO   FCD Port Data offset
         MVC   W_SMFSL3,SMF747PL   FCD Port Data length
         MVC   W_SMFSN3,SMF747PN   FCD Port Data number
         L     R1,W_SMFSO3         FCD Port Data offset
         LTR   R1,R1               FCD Port Data offset ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSL3         FCD Port Data length
         LTR   R1,R1               FCD Port Data length ?
         BNP   DAF074IT            . No - invalid triplet
*        LH    R1,W_SMFSN3         FCD Port Data number
*        LTR   R1,R1               FCD Port Data number ?
*        BNP   DAF074IT            . No - invalid triplet
         L     R6,W_SMFBAS         Address SMF record
         A     R6,W_SMFSO3         Address FCD Port Data
         USING R747PDAT,R6         FCD Port Data reference
         MVC   W_SMFSO4,SMF747CO   FCD Connector Data offset
         MVC   W_SMFSL4,SMF747CL   FCD Connector Data length
         MVC   W_SMFSN4,SMF747CN   FCD Connector Data number
         L     R1,W_SMFSO4         FCD Connector Data offset
         LTR   R1,R1               FCD Connector Data offset ?
         BNP   DAF074IT            . No - invalid triplet
         LH    R1,W_SMFSL4         FCD Connector Data length
         LTR   R1,R1               FCD Connector Data length ?
         BNP   DAF074IT            . No - invalid triplet
*        LH    R1,W_SMFSN4         FCD Connector Data number
*        LTR   R1,R1               FCD Connector Data number ?
*        BNP   DAF074IT            . No - invalid triplet
         L     R7,W_SMFBAS         Address SMF record
         A     R7,W_SMFSO4         Address FCD Connector Data
         USING R747CDAT,R7         FCD Connector Data reference
         MVC   W_JOB1,=CL008'RMF'  Job name
         MVC   W_USER,=CL008'RMF'  User identification
*
**       Process FCD Global Data
*
         L     R14,=A(T747GCFL)    T747GCFL
         CALL  DAFPT,              Process TM Table                    X
               ((R14),R747GCFL),   R747GCFL                            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'GNFD=',R747GNFD,2), # of installed FCD switches     X
               MF=(E,W_WRK)
         MVC   W_DSN1,R747GINM     IODF name
         CALL  DAFMC,              Move Comment                        X
               (=C'GISF=',R747GISF,2), IODF name suffix                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'GICD=',R747GICD,10), IODF creation date mm/dd/yyyy  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'GICT=',R747GICT,8), IODF creation time hh.mm.ss     X
               MF=(E,W_WRK)
*
**       Process FCD Switch Data
*
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SDEV=',R747SDEV,2), Switch device number            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SLSN=',R747SLSN,1), Logical switch number           X
               MF=(E,W_WRK)
         L     R14,=A(T747SPFL)    T747SPFL
         CALL  DAFPT,              Process TM Table                    X
               ((R14),R747SPFL),   R747SPFL                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SND=',R747SND,32), ND associated with switch device X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SNSP=',R747SNSP,2), Number of supported ports       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SNIP=',R747SNIP,2), Number of installed ports       X
               MF=(E,W_WRK)
*
**       Process FCD Port Data
*
**********************************************************************
*  Notes:          Only processes one section                        *
**********************************************************************
         LH    R1,W_SMFSN3         Section number
         LTR   R1,R1               Section number ?
         BNP   DAF074PX            . No - skip this section
         CALL  DAFMC,              Move Comment                        X
               (=C'PNUM=',R747PNUM,1), Port number                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'PADR=',R747PADR,1), Port address                    X
               MF=(E,W_WRK)
         L     R14,=A(T747PTFL)    T747PTFL
         CALL  DAFPT,              Process TM Table                    X
               ((R14),R747PTFL),   R747PTFL                            X
               MF=(E,W_WRK)
         L     R14,=A(T747PSFL)    T747PSFL
         CALL  DAFPT,              Process TM Table                    X
               ((R14),R747PSFL),   R747PSFL                            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'PCU=',R747PCU,2), Connector id (CU)                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'PCUN=',R747PCUN,1), Number of connector CUs         X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'PNPC=',R747PNPC,1), Number of connector sections    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'PXPC=',R747PXPC,2), Index of first connector sectio X
               MF=(E,W_WRK)
DAF074PX EQU   *
*
**       Process FCD Connector Data
*
**********************************************************************
*  Notes:          Only processes one section                        *
**********************************************************************
         LH    R1,W_SMFSN4         Section number
         LTR   R1,R1               Section number ?
         BNP   DAF074CX            . No - skip this section
         CALL  DAFMC,              Move Comment                        X
               (=C'CNUM=',R747CNUM,1), Port number                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CADR=',R747CADR,1), Port address                    X
               MF=(E,W_WRK)
         L     R14,=A(T747CTFL)    T747CTFL
         CALL  DAFPT,              Process TM Table                    X
               ((R14),R747CTFL),   R747CTFL                            X
               MF=(E,W_WRK)
         L     R14,=A(T747CSFL)    T747CSFL
         CALL  DAFPT,              Process TM Table                    X
               ((R14),R747CSFL),   R747CSFL                            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CCU=',R747CCU,2), Connector id (CU)                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CCUN=',R747CCUN,1), Number of connector CUs         X
               MF=(E,W_WRK)
DAF074CX EQU   *
         B     DAF0740             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  SMF record dereference
         DROP  R5                  SMF record dereference
         DROP  R6                  SMF record dereference
         DROP  R7                  SMF record dereference
*
**       Invalid Triplet
*
DAF074IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0744             Exit, no check
DAF074   $EXIT                     Exit
         TITLE 'DAF075 - RMF Page Data Set Activity'
DAF075   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(01)   Page Data Set Activity ?
         BE    E075T01             . Yes
         B     DAF0754             Exit, no check
         DROP  R3                  SMF record dereference
*
**       Subtype 01 - Page Data Set Activity
*
E075T01  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF75HDR,R3         SMF record reference
         MVC   W_SMFSO1,SMF75PSS   Page Dataset offset
         MVC   W_SMFSL1,SMF75PSL   Page Dataset length
         MVC   W_SMFSN1,SMF75PSN   Page Dataset number
         L     R1,W_SMFSO1         Page Dataset offset
         LTR   R1,R1               Page Dataset offset ?
         BNP   DAF075IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Page Dataset length
         LTR   R1,R1               Page Dataset length ?
         BNP   DAF075IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Page Dataset number
         LTR   R1,R1               Page Dataset number ?
         BNP   DAF075IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Page Dataset offset
         USING SMF75PSD,R4         Page Dataset reference
         MVC   W_JOB1,=CL008'RMF'  Job name
         MVC   W_USER,=CL008'RMF'  User identification
         MVC   W_DSN1,SMF75DSN     Dataset name
         L     R14,=A(T75PST)      Page space type
         CALL  DAFPT,              Page space type                     X
               ((R14),SMF75PST),                                       X
               MF=(E,W_WRK)
         L     R14,=A(T75FL2)      Flags
         CALL  DAFPT,              Flags                               X
               ((R14),SMF75FL2),                                       X
               MF=(E,W_WRK)
         $HEX  W_DOUBLE,SMF75TYP,LEN=4 Unit type
         CALL  DAFMC,              Unit type                           X
               (=C'TYP=',W_DOUBLE,8),                                  X
               MF=(E,W_WRK)
         $HEX  W_FULL1,SMF75CHA,LEN=2 Device number
         CALL  DAFMC,              Device number                       X
               (=C'CHA=',W_FULL1,4),                                   X
               MF=(E,W_WRK)
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,SMF75VOL,0,6),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Available slots                     X
               (=C'SLA=',SMF75SLA,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Maximum slots used                  X
               (=C'MXU=',SMF75MXU,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Minimum slots used                  X
               (=C'MNU=',SMF75MNU,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Average slots used                  X
               (=C'AVU=',SMF75AVU,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Unusable slots                      X
               (=C'BDS=',SMF75BDS,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Used samples                        X
               (=C'USE=',SMF75USE,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Requests                            X
               (=C'REQ=',SMF75REQ,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              I/O requests                        X
               (=C'SIO=',SMF75SIO,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Pages transferred                   X
               (=C'PGX=',SMF75PGX,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Device name                         X
               (=C'DEV=',SMF75DEV,8),                                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Control unit name                   X
               (=C'CU=',SMF75CU,8),                                    X
               MF=(E,W_WRK)
         B     DAF0750             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Page Dataset dereference
*
**       Invalid Triplet
*
DAF075IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0754             Exit, no check
DAF075   $EXIT                     Exit
         TITLE 'DAF077 - RMF Enqueue Activity'
**********************************************************************
*  Notes:          Bypass if no contention this interval             *
**********************************************************************
DAF077   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(01)   Enqueue Activity ?
         BE    E077T01             . Yes
         B     DAF0774             Exit, no check
         DROP  R3                  SMF record dereference
*
**       Subtype 01 - Enqueue Activity
*
E077T01  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF77HDR,R3         SMF record reference
         MVC   W_SMFSO1,SMF77EQS   Enqueue Control offset
         MVC   W_SMFSL1,SMF77EQL   Enqueue Control length
         MVC   W_SMFSN1,SMF77EQN   Enqueue Control number
         L     R1,W_SMFSO1         Enqueue Control offset
         LTR   R1,R1               Enqueue Control offset ?
         BNP   DAF077IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Enqueue Control length
         LTR   R1,R1               Enqueue Control length ?
         BNP   DAF077IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Enqueue Control number
         LTR   R1,R1               Enqueue Control number ?
         BNP   DAF077IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Enqueue Control offset
         USING SMF77CTL,R4         Enqueue Control reference
         MVC   W_SMFSO2,SMF77EDS   Enqueue Data offset
         MVC   W_SMFSL2,SMF77EDL   Enqueue Data length
         MVC   W_SMFSN2,SMF77EDN   Enqueue Data number
         L     R1,W_SMFSO2         Enqueue Data offset
         LTR   R1,R1               Enqueue Data offset ?
         BNP   DAF077IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Enqueue Data length
         LTR   R1,R1               Enqueue Data length ?
         BNP   DAF077IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Enqueue Data number
         LTR   R1,R1               Enqueue Data number ?
         BNP   DAF0774             . No - No contention this interval
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add Enqueue Data offset
         USING SMF77ENQ,R5         Enqueue Data reference
         LH    R6,W_SMFSN2         Enqueue Data count
E77DTANX EQU   *
*
**       Major Enqueue Name
*
         CALL  DAFMC,              Move Comment                        X
               (=C'QNM=',SMF77QNM,8), Major Enqueue Name               X
               MF=(E,W_WRK)
         LA    R15,MAJORNUM        Major table size
         L     R14,=A(TBLMAJOR)    Major table address
         MVI   W_CHKDSN,C'N'       Dataset - No
E77CKMAJ EQU   *
         CLC   SMF77QNM,1(R14)     Major match ?
         BE    E77OKMAJ            . Yes
         LA    R14,MAJORLEN(R14)   Next major
         BCT   R15,E77CKMAJ        Process next major, if any
E77OKMAJ EQU   *
         MVC   W_MAJDES,9(R14)     Move major enqueue description
         CLI   0(R14),C'Y'         Dataset ?
         BNE   E77NODSN            . No
E77DSN   EQU   *
         MVC   W_DSN1,SMF77RNM     Dataset 1
         MVI   W_CHKDSN,C'Y'       Dataset - Yes
         B     E77DSNYES           Continue
E77NODSN EQU   *
*        MVC   W_DSN1,SMF77RNM     Dataset 1
         CLC   SMF77RLN,=AL1(44)   Minor resource length 44 ?
         BNE   E77NOL44            . No, continue
         CLC   SMF77QNM,=CL8'SYSVSAM' Major name SYSVSAM ?
         BE    E77NOL44            . Yes, continue
         CLC   SMF77QNM,=CL8'SYSZVVDS' Major name SYSZVVDS ?
         BE    E77DSN              . Yes, it is a catalog name
         $MSG  W_LOG,DAF630I       Move message template
         MVC   W_LOG+38(L'SMF77QNM),SMF77QNM Major queue name
         MVC   W_LOG+51(L'SMF77RNM),SMF77RNM Minor enqueue name
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
E77DSNYES EQU  *
E77NOL44 EQU  *
         CALL  DAFMC,              Move Binary Comment                 X
               (=C'NONE',W_MAJDES,32), Major Enqueue Description       X
               MF=(E,W_WRK)
         L     R14,=A(T77DFG)      SMF77DFG
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF77DFG),   SMF77DFG                            X
               MF=(E,W_WRK)
         MVC   W_JOB2,SMF77DO1     Resource owning job name 1
         MVC   W_JOB3,SMF77DO2     Resource owning job name 2
         MVC   W_JOB4,SMF77DW1     Resource waiting job name 1
         MVC   W_JOB5,SMF77DW2     Resource waiting job name 2
         MVC   W_MAJOR,SMF77QNM    Major enqueue name
         MVC   W_MINOR,SMF77RNM    Minor enqueue name
         CALL  DAFMC,              Move Binary Comment                 X
               (=C'RNM=',W_MINOR,44), Minor Enqueue Description        X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'RLN=',SMF77RLN,1), Minor resource length            X
               MF=(E,W_WRK)
         ICM   R15,B'1111',SMF77WTM Minimum resource contention time
         SRL   R15,10              Convert 1024th into seconds
         STCM  R15,B'1111',SMF77WTM Minimum resource contention time
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'WTM=',SMF77WTM,4), Minimum resource contention time X
               MF=(E,W_WRK)
         ICM   R15,B'1111',SMF77WTX Maximum resource contention time
         SRL   R15,10              Convert 1024th into seconds
         STCM  R15,B'1111',SMF77WTX Maximum resource contention time
         MVC   W_WTX,SMF77WTX      Maximum resource contention time
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'WTX=',SMF77WTX,4), Maximum resource contention time X
               MF=(E,W_WRK)
         ICM   R15,B'1111',SMF77WTT Total resource contention time
         SRL   R15,10              Convert 1024th into seconds
         STCM  R15,B'1111',SMF77WTT Total resource contention time
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'WTT=',SMF77WTT,4), Total resource contention time   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'QL1=',SMF77QL1,2), Queue length of 1                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'QL2=',SMF77QL2,2), Queue length of 2                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'QL3=',SMF77QL3,2), Queue length of 3                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'QL4=',SMF77QL4,2), Queue length of 4                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'EXM=',SMF77EXM,2), Minimum exclusive requests waitinX
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'EXX=',SMF77EXX,2), Maximum exclusive requests waitinX
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SHM=',SMF77SHM,2), Minimum share requests waiting   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SHX=',SMF77SHX,2), Maximum share requests waiting   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'EVT=',SMF77EVT,2), Total interval contentions       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DOW=',SMF77DOW,2), Owners at maximum contention     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DWR=',SMF77DWR,2), Waiters at maximum contention    X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DO1=',SMF77DO1,8), Resource owning job name 1       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SY1=',SMF77SY1,8), Resource owning system 1         X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DO2=',SMF77DO2,8), Resource owning job name 2       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SY2=',SMF77SY2,8), Resource owning system 2         X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DW1=',SMF77DW1,8), Resource waiting job name 1      X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SY3=',SMF77SY3,8), Resource waiting system 1        X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DW2=',SMF77DW2,8), Resource waiting job name 2      X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SY4=',SMF77SY4,8), Resource waiting system 2        X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         AH    R5,W_SMFSL2         Next Enqueue Data section
         $FILL W_SRTCMT,C' '       Blank comment area
         $FILL W_DSN1,C' '         Blank dataset 1
         LA    R15,W_SRTCMT        Initialize comment address
         ST    R15,W_CMT@          Initialize comment address
         BCT   R6,E77DTANX         Any more ?
         B     DAF0774             No, get out
         DROP  R3                  SMF record dereference
         DROP  R4                  Enqueue Control section dereference
         DROP  R5                  Enqueue Data section dereference
*
**       Invalid Triplet
*
DAF077IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0774             Exit, no check
DAF077   $EXIT                     Exit
         TITLE 'DAF078 - RMF Virtual Storage and I/O Queuing Activity'
DAF078   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(03)   I/O Queuing Activity ?
         BE    E078T03             . Yes
         B     DAF0784             Exit, no check
         DROP  R3                  SMF record dereference
*
**       Subtype 03 - I/O Queuing Activity
*
E078T03  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF78HDR,R3         SMF record reference
         MVC   W_SMFSO1,SMF78QDS   Section offset
         MVC   W_SMFSL1,SMF78QDL   Section length
         MVC   W_SMFSN1,SMF78QDN   Section number
         L     R1,W_SMFSO1         Section offset
         LTR   R1,R1               Section offset ?
         BNP   DAF078IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Section length
         LTR   R1,R1               Section length ?
         BNP   DAF078IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Section number
         LTR   R1,R1               Section number ?
         BNP   DAF078IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add section offset
         USING R783GD,R4           SMF record reference
         MVC   W_JOB1,=CL008'RMF'  Job name
         MVC   W_USER,=CL008'RMF'  User identification
         L     R14,=A(T783CFL)     T783CFL
         CALL  DAFPT,              Process TM Table                    X
               ((R14),R783CFL),    R783CFL                             X
               MF=(E,W_WRK)
         MVC   W_DSN1,R783TNM      Dataset
         CALL  DAFMC,              Move Comment                        X
               (=C'TSF=',R783TSF,2), IODF name suffix                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TOK=',R783TOK,16), Partial token information        X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TDT=',R783TDT,8), IODF creation date                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TTM=',R783TTM,8), IODF creation time                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TDY=',R783TDY,10), IODF creation date               X
               MF=(E,W_WRK)
         B     DAF0780             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  SMF record dereference
*
**       Invalid Triplet
*
DAF078IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0784             Exit, no check
DAF078   $EXIT                     Exit
         TITLE 'DAF079 - RMF Monitor II Activity'
DAF079   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(06)   Reserve Data ?
         BE    E079T06             . Yes
         CLC   SMFNNSTY,=AL2(07)   Enqueue Contention Data ?
         BE    E079T07             . Yes
         CLC   SMFNNSTY,=AL2(11)   Page Data Set Activity ?
         BE    E079T11             . Yes
         B     DAF0794             Exit, no check
         DROP  R3                  SMF record dereference
*
**       Subtype 06 - Reserve Data
*
E079T06  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF79HDR,R3         SMF record reference
         MVC   W_SMFSO1,SMF79ASS   Data offset
         MVC   W_SMFSL1,SMF79ASL   Data length
         MVC   W_SMFSN1,SMF79ASN   Data number
         L     R1,W_SMFSO1         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF079IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF079IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF079IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add data Data offset
         USING R796ELEM,R4         Data reference
         LH    R5,W_SMFSN1         Data number
E79T06NX EQU   *
*
**       Major Enqueue Name
*
         MVC   W_MAJOR,R796MAJ     Major name
         CALL  DAFMC,              Move Comment                        X
               (=C'MAJ=',W_MAJOR,8), Major name                        X
               MF=(E,W_WRK)
         MVC   W_MINOR,R796MIN     Minor name
         LA    R15,MAJORNUM        Major table size
         L     R14,=A(TBLMAJOR)    Major table address
E796CKMAJ EQU  *
         MVI   W_CHKDSN,C'N'       Dataset - No
         CLC   W_MAJOR,1(R14)      Major match ?
         BE    E796OKMAJ           . Yes
         LA    R14,MAJORLEN(R14)   Next major
         BCT   R15,E796CKMAJ       Process next major, if any
E796OKMAJ EQU  *
         MVC   W_MAJDES,9(R14)     Move major enqueue description
         CLI   0(R14),C'Y'         Dataset ?
         BNE   E796NODSN           . No
E796DSN  EQU   *
         MVC   W_DSN1,R796MIN      Dataset 1
         MVI   W_CHKDSN,C'Y'       Dataset - Yes
         B     E79DSNYES           Continue
E796NODSN EQU  *
         CLC   R796MINL,=AL2(44)   Minor resource length 44 ?
         BNE   E796NOL44           . No, continue
         CLC   R796MAJ,=CL8'SYSVSAM' Major name SYSVSAM ?
         BE    E796NOL44           . Yes, continue
         CLC   R796MAJ,=CL8'ENQ$AVRS' Major name ENQ$AVRS ?
         BE    E796NOL44           . Yes, continue
         CLC   R796MAJ,=CL8'SYSZVVDS' Major name SYSZVVDS ?
         BE    E796DSN             . Yes, it is a catalog name
         $MSG  W_LOG,DAF630I       Move message template
         MVC   W_LOG+38(L'R796MAJ),R796MAJ Major queue name
         MVC   W_LOG+51(L'R796MIN),R796MIN Minor enqueue name
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
E79DSNYES EQU  *
E796NOL44 EQU  *
         CALL  DAFMC,              Move Binary Comment                 X
               (=C'MIN=',W_MINOR,44), Minor enqueue name               X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Binary Comment                 X
               (=C'NONE',W_MAJDES,32), Major Enqueue Description       X
               MF=(E,W_WRK)
         $HEX  W_FULL1,R796ASID,LEN=2 ASID
         CALL  DAFMC,              Move Comment                        X
               (=C'ASID=',W_FULL1,4), ASID                             X
               MF=(E,W_WRK)
         MVC   W_JOB1,R796JBN      Job name
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,R796VOLS,0,6),                                 X
               MF=(E,W_WRK)
         CLC   R796UCB,=CL3'UCB'   Device number ?
         BE    E79T06DN            . No
         CALL  DAFMC,              Move Comment                        X
               (=C'UCB=',R796UCB,3), Device number                     X
               MF=(E,W_WRK)
E79T06DN EQU   *
         CALL  DAFMC,              Move Comment                        X
               (=C'REQ=',R796REQ,2), Request type and status           X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'MINL=',R796MINL,2), Minor name length               X
               MF=(E,W_WRK)
         L     R14,=A(T796FLG)     T796FLG
         CALL  DAFPT,              Process TM Table                    X
               ((R14),R796FLG),    R796FLG                             X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SID=',R796SID,8), System identifier                 X
               MF=(E,W_WRK)
         $HEX  W_FULL1,R796DVN,LEN=2 Device number
         CALL  DAFMC,              Move Comment                        X
               (=C'DVN=',W_FULL1,4), Device number                     X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         AH    R3,W_SMFSL1         Next data section
         $FILL W_SRTCMT,C' '       Blank comment area
         $FILL W_DSN1,C' '         Blank dataset 1
         LA    R15,W_SRTCMT        Initialize comment address
         ST    R15,W_CMT@          Initialize comment address
         BCT   R5,E79T06NX         Any more ?
         B     DAF0794             No, get out
         DROP  R3                  SMF record dereference
         DROP  R4                  Data dereference
*
**       Subtype 07 - Enqueue Contention Data
*
E079T07  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF79HDR,R3         SMF record reference
         MVC   W_SMFSO1,SMF79ASS   Data offset
         MVC   W_SMFSL1,SMF79ASL   Data length
         MVC   W_SMFSN1,SMF79ASN   Data number
         L     R1,W_SMFSO1         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF079IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF079IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF079IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add data Data offset
         USING R797ELEM,R4         Data reference
         LH    R5,W_SMFSN1         Data number
E79T07NX EQU   *
*
**       Major Enqueue Name
*
         MVC   W_MAJOR,R797MAJ     Major name
         CALL  DAFMC,              Move Comment                        X
               (=C'MAJ=',W_MAJOR,8), Major name                        X
               MF=(E,W_WRK)
         MVC   W_MINOR,R797MIN     Minor name
         LA    R15,MAJORNUM        Major table size
         L     R14,=A(TBLMAJOR)    Major table address
E79CKMAJ EQU   *
         MVI   W_CHKDSN,C'N'       Dataset - No
         CLC   R797MAJ,1(R14)      Major match ?
         BE    E79OKMAJ            . Yes
         LA    R14,MAJORLEN(R14)   Next major
         BCT   R15,E79CKMAJ        Process next major, if any
E79OKMAJ EQU   *
         MVC   W_MAJDES,9(R14)     Move major enqueue description
         CLI   0(R14),C'Y'         Dataset ?
         BNE   E797NODSN           . No
E797DSN  EQU   *
         MVC   W_DSN1,R797MIN      Dataset 1
         MVI   W_CHKDSN,C'Y'       Dataset - Yes
         B     E797DSNYES          Continue
E797NODSN EQU *
         CLC   R797MINL,=AL4(44)   Minor resource length 44 ?
         BNE   E797NOL44           . No, continue
         CLC   R797MAJ,=CL8'SYSVSAM' Major name SYSVSAM ?
         BE    E797NOL44           . Yes, continue
         CLC   R797MAJ,=CL8'ENQ$AVRS' Major name ENQ$AVRS ?
         BE    E797NOL44           . Yes, continue
         CLC   R797MAJ,=CL8'SYSZVVDS' Major name SYSZVVDS ?
         BE    E797DSN             . Yes, it is a catalog name
         $MSG  W_LOG,DAF630I       Move message template
         MVC   W_LOG+38(L'R797MAJ),R797MAJ Major queue name
         MVC   W_LOG+51(L'R797MIN),R797MIN Minor enqueue name
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
E797DSNYES EQU *
E797NOL44 EQU *
         CALL  DAFMC,              Move Binary Comment                 X
               (=C'MIN=',W_MINOR,44), Minor enqueue name               X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Binary Comment                 X
               (=C'NONE',W_MAJDES,32), Major Enqueue Description       X
               MF=(E,W_WRK)
         L     R14,=A(T797FLG)     T797FLG
         CALL  DAFPT,              Process TM Table                    X
               ((R14),R797FLG),    R797FLG                             X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'MINL=',R797MINL,4), Minor name length               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'OWN=',R797OWN,2), Owners                            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'EXCW=',R797EXCW,2), Exclusive waiters               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SHRW=',R797SHRW,2), Shared waiters                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'REQ=',R797REQ,2), Request type and status           X
               MF=(E,W_WRK)
         MVC   W_JOB1,R797JBN      Job name
         $HEX  W_FULL1,R797ASID,LEN=2 ASID
         CALL  DAFMC,              Move Comment                        X
               (=C'ASID=',W_FULL1,4), ASID                             X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SCOP=',R797SCOP,4), Scope                           X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SID=',R797SID,8), System identifier                 X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         AH    R3,W_SMFSL1         Next data section
         $FILL W_SRTCMT,C' '       Blank comment area
         $FILL W_DSN1,C' '         Blank dataset 1
         LA    R15,W_SRTCMT        Initialize comment address
         ST    R15,W_CMT@          Initialize comment address
         BCT   R5,E79T07NX         Any more ?
         B     DAF0794             No, get out
         DROP  R3                  SMF record dereference
         DROP  R4                  Data dereference
*
**       Subtype 11 - Page Data Set Activity
*
E079T11  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF79HDR,R3         SMF record reference
         MVC   W_SMFSO1,SMF79ASS   Data offset
         MVC   W_SMFSL1,SMF79ASL   Data length
         MVC   W_SMFSN1,SMF79ASN   Data number
         L     R1,W_SMFSO1         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF079IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF079IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF079IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add data Data offset
         USING R79BELEM,R4         Data reference
         LH    R5,W_SMFSN1         Data number
E79T11NX EQU   *
         MVC   W_JOB1,=CL008'RMF'  Job name
         MVC   W_USER,=CL008'RMF'  User identification
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SALC=',R79BSALC,4), Slots total                     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SAVL=',R79BSAVL,4), Slots available                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SLBD=',R79BSLBD,4), Slots bad                       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SUSE=',R79BSUSE,4), Samples ASM using this dataset  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SIOS=',R79BSIOS,4), SSCHs issued                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'REQS=',R79BREQS,4), Pages transferred               X
               MF=(E,W_WRK)
         L     R14,=A(T79BFLG)     T79BFLG
         CALL  DAFPT,              Process TM Table                    X
               ((R14),R79BFLG),    R79BFLG                             X
               MF=(E,W_WRK)
         $HEX  W_FULL1,R79BDEV,LEN=1 Device type
         CALL  DAFMC,              Move Comment                        X
               (=C'DEV=',W_FULL1,2), Device type                       X
               MF=(E,W_WRK)
         CLC   R79BDADR,=CL3'UCB'  Device number ?
         BE    E79T11DN            . No
         CALL  DAFMC,              Move Comment                        X
               (=C'DADR=',R79BDADR,3), Device number                   X
               MF=(E,W_WRK)
E79T11DN EQU   *
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,R79BVSER,0,6),                                 X
               MF=(E,W_WRK)
         MVC   W_DSN1,R79BDSN      Data set name
         L     R14,=A(T79BFL2)     T79BFL2
         CALL  DAFPT,              Process TM Table                    X
               ((R14),R79BFL2),    R79BFL2                             X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DEVN=',R79BDEVN,8), Device name                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CU=',R79BCU,8), Control unit name                   X
               MF=(E,W_WRK)
         $HEX  W_FULL1,R79BDVN,LEN=2 Device number
         CALL  DAFMC,              Move Comment                        X
               (=C'DVN=',W_FULL1,4), Device number                     X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         AH    R3,W_SMFSL1         Next data section
         $FILL W_SRTCMT,C' '       Blank comment area
         $FILL W_DSN1,C' '         Blank dataset 1
         LA    R15,W_SRTCMT        Initialize comment address
         ST    R15,W_CMT@          Initialize comment address
         BCT   R5,E79T11NX         Any more ?
         B     DAF0794             . No, get out
         DROP  R3                  SMF record dereference
         DROP  R4                  Data dereference
*
**       Invalid Triplet
*
DAF079IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0794             Exit, no check
DAF079   $EXIT                     Exit
.NORMF5        ANOP
         AIF   ('&RT_RACFPROC' EQ '000').NORACFPROC5
         TITLE 'DAF080 - Security Product Processing'
DAF080   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_8XREL,SMF80REL    Save offset to relocate section
         MVC   W_8XCNT,SMF80CNT    Save relocate sections
         MVC   W_JOB1,SMF80JBN     Job name
         MVC   W_USER,SMF80USR     User identification
         L     R14,=A(T80DES)      SMF80DES
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF80DES),   SMF80DES                            X
               MF=(E,W_WRK)
         L     R14,=A(T80EVENT)    Event code
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF80EVT),   Event code                          X
               MF=(E,W_WRK)
         L     R14,=A(T80QUAL)     Qualifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF80EVT),   Qualifier (Event code & qualifier)  X
               MF=(E,W_WRK)
         L     R14,=A(T80ATH)      SMF80ATH
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF80ATH),   SMF80ATH                            X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMF80GRP    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SEC=',SMF80SEC,8), Security label                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TERMINAL=',SMF80TRM,8), Terminal                    X
               MF=(E,W_WRK)
         L     R14,=A(T80REA)      SMF80REA
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF80REA),   SMF80REA                            X
               MF=(E,W_WRK)
         L     R14,=A(T80RE2)      SMF80RE2
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF80RE2),   SMF80RE2                            X
               MF=(E,W_WRK)
         L     R14,=A(T80AU2)      SMF80AU2
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF80AU2),   SMF80AU2                            X
               MF=(E,W_WRK)
         CALL  DAF8XR
         B     DAF0800             Exit
DAF080   $EXIT                     Exit
.NORACFPROC5   ANOP
         AIF   ('&RT_RACFINIT' EQ '000').NORACFINIT5
         TITLE 'DAF081 - RACF Initialization'
DAF081   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         MVC   W_8XREL,SMF81REL    Save offset to relocate section
         MVC   W_8XCNT,SMF81CNT    Save relocate sections
         MVC   W_JOB1,=CL008'RACF' Job name
         MVC   W_USER,=CL008'RACF' User identification
         CALL  DAF8XR
         MVC   W_DSN2,SMF81UDS     UADS dataset
         CALL  DAFMC,              UADS dataset                        X
               (=C'UDS=',SMF81UDS,44),                                 X
               MF=(E,W_WRK)
         MVC   W_VOL2,SMF81UVL     UADS volume serial
         CALL  DAFMC,              UADS volume serial                  X
               (=C'UVL=',W_VOL2,6),                                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Maximum password interval           X
               (=C'PIV=',SMF81PIV,1),                                  X
               MF=(E,W_WRK)
         MVC   W_CMTCLR,=C'N'      Do not clear comment area
         CALL  DAFCC               Check criteria
         MVC   W_DSN1,SMF81UDS     UADS dataset
         MVC   W_DSN2,SMF81RDS     RACF dataset
         B     DAF0810             Exit
         DROP  R3                  SMF record dereference
DAF081   $EXIT                     Exit
.NORACFINIT5   ANOP
         AIF   ('&RT_ICSF' EQ '000').NOICSF5
         TITLE 'DAF082 - ICSF Record'
DAF082   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(01)   Initialization ?
         BE    EXT82T01            . Yes
         CLC   SMFNNSTY,=AL2(07)   KEU Key Part Entry ?
         BE    EXT82T07            . Yes
         CLC   SMFNNSTY,=AL2(08)   CKDS Refresh ?
         BE    EXT82T08            . Yes
         CLC   SMFNNSTY,=AL2(09)   Dynamic CKDS Update ?
         BE    EXT82T09            . Yes
         CLC   SMFNNSTY,=AL2(13)   Dynamic PKDS Update ?
         BE    EXT82T13            . Yes
         AIF   (NOT D'SMF82SXC).NO82T211
         CLC   SMFNNSTY,=AL2(21)   ICSF Sysplex Group Change Section ?
         BE    EXT82T21            . Yes
.NO82T211      ANOP
         B     DAF0824             Exit, no check
         DROP  R3                  SMF record dereference
*
**       Subtype 01 - Initialization
*
EXT82T01 EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF82,R3            SMF record reference
         L     R4,W_SMFBAS         Set SMF record base
         LA    R1,SMF82LNG         SMF basic section length
         AR    R4,R1               Set SMF Initialization
         USING SMF82INI,R4         SMF record reference
         MVC   W_JOB1,=CL008'ICSF' Job name - ICSF
         MVC   W_USER,=CL008'ICSF' User identification - ICSF
         MVC   W_DSN1,SMF82CKD     CKDS data set name
         L     R14,=A(T82VES)      SMF82VES
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF82VES),   SMF82VES                            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'IDO=',SMF82IDO,1), Crypto domain index              X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'ITE=',SMF82ITE,4), Trace entries                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'IML=',SMF82IML,4), Maximum data length              X
               MF=(E,W_WRK)
         B     DAF0820             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  SMF record dereference
*
**       Subtype 07 - KEU Key Part Entry
*
EXT82T07 EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF82,R3            SMF record reference
         L     R4,W_SMFBAS         Set SMF record base
         LA    R1,SMF82LNG         SMF basic section length
         AR    R4,R1               Set SMF Initialization
         USING SMF82KP,R4          SMF record reference
         MVC   W_JOB1,=CL008'ICSF' Job name - ICSF
         MVC   W_USER,=CL008'ICSF' User identification - ICSF
         MVC   W_DSN1,SMF82KCK     CKDS data set name
         CALL  DAFMC,              Move Comment                        X
               (=C'KV=',SMF82KV,8), Key part verification pattern      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'KKS=',SMF82KKS,1), KSU number                       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'KDX=',SMF82KDX,1), Crypto domain index              X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'KCL=',SMF82KCL,24), CKDS entry being modified       X
               MF=(E,W_WRK)
         B     DAF0820             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  SMF record dereference
*
**       Subtype 08 - CKDS Refresh
*
EXT82T08 EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF82,R3            SMF record reference
         L     R4,W_SMFBAS         Set SMF record base
         LA    R1,SMF82LNG         SMF basic section length
         AR    R4,R1               Set SMF Initialization
         USING SMF82REF,R4         SMF record reference
         MVC   W_JOB1,=CL008'ICSF' Job name - ICSF
         MVC   W_USER,=CL008'ICSF' User identification - ICSF
         MVC   W_DSN1,SMF82ROC     Old CKDS dataset name
         MVC   W_DSN2,SMF82RNC     New CKDS dataset name
         CALL  DAFMC,              Old CKDS dataset name               X
               (=C'Old_CKDS=',SMF82ROC,44),                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              New CKDS dataset name               X
               (=C'New_CKDS=',SMF82RNC,44),                            X
               MF=(E,W_WRK)
         MVC   W_CMTCLR,=C'N'      Do not clear comment area
         CALL  DAFCC               Check criteria
         MVC   W_DSN1,SMF82RNC     New CKDS dataset name
         MVC   W_DSN2,SMF82ROC     Old CKDS dataset name
         B     DAF0820             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  SMF record dereference
*
**       Subtype 09 - Dynamic CKDS Update
*
EXT82T09 EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF82,R3            SMF record reference
         L     R4,W_SMFBAS         Set SMF record base
         LA    R1,SMF82LNG         SMF basic section length
         AR    R4,R1               Set SMF Initialization
         USING SMF82UPD,R4         SMF record reference
         MVC   W_JOB1,=CL008'ICSF' Job name - ICSF
         MVC   W_USER,=CL008'ICSF' User identification - ICSF
         MVC   W_DSN1,SMF82UCN     CKDS name
         CALL  DAFMC,              CKDS name                           X
               (=C'CKDS=',W_DSN1,44),                                  X
               MF=(E,W_WRK)
         B     DAF0820             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  SMF record dereference
*
**       Subtype 13 - Dynamic PKDS Update
*
EXT82T13 EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF82,R3            SMF record reference
         L     R4,W_SMFBAS         Set SMF record base
         LA    R1,SMF82LNG         SMF basic section length
         AR    R4,R1               Set SMF Initialization
         USING SMF_PKDS,R4         SMF record reference
         MVC   W_JOB1,=CL008'ICSF' Job name - ICSF
         MVC   W_USER,=CL008'ICSF' User identification - ICSF
         MVC   W_DSN1,SMF_PKDS_NAME PKDS name
         CALL  DAFMC,              PKDS name                           X
               (=C'PKDS=',W_DSN1,44),                                  X
               MF=(E,W_WRK)
         B     DAF0820             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  SMF record dereference
*
**       Subtype 21 - ICSF Sysplex Group Change Section
*
         AIF   (NOT D'SMF82SXC).NO82T212
EXT82T21 EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF82,R3            SMF record reference
         L     R4,W_SMFBAS         Set SMF record base
         LA    R1,SMF82LNG         SMF basic section length
         AR    R4,R1               Set SMF Initialization
         USING SMF_PKDS,R4         SMF record reference
         MVC   W_JOB1,=CL008'ICSF' Job name - ICSF
         MVC   W_USER,=CL008'ICSF' User identification - ICSF
         MVC   W_DSN1,SMF82SXC     PKDS name
         CALL  DAFMC,              PKDS name                           X
               (=C'PKDS=',W_DSN1,44),                                  X
               MF=(E,W_WRK)
         B     DAF0820             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  SMF record dereference
.NO82T212      ANOP
DAF082   $EXIT                     Exit
.NOICSF5       ANOP
         AIF   ('&RT_RACFAUDIT' EQ '000').NORACFAUDIT5
         TITLE 'DAF083 - RACF Audit Record for Data Sets'
DAF083   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         SMF record address
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(01)   RACF Audit Record For Data Sets ?
         BE    E083T01             . Yes
         B     DAF0834             Exit, no check
         DROP  R3                  SMF record dereference
*
**       Subtype 01 - RACF Audit Record For Data Sets
*
E083T01  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD83,R3         SMF record reference
         MVC   W_SMFSO1,SMF83OD1   Security offset
         MVC   W_SMFSL1,SMF83LD1   Security length
         MVC   W_SMFSN1,SMF83ND1   Security number
         L     R1,W_SMFSO1         Security offset
         LTR   R1,R1               Security offset ?
         BNP   DAF083IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Security length
         LTR   R1,R1               Security length ?
         BNP   DAF083IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Security number
         LTR   R1,R1               Security number ?
         BNP   DAF083IT            . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Security
         USING SMF83DS1,R4         Security reference
         MVC   W_SMFSO2,SMF83OD2   Relocate offset
         MVC   W_SMFSL2,SMF83LD2   Relocate length
         MVC   W_SMFSN2,SMF83ND2   Relocate number
         L     R1,W_SMFSO2         Relocate offset
         LTR   R1,R1               Relocate offset ?
         BNP   DAF083IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Relocate length
         LTR   R1,R1               Relocate length ?
         BNP   DAF083IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Relocate number
         LTR   R1,R1               Relocate number ?
         BNP   DAF083IT            . No - invalid triplet
*        L     R5,W_SMFBAS         Address SMF record
*        A     R5,W_SMFSO2         Address relocate
*        USING SMF88ESD,R5         Relocate reference
         MVC   W_8XREL,SMF83REL    Save offset to relocate section
         MVC   W_8XCNT,SMF83CNT    Save relocate sections
         MVC   W_JOB1,SMF83JBN     Job name
         MVC   W_USER,SMF83USR     User identification
         L     R14,=A(T80DES)      SMF80DES
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF83DES),   SMF83DES                            X
               MF=(E,W_WRK)
         L     R14,=A(T80EVENT)    Event code
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF83EVT),   Event code                          X
               MF=(E,W_WRK)
         L     R14,=A(T80QUAL)     Qualifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF83EVT),   Qualifier (Event code & qualifier)  X
               MF=(E,W_WRK)
         L     R14,=A(T80ATH)      SMF83ATH
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF83ATH),   SMF83ATH                            X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMF83GRP    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SEC=',SMF83SEC,8), Security label                   X
               MF=(E,W_WRK)
         L     R14,=A(T80REA)      SMF83REA
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF83REA),   SMF83REA                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TERMINAL=',SMF83TRM,8), Terminal                    X
               MF=(E,W_WRK)
         L     R14,=A(T80RE2)      SMF80RE2
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF83RE2),   SMF80RE2                            X
               MF=(E,W_WRK)
         CALL  DAF8XR
         B     DAF0830             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Security dereference
*
**       Invalid Triplet
*
DAF083IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0834             Exit, no check
DAF083   $EXIT                     Exit
.NORACFAUDIT5  ANOP
         TITLE 'DAF088 - System Logger Data'
DAF088   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         SMF record address
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(01)   Logstream activity ?
         BE    E088T01             . Yes
         B     DAF0884             Exit - No criteria check
         DROP  R3                  SMF record dereference
*
**       Subtype 01 - Logstream activity
*
E088T01  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD88,R3         SMF record reference
         MVC   W_SMFSO1,SMF88LOF   Logstream offset
         MVC   W_SMFSL1,SMF88LLN   Logstream length
         MVC   W_SMFSN1,SMF88LON   Logstream number
         L     R1,W_SMFSO1         Logstream offset
         LTR   R1,R1               Logstream offset ?
         BNP   DAF088IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Logstream length
         LTR   R1,R1               Logstream length ?
         BNP   DAF088IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Logstream number
         LTR   R1,R1               Logstream number ?
         BNP   DAF088IT            . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Logstream
         USING SMF88LSD,R4         Logstream reference
         MVC   W_SMFSO2,SMF88EOF   Event offset
         MVC   W_SMFSL2,SMF88ELN   Event length
         MVC   W_SMFSN2,SMF88EON   Event number
         L     R1,W_SMFSO2         Event offset
         LTR   R1,R1               Event offset ?
         BNP   DAF088IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Event length
         LTR   R1,R1               Event length ?
         BNP   DAF088IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Event number
         LTR   R1,R1               Event number ?
         BNP   DAF088IT            . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address event
         USING SMF88ESD,R5         Event reference
         MVC   W_SMFSO3,SMF88SOF   Structure offset
         MVC   W_SMFSL3,SMF88SLN   Structure length
         MVC   W_SMFSN3,SMF88SON   Structure number
         L     R1,W_SMFSO3         Structure offset
         LTR   R1,R1               Structure offset ?
         BNP   DAF088IT            . No - invalid triplet
         LH    R1,W_SMFSL3         Structure length
         LTR   R1,R1               Structure length ?
         BNP   DAF088IT            . No - invalid triplet
         LH    R1,W_SMFSN3         Structure number
         LTR   R1,R1               Structure number ?
         BNP   DAF088IT            . No - invalid triplet
         L     R6,W_SMFBAS         Address SMF record
         A     R6,W_SMFSO3         Address structure
         USING SMF88SSD,R6         Structure reference
         CLC   SMF88STN,=CL16'*DASDONLY*' DASD Only ?
         BNE   DAF0884             . No, exit - no check
         MVC   W_LOGSTREAM,SMF88LSN Log stream name
         MVC   W_DSN1(26),SMF88LSN Log stream name
         CALL  DAFMC,              Move Comment                        X
               (=C'LOGSTREAM=',SMF88LSN),                              X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'STN=',SMF88STN),                                    X
               MF=(E,W_WRK)
         B     DAF0880             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Logstream dereference
         DROP  R5                  Event dereference
         DROP  R6                  Structure dereference
*
**       Invalid Triplet
*
DAF088IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0884             Exit, no check
DAF088   $EXIT                     Exit
         TITLE 'DAF090 - System Status'
DAF090   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD90,R3         SMF record reference
         MVC   W_SMFSO1,SMF90POF   Product offset
         MVC   W_SMFSL1,SMF90PLN   Product length
         MVC   W_SMFSN1,SMF90PON   Product number
         L     R1,W_SMFSO1         Product offset
         LTR   R1,R1               Product offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Product length
         LTR   R1,R1               Product length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Product number
         LTR   R1,R1               Product number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address product
         USING SMF90PRH,R4         Product reference
         CLC   SMF90TID,=AL2(05)   SET SMF ?
         BE    E090T05             . Yes
         CLC   SMF90TID,=AL2(06)   Switch SMF ?
         BE    E090T06             . Yes
         CLC   SMF90TID,=AL2(07)   Halt EOD ?
         BE    E090T07             . Yes
         CLC   SMF90TID,=AL2(09)   IPL SMF ?
         BE    E090T09             . Yes
         CLC   SMF90TID,=AL2(13)   SETSMF ?
         BE    E090T13             . Yes
         CLC   SMF90TID,=AL2(15)   SET SMF (Restart SMF) ?
         BE    E090T15             . Yes
         CLC   SMF90TID,=AL2(26)   IPL LOGREC ?
         BE    E090T26             . Yes
         B     DAF0904             Exit - No criteria check
         DROP  R3                  SMF record dereference
         DROP  R4                  Product dereference
*
**       Subtype 05 - SET SMF
*
E090T05  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD90,R3         SMF record reference
         MVC   W_SMFSO1,SMF90POF   Product offset
         MVC   W_SMFSL1,SMF90PLN   Product length
         MVC   W_SMFSN1,SMF90PON   Product number
         L     R1,W_SMFSO1         Product offset
         LTR   R1,R1               Product offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Product length
         LTR   R1,R1               Product length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Product number
         LTR   R1,R1               Product number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Product
         USING SMF90PRH,R4         Product reference
         MVC   W_SMFSO2,SMF90DOF   Data offset
         MVC   W_SMFSL2,SMF90DLN   Data length
         MVC   W_SMFSN2,SMF90DON   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address Data
         USING SMF90T5,R5          Data reference
         MVC   W_SMFSO3,SMF90ODA   Dataset offset
         MVC   W_SMFSL3,SMF90LDA   Dataset length
         MVC   W_SMFSN3,SMF90NDA   Dataset number
         L     R1,W_SMFSO3         Dataset offset
         LTR   R1,R1               Dataset offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL3         Dataset length
         LTR   R1,R1               Dataset length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN3         Dataset number
         LTR   R1,R1               Dataset number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R6,W_SMFBAS         Address SMF record
         A     R6,W_SMFSO3         Address Dataset
         USING SMF90DSE,R6         Dataset reference
         LH    R7,W_SMFSN3         Dataset number
         MVC   W_JOB1,SMF90PNM     Job name
         MVC   W_USER,SMF90PNM     User identification
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'Active_SMF_Recording_Dataset',28),         X
               MF=(E,W_WRK)
NXT90T5  LH    R1,W_SMFSL3         Dataset length
         $VLM  W_DSN1,SMF90DSN,(R1) Dataset
         CALL  DAFCC               Check criteria
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'Alternate_SMF_Recording_Dataset',31),      X
               MF=(E,W_WRK)
         AH    R6,W_SMFSL3         Next DSN
         BCT   R7,NXT90T5          Any more ?
         B     DAF0904             Exit - No criteria check
         DROP  R3                  SMF record dereference
         DROP  R4                  SMF record dereference
         DROP  R5                  SMF record dereference
         DROP  R6                  SMF record dereference
*
**       Subtype 06 - Switch SMF
*
E090T06  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD90,R3         SMF record reference
         MVC   W_SMFSO1,SMF90POF   Product offset
         MVC   W_SMFSL1,SMF90PLN   Product length
         MVC   W_SMFSN1,SMF90PON   Product number
         L     R1,W_SMFSO1         Product offset
         LTR   R1,R1               Product offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Product length
         LTR   R1,R1               Product length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Product number
         LTR   R1,R1               Product number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Product
         USING SMF90PRH,R4         Product reference
         MVC   W_SMFSO2,SMF90DOF   Data offset
         MVC   W_SMFSL2,SMF90DLN   Data length
         MVC   W_SMFSN2,SMF90DON   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address Data
         USING SMF90T6,R5          Data reference
         MVC   W_JOB1,SMF90PNM     Job name
         MVC   W_USER,SMF90PNM     User identification
         CLC   SMF90SWO,=10C' '    Old DSN blank ?
         BE    E90SWN1             . Yes, check new DSN
         MVC   W_DSN1(10),SMF90SWO Old dataset 1
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SWN=',SMF90SWN,10), New DSN                         X
               MF=(E,W_WRK)
         MVC   W_DSN2(10),SMF90SWN New DSN
         CALL  DAFCC               Check criteria
E90SWN1  EQU   *
         AIF   (NOT D'SMF90SND).NONEWDSN1
         CLI   SMF90SND,C' '       New DSN blank ?
         BE    DAF0904             Yes, get out
         MVC   W_DSN1,SMF90SND     New dataset 1
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SOD=',SMF90SOD), Old DSN                            X
               MF=(E,W_WRK)
         MVC   W_DSN2,SMF90SOD     Old DSN
         B     DAF0900             Return to caller
         DROP  R3                  SMF record dereference
         DROP  R4                  Product dereference
         DROP  R5                  Data dereference
.NONEWDSN1     ANOP
*
**       Subtype 07 - Halt EOD
*
E090T07  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD90,R3         SMF record reference
         MVC   W_SMFSO1,SMF90POF   Product offset
         MVC   W_SMFSL1,SMF90PLN   Product length
         MVC   W_SMFSN1,SMF90PON   Product number
         L     R1,W_SMFSO1         Product offset
         LTR   R1,R1               Product offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Product length
         LTR   R1,R1               Product length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Product number
         LTR   R1,R1               Product number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Product
         USING SMF90PRH,R4         Product reference
         MVC   W_SMFSO2,SMF90DOF   Data offset
         MVC   W_SMFSL2,SMF90DLN   Data length
         MVC   W_SMFSN2,SMF90DON   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address Data
         USING SMF90T6,R5          Data reference
         $MSG  W_LOG,DAF514I       Move message template
         MVC   W_LOG+33(04),W_SYSTEM System id
         MVC   W_LOG+43(07),W_DATE Date
         MVC   W_LOG+56(11),W_TIME Time
         CALL  DAFCD,              Convert Date                        X
               (SMF90ID,W_LOG+72), IPL Date                            X
               MF=(E,W_WRK)
         CALL  DAFCT,              Convert Time                        X
               (SMF90IT,W_TIME),   IPL Time                            X
               MF=(E,W_WRK)
         MVC   W_LOG+80(11),W_TIME Time
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAF0904             Exit - No criteria check
         DROP  R3                  SMF record dereference
         DROP  R4                  Product dereference
         DROP  R5                  Data dereference
*
**       Subtype 09 - IPL SMF
*
E090T09  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD90,R3         SMF record reference
         $MSG  W_LOG,DAF515I       Move message template
         MVC   W_LOG+33(04),W_SYSTEM System id
         MVC   W_LOG+43(07),W_DATE Date
         MVC   W_LOG+56(11),W_TIME Time
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAF0904             Exit - No criteria check
         DROP  R3                  SMF record dereference
*
**       Subtype 13 - SETSMF
*
E090T13  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD90,R3         SMF record reference
         MVC   W_SMFSO1,SMF90POF   Product offset
         MVC   W_SMFSL1,SMF90PLN   Product length
         MVC   W_SMFSN1,SMF90PON   Product number
         L     R1,W_SMFSO1         Product offset
         LTR   R1,R1               Product offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Product length
         LTR   R1,R1               Product length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Product number
         LTR   R1,R1               Product number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Product
         USING SMF90PRH,R4         Product reference
         MVC   W_SMFSO2,SMF90DOF   Data offset
         MVC   W_SMFSL2,SMF90DLN   Data length
         MVC   W_SMFSN2,SMF90DON   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address Data
         USING SMF90T5,R5          Data reference
         MVC   W_SMFSO3,SMF90ODA   Dataset offset
         MVC   W_SMFSL3,SMF90LDA   Dataset length
         MVC   W_SMFSN3,SMF90NDA   Dataset number
         L     R1,W_SMFSO3         Dataset offset
         LTR   R1,R1               Dataset offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL3         Dataset length
         LTR   R1,R1               Dataset length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN3         Dataset number
         LTR   R1,R1               Dataset number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R6,W_SMFBAS         Address SMF record
         A     R6,W_SMFSO3         Address Dataset
         USING SMF90DSE,R6         Dataset reference
         LH    R7,W_SMFSN3         Dataset number
         MVC   W_JOB1,SMF90PNM     Job name
         MVC   W_USER,SMF90PNM     User identification
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'Active_SMF_Recording_Dataset',28),         X
               MF=(E,W_WRK)
NXT90T13 LH    R1,W_SMFSL3         Dataset length
         $VLM  W_DSN1,SMF90DSN,(R1) Dataset
         CALL  DAFCC               Check criteria
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'Alternate_SMF_Recording_Dataset',31),      X
               MF=(E,W_WRK)
         AH    R6,W_SMFSL3         Next DSN
         BCT   R7,NXT90T13         Any more ?
         B     DAF0904             Exit - No criteria check
         DROP  R3                  SMF record dereference
         DROP  R4                  Product dereference
         DROP  R5                  Data dereference
         DROP  R6                  Dataset dereference
*
**       Subtype 15 - SET SMF (to restart SMF)
*
E090T15  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD90,R3         SMF record reference
         MVC   W_SMFSO1,SMF90POF   Product offset
         MVC   W_SMFSL1,SMF90PLN   Product length
         MVC   W_SMFSN1,SMF90PON   Product number
         L     R1,W_SMFSO1         Product offset
         LTR   R1,R1               Product offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Product length
         LTR   R1,R1               Product length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Product number
         LTR   R1,R1               Product number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Product
         USING SMF90PRH,R4         Product reference
         MVC   W_SMFSO2,SMF90DOF   Data offset
         MVC   W_SMFSL2,SMF90DLN   Data length
         MVC   W_SMFSN2,SMF90DON   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address Data
         USING SMF90T5,R5          Data reference
         MVC   W_SMFSO3,SMF90ODA   Dataset offset
         MVC   W_SMFSL3,SMF90LDA   Dataset length
         MVC   W_SMFSN3,SMF90NDA   Dataset number
         L     R1,W_SMFSO3         Dataset offset
         LTR   R1,R1               Dataset offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL3         Dataset length
         LTR   R1,R1               Dataset length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN3         Dataset number
         LTR   R1,R1               Dataset number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R6,W_SMFBAS         Address SMF record
         A     R6,W_SMFSO3         Address Dataset
         USING SMF90DSE,R6         Dataset reference
         LH    R7,W_SMFSN3         Dataset number
         MVC   W_JOB1,SMF90PNM     Job name
         MVC   W_USER,SMF90PNM     User identification
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'Active_SMF_Recording_Dataset',28),         X
               MF=(E,W_WRK)
NXT90T15 LH    R1,W_SMFSL3         Dataset length
         $VLM  W_DSN1,SMF90DSN,(R1) Dataset
         CALL  DAFCC               Check criteria
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'Alternate_SMF_Recording_Dataset',31),      X
               MF=(E,W_WRK)
         AH    R6,W_SMFSL3         Next DSN
         BCT   R7,NXT90T15         Any more ?
         B     DAF0904             Exit - No criteria check
         DROP  R3                  SMF record dereference
         DROP  R4                  Product dereference
         DROP  R5                  Data dereference
         DROP  R6                  Dataset dereference
*
**       Subtype 26 - IPL LOGREC
*
E090T26  EQU   *
         AIF   (NOT D'SMF90LOG).NOLOGREC
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD90,R3         SMF record reference
         MVC   W_SMFSO1,SMF90POF   Product offset
         MVC   W_SMFSL1,SMF90PLN   Product length
         MVC   W_SMFSN1,SMF90PON   Product number
         L     R1,W_SMFSO1         Product offset
         LTR   R1,R1               Product offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Product length
         LTR   R1,R1               Product length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Product number
         LTR   R1,R1               Product number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Product
         USING SMF90PRH,R4         Product reference
         MVC   W_SMFSO2,SMF90DOF   Data offset
         MVC   W_SMFSL2,SMF90DLN   Data length
         MVC   W_SMFSN2,SMF90DON   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF090IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF090IT            . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address Data
         USING SMF90T26,R5         Data reference
         MVC   W_JOB1,SMF90PNM     Job name
         MVC   W_USER,SMF90PNM     User identification
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMF90LOG     Dataset
         CLC   SMF9026M(9),=CL9'LOGSTREAM' Logstream ?
         BNE   DAF0904             . No, exit - no check
         MVC   W_LOGSTREAM,SMF9026G Log stream name
         MVC   W_DSN1(26),W_LOGSTREAM Log stream name
         CALL  DAFMC,              Move Comment                        X
               (=C'LOGSTREAM=',W_LOGSTREAM),                           X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'Medium=',SMF9026M,10),                              X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'Original',8),                              X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMF9026N     Dataset
         CALL  DAFMC,              Move Comment                        X
               (=C'Medium=',SMF9026R,10),                              X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'New',3),                                   X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         B     DAF0904             Exit - No criteria check
         DROP  R3                  SMF record dereference
         DROP  R4                  Product dereference
         DROP  R5                  Data dereference
.NOLOGREC      ANOP
*
**       Invalid Triplet
*
DAF090IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0904             Exit, no check
DAF090   $EXIT                     Exit
         AIF   ('&RT_BATCHPIPES' EQ '000').NOBATCHPIPES5
         TITLE 'DAF091 - BatchPipes/MVS Statistics'
DAF091   $ENTRY AMODE=31,RMODE=24 Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(21)   Dataset Close ?
         BE    E091T21             . Yes
         B     DAF0914             Exit - No criteria check
         DROP  R3                  SMF record dereference
*
**       Subtype 21 - Dataset Close
*
E091T21  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD91,R3         SMF record reference
         MVC   W_SMFSO1,SMF91JIO   Job Information offset
         MVC   W_SMFSL1,SMF91JIL   Job Information length
         MVC   W_SMFSN1,SMF91JIN   Job Information number
         L     R1,W_SMFSO1         Job Information offset
         LTR   R1,R1               Job Information offset ?
         BNP   DAF091IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Job Information length
         LTR   R1,R1               Job Information length ?
         BNP   DAF091IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Job Information number
         LTR   R1,R1               Job Information number ?
         BNP   DAF091IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Job Information offset
         USING SMF91JI,R4          Job Information reference
         MVC   W_SMFSO2,SMF91GDO   General Data Set Info offset
         MVC   W_SMFSL2,SMF91GDL   General Data Set Info length
         MVC   W_SMFSN2,SMF91GDN   General Data Set Info number
         L     R1,W_SMFSO2         General Data Set Info offset
         LTR   R1,R1               General Data Set Info offset ?
         BNP   DAF091IT            . No - invalid triplet
         LH    R1,W_SMFSL2         General Data Set Info length
         LTR   R1,R1               General Data Set Info length ?
         BNP   DAF091IT            . No - invalid triplet
         LH    R1,W_SMFSN2         General Data Set Info number
         LTR   R1,R1               General Data Set Info number ?
         BNP   DAF091IT            . No - invalid triplet
         MVC   W_JOB1,SMF91JNM     Job name
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add General Data Set Info offset
         USING SMF91GD,R5          General Data Set Info reference
         MVC   W_DSN1,SMF91DSN     Dataset name
         MVC   W_DD,SMF91DDN       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'OPN=',SMF91OPN,8), Open time/date                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'OPN=',SMF91CLS,8), Close time/date                  X
               MF=(E,W_WRK)
         B     DAF0910             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Job Information dereference
         DROP  R5                  General Data Set Info dereference
*
**       Invalid Triplet
*
DAF091IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0914             Exit, no check
DAF091   $EXIT                     Exit
.NOBATCHPIPES5 ANOP
         AIF   ('&RT_USS' EQ '000').NOUSS5
         TITLE 'DAF092 - OpenMVS File System Activity'
DAF092   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(01)   File system mount ?
         BE    E092T01             . Yes
         CLC   SMFNNSTY,=AL2(02)   File system quiesced ?
         BE    E092T02             . Yes
         CLC   SMFNNSTY,=AL2(04)   File system unquiesced ?
         BE    E092T04             . Yes
         CLC   SMFNNSTY,=AL2(05)   File system unmounted ?
         BE    E092T05             . Yes
         CLC   SMFNNSTY,=AL2(06)   File system remounted ?
         BE    E092T06             . Yes
         CLC   SMFNNSTY,=AL2(07)   File system move ?
         BE    E092T07             . Yes
         B     DAF0924             Exit - No criteria check
         DROP  R3                  SMF record dereference
*
**       Subtype 01 - File system mount
*
E092T01  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD92,R3         SMF record reference
         MVC   W_SMFSO1,SMF92IOF   Identification offset
         MVC   W_SMFSL1,SMF92ILN   Identification length
         MVC   W_SMFSN1,SMF92ION   Identification number
         L     R1,W_SMFSO1         Identification offset
         LTR   R1,R1               Identification offset ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Identification length
         LTR   R1,R1               Identification length ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Identification number
         LTR   R1,R1               Identification number ?
         BNP   DAF092IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Identification offset
         USING SMF92ID,R4          Identification reference
         MVC   W_SMFSO2,SMF92DOF   Data offset
         MVC   W_SMFSL2,SMF92DLN   Data length
         MVC   W_SMFSN2,SMF92DON   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF092IT            . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add Data offset
         USING SMF92FSM,R5         Data reference
*        CLC   SMF92MFT,=F'04'     Socket file system ?
*        BE    DAF0924             . Yes, exit no check
*        SMF92MTN  AUTOMNT
*        SMF92MTN  CINET
*        SMF92MTN  DFSC
*        SMF92MTN  HFS
*        SMF92MTN  INET
*        SMF92MTN  NFS
*        SMF92MTN  TFS
*        SMF92MTN  UDS
*        SMF92MTN  ZFS
*        CLC   SMF92MTN,=CL8'CINET' File system CINET ?
*        BE    DAF0924             . Yes, exit no check
*        CLC   SMF92MTN,=CL8'INET' File system INET ?
*        BE    DAF0924             . Yes, exit no check
         MVC   W_JOB1,SMF92JBN     Job name
         MVC   W_USER,SMF92RUD     User identification
         MVC   W_DSN1,SMF92MFN     Dataset name 1
         MVC   W_DD,SMF92MDD       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         L     R14,=A(T92MFT)      FSType
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92MFT),   FSType                              X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMF92RGD    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'MTN=',SMF92MTN,8), File system type name            X
               MF=(E,W_WRK)
         L     R14,=A(T92STP)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92STP),   Subtype                             X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'MBL=',SMF92MBL,4), File system block size           X
               MF=(E,W_WRK)
         MVC   W_SMFSO3,SMF92MPF   Path offset
         L     R1,W_SMFSO3         Path offset
         LTR   R1,R1               Path offset ?
         BNP   E092T01NP           . No - skip path processing
         L     R6,W_SMFBAS         Address SMF record
         A     R6,W_SMFSO3         Address Path
         USING SMF92FSP,R6         Path reference
         LH    R1,SMF92PPL         Path name length
         LTR   R1,R1               Path name length ?
         BNP   E092T01NP           . No - skip path processing
         $VLM  W_DSN2,SMF92PPN,(R1) Path name
         CALL  DAFMC,              Move Comment                        X
               (=C'PATH=',W_DSN2,44), Path name                        X
               MF=(E,W_WRK)
E092T01NP EQU  *
         B     DAF0920             Exit - Criteria check
         DROP  R3                  SMF record dereference
         DROP  R4                  Identification dereference
         DROP  R5                  Data dereference
         DROP  R6                  Path dereference
*
**       Subtype 02 - File system quiesced
*
E092T02  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD92,R3         SMF record reference
         MVC   W_SMFSO1,SMF92IOF   Identification offset
         MVC   W_SMFSL1,SMF92ILN   Identification length
         MVC   W_SMFSN1,SMF92ION   Identification number
         L     R1,W_SMFSO1         Identification offset
         LTR   R1,R1               Identification offset ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Identification length
         LTR   R1,R1               Identification length ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Identification number
         LTR   R1,R1               Identification number ?
         BNP   DAF092IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Identification offset
         USING SMF92ID,R4          Identification reference
         MVC   W_SMFSO2,SMF92DOF   Data offset
         MVC   W_SMFSL2,SMF92DLN   Data length
         MVC   W_SMFSN2,SMF92DON   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF092IT            . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add Data offset
         USING SMF92FSS,R5         Data reference
*        CLC   SMF92SFT,=F'04'     Socket file system ?
*        BE    DAF0924             . Yes, exit no check
         MVC   W_JOB1,SMF92JBN     Job name
         MVC   W_USER,SMF92RUD     User identification
         MVC   W_DSN1,SMF92SFN     Dataset name 1
         MVC   W_DD,SMF92SDD       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         L     R14,=A(T92MFT)      FSType
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92SFT),   FSType                              X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMF92RGD    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'STN=',SMF92STN,8), File system type name            X
               MF=(E,W_WRK)
         L     R14,=A(T92STP)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92STP),   Subtype                             X
               MF=(E,W_WRK)
         B     DAF0920             Exit - Criteria check
         DROP  R3                  SMF record dereference
         DROP  R4                  Identification dereference
         DROP  R5                  Data dereference
*
**       Subtype 04 - File system unquiesced
*
E092T04  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD92,R3         SMF record reference
         MVC   W_SMFSO1,SMF92IOF   Identification offset
         MVC   W_SMFSL1,SMF92ILN   Identification length
         MVC   W_SMFSN1,SMF92ION   Identification number
         L     R1,W_SMFSO1         Identification offset
         LTR   R1,R1               Identification offset ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Identification length
         LTR   R1,R1               Identification length ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Identification number
         LTR   R1,R1               Identification number ?
         BNP   DAF092IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Identification offset
         USING SMF92ID,R4          Identification reference
         MVC   W_SMFSO2,SMF92DOF   Data offset
         MVC   W_SMFSL2,SMF92DLN   Data length
         MVC   W_SMFSN2,SMF92DON   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF092IT            . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add Data offset
         USING SMF92FSR,R5         Data reference
*        CLC   SMF92RFT,=F'04'     Socket file system ?
*        BE    DAF0924             . Yes, exit no check
         MVC   W_JOB1,SMF92JBN     Job name
         MVC   W_USER,SMF92RUD     User identification
         MVC   W_DSN1,SMF92RFN     Dataset name 1
         MVC   W_DD,SMF92RDD       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         L     R14,=A(T92MFT)      FSType
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92RFT),   FSType                              X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMF92RGD    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'RTN=',SMF92RTN,8), File system type name            X
               MF=(E,W_WRK)
         L     R14,=A(T92STP)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92STP),   Subtype                             X
               MF=(E,W_WRK)
         B     DAF0920             Exit - Criteria check
         DROP  R3                  SMF record dereference
         DROP  R4                  Identification dereference
         DROP  R5                  Data dereference
*
**       Subtype 05 - File system unmounted
**       Subtype 06 - File system remounted
*
E092T05  EQU   *
E092T06  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD92,R3         SMF record reference
         MVC   W_SMFSO1,SMF92IOF   Identification offset
         MVC   W_SMFSL1,SMF92ILN   Identification length
         MVC   W_SMFSN1,SMF92ION   Identification number
         L     R1,W_SMFSO1         Identification offset
         LTR   R1,R1               Identification offset ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Identification length
         LTR   R1,R1               Identification length ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Identification number
         LTR   R1,R1               Identification number ?
         BNP   DAF092IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Identification offset
         USING SMF92ID,R4          Identification reference
         MVC   W_SMFSO2,SMF92DOF   Data offset
         MVC   W_SMFSL2,SMF92DLN   Data length
         MVC   W_SMFSN2,SMF92DON   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF092IT            . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add Data offset
         USING SMF92FSU,R5         Data reference
*        CLC   SMF92UFT,=F'04'     Socket file system ?
*        BE    DAF0924             . Yes, exit no check
         MVC   W_JOB1,SMF92JBN     Job name
         MVC   W_USER,SMF92RUD     User identification
         MVC   W_DSN1,SMF92UFN     Dataset name 1
         MVC   W_DD,SMF92UDD       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         L     R14,=A(T92MFT)      FSType
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92UFT),   FSType                              X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMF92RGD    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'UTN=',SMF92UTN,8), File system type name            X
               MF=(E,W_WRK)
         L     R14,=A(T92STP)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92STP),   Subtype                             X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'UBL=',SMF92UBL,4), File system block size           X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'USR=',SMF92USR,4), File system read calls           X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'USW=',SMF92USW,4), File system write calls          X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'UDI=',SMF92UDI,4), File system directory blocks     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'UIR=',SMF92UIR,4), File system i/o blocks read      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'UIW=',SMF92UIW,4), File system i/o blocks written   X
               MF=(E,W_WRK)
         B     DAF0920             Exit - Criteria check
         DROP  R3                  SMF record dereference
         DROP  R4                  Identification dereference
         DROP  R5                  Data dereference
*
**       Subtype 07 - File system move
*
E092T07  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD92,R3         SMF record reference
         MVC   W_SMFSO1,SMF92IOF   Identification offset
         MVC   W_SMFSL1,SMF92ILN   Identification length
         MVC   W_SMFSN1,SMF92ION   Identification number
         L     R1,W_SMFSO1         Identification offset
         LTR   R1,R1               Identification offset ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSL1         Identification length
         LTR   R1,R1               Identification length ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSN1         Identification number
         LTR   R1,R1               Identification number ?
         BNP   DAF092IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Identification offset
         USING SMF92ID,R4          Identification reference
         MVC   W_SMFSO2,SMF92DOF   Data offset
         MVC   W_SMFSL2,SMF92DLN   Data length
         MVC   W_SMFSN2,SMF92DON   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   DAF092IT            . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   DAF092IT            . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add Data offset
         USING SMF92FSV,R5         Data reference
*        CLC   SMF92VFT,=F'04'     Socket file system ?
*        BE    DAF0924             . Yes, exit no check
         MVC   W_JOB1,SMF92JBN     Job name
         MVC   W_USER,SMF92RUD     User identification
         MVC   W_DSN1,SMF92VNM     Dataset name 1
         MVC   W_DD,SMF92VDD       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         L     R14,=A(T92MFT)      FSType
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92VFT),   FSType                              X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMF92RGD    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'UTN=',SMF92VTN,8), File system type name            X
               MF=(E,W_WRK)
         L     R14,=A(T92STP)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92STP),   Subtype                             X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'VBL=',SMF92VBL,4), File system block size           X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'VSR=',SMF92VSR,4), File system read calls           X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'VSW=',SMF92VSW,4), File system write calls          X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'VDI=',SMF92VDI,4), File system directory blocks     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'VIR=',SMF92VIR,4), File system I/O blocks read      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'VIW=',SMF92VIW,4), File system I/O blocks written   X
               MF=(E,W_WRK)
         B     DAF0920             Exit - Criteria check
         DROP  R3                  SMF record dereference
         DROP  R4                  Identification dereference
         DROP  R5                  Data dereference
*
**       Invalid Triplet
*
DAF092IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF0924             Exit, no check
DAF092   $EXIT                     Exit
.NOUSS5        ANOP
         AIF   ('&RT_TCPIP' EQ '000').NOTCPIP5
         TITLE 'DAF118 - TCP/IP Statistics'
DAF118   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(&ST_FTPCLIENT) FTP Client ?
         BE    E118T03             . Yes
         CLC   SMFNNSTY,=AL2(&ST_FTPAPPE) FTP Server Append ?
         BE    E118T70             . Yes
         CLC   SMFNNSTY,=AL2(&ST_FTPDEL) FTP Server Delete ?
         BE    E118T71             . Yes
         CLC   SMFNNSTY,=AL2(&ST_FTPLOGN) FTP Server Logon Failure ?
         BE    E118T72             . Yes
         CLC   SMFNNSTY,=AL2(&ST_FTPREN) FTP Server Rename ?
         BE    E118T73             . Yes
         CLC   SMFNNSTY,=AL2(&ST_FTPRETR) FTP Server Retrieve ?
         BE    E118T74             . Yes
         CLC   SMFNNSTY,=AL2(&ST_FTPSTOR) FTP Server Store ?
         BE    E118T75             . Yes
         CLC   SMFNNSTY,=AL2(&ST_FTPCOMMON) FTP Server Common Subtype ?
         BE    E118THC             . Yes
         B     DAF1184             Exit, no check
         DROP  R3                  SMF record dereference
*
**       Subtype 03 - FTP Client
*
E118T03  EQU   *
         L     R3,W_SMFBAS         Address SMF record
         USING SMFFTC76,R3         SMF record reference
         CALL  DAFMC,              FTP subcommand                      X
               (=C'CCM=',SMFFTCCM,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              FTP command reply                   X
               (=C'CTY=',SMFFTCTY,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFIP4,             Local IP address (client)           X
               (SMFFTCSA,W_IP1),                                       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Local IP address (client)           X
               (=C'CSA=',W_IP1,15),                                    X
               MF=(E,W_WRK)
         CALL  DAFIP4,             Foreign IP address (server)         X
               (SMFFTCSL,W_IP2),                                       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Foreign IP address (server)         X
               (=C'CSL=',W_IP2,15),                                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Local port number                   X
               (=C'CCP=',SMFFTCCP,2),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Foreign port number                 X
               (=C'CCF=',SMFFTCCF,2),                                  X
               MF=(E,W_WRK)
         MVC   W_USER,SMFFTCSU     Remote user identification
         L     R14,=A(TFTCFM)      Data format
         CALL  DAFPC,              Data format                         X
               ((R14),SMFFTCFM),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TFTCMO)      Transfer mode
         CALL  DAFPC,              Transfer mode                       X
               ((R14),SMFFTCMO),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TFTCST)      Structure
         CALL  DAFPC,              Structure                           X
               ((R14),SMFFTCST),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TFTCDT)      Dataset type
         CALL  DAFPC,              Dataset type                        X
               ((R14),SMFFTCDT),                                       X
               MF=(E,W_WRK)
         CALL  DAFCT,              Start time of transmission          X
               (SMFFTCRS,W_TMPTME),                                    X
               MF=(E,W_WRK)
         CALL  DAFMC,              Start time of transmission          X
               (=C'CRS=',W_TMPTME,11),                                 X
               MF=(E,W_WRK)
         CALL  DAFCT,              End time of transmission            X
               (SMFFTCRE,W_TMPTME),                                    X
               MF=(E,W_WRK)
         CALL  DAFMC,              End time of transmission            X
               (=C'CRE=',W_TMPTME,11),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Byte count of transmission          X
               (=C'CBC=',SMFFTCBC,4),                                  X
               MF=(E,W_WRK)
         L     R14,=A(TFTCXD)      FTP identification
         CALL  DAFPC,              FTP identification                  X
               ((R14),SMFFTCXD),                                       X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMFFTCSN     Dataset name
         CLC   SMFFTCEM,=CL008' '  Member present ?
         BE    E76NOMEM            . No, continue
         MVC   W_MEMBER1,SMFFTCEM  Member name
         CALL  DAFMC,              Member name                         X
               (=C'MEMBER=',W_MEMBER1,8),                              X
               MF=(E,W_WRK)
E76NOMEM EQU   *
         MVC   W_JOB1,SMFFTCTC     Job name
         MVC   W_HOST,SMFFTCHN     Host name
         CALL  DAFMC,              Host name                           X
               (=C'CHN=',W_HOST,8),                                    X
               MF=(E,W_WRK)
         CALL  DAFMB,                                                  X
               (=C'CF1=',SMFFTCF1,2), ?????                            X
               MF=(E,W_WRK)
         CALL  DAFMB,                                                  X
               (=C'CF2=',SMFFTCF2,2), ?????                            X
               MF=(E,W_WRK)
         B     DAF1180             Exit
         DROP  R3                  SMF record dereference
*
**       Subtype 70 - FTP Server Append
**       Subtype 71 - FTP Server Delete
**       Subtype 73 - FTP Server Rename
**       Subtype 74 - FTP Server Retrieve
**       Subtype 75 - FTP Server Store
**       Subtype HC - FTP Server Common Subtype
*
E118T70  EQU   *
E118T71  EQU   *
E118T73  EQU   *
E118T74  EQU   *
E118T75  EQU   *
E118THC  EQU   *
         L     R3,W_SMFBAS         Address SMF record
         USING SMFFTP76,R3         SMF record reference
         CALL  DAFMC,              Subcommand                          X
               (=C'PCM=',SMFFTPCM,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Filetype                            X
               (=C'PTY=',SMFFTPTY,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFIP4,             Remote IP address (client)          X
               (SMFFTPSA,W_IP1),                                       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Remote IP address (client)          X
               (=C'PSA=',W_IP1,15),                                    X
               MF=(E,W_WRK)
         CALL  DAFIP4,             Local IP address (server)           X
               (SMFFTPSL,W_IP2),                                       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Local IP address (server)           X
               (=C'PSL=',W_IP2,15),                                    X
               MF=(E,W_WRK)
         MVC   W_USER,SMFFTPSU     Local user identification
         L     R14,=A(TFTPFM)      Data format
         CALL  DAFPC,              Data format                         X
               ((R14),SMFFTPFM),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TFTPMO)      Transfer mode
         CALL  DAFPC,              Transfer mode                       X
               ((R14),SMFFTPMO),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TFTPST)      Structure
         CALL  DAFPC,              Structure                           X
               ((R14),SMFFTPST),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TFTPDT)      Dataset type
         CALL  DAFPC,              Dataset type                        X
               ((R14),SMFFTPDT),                                       X
               MF=(E,W_WRK)
         CALL  DAFCT,              Start time of transmission          X
               (SMFFTTRS,W_TMPTME),                                    X
               MF=(E,W_WRK)
         CALL  DAFMC,              Start time of transmission          X
               (=C'TRS=',W_TMPTME,11),                                 X
               MF=(E,W_WRK)
         CALL  DAFCT,              End time of transmission            X
               (SMFFTTRE,W_TMPTME),                                    X
               MF=(E,W_WRK)
         CALL  DAFMC,              End time of transmission            X
               (=C'TRE=',W_TMPTME,11),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Byte count of transmission          X
               (=C'TBC=',SMFFTTBC,4),                                  X
               MF=(E,W_WRK)
         L     R14,=A(TFTPXD)      FTP identification
         CALL  DAFPC,              FTP identification                  X
               ((R14),SMFFTPXD),                                       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Last reply to client                X
               (=C'SLR=',SMFFTSLR,3),                                  X
               MF=(E,W_WRK)
         L     R14,=A(TFTSLR)      Last reply to client
         CALL  DAFPC,              Last reply to client                X
               ((R14),SMFFTSLR),                                       X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMFFTDSN     Dataset name
         CALL  DAFMC,              Dataset name                        X
               (=C'DSN=',SMFFTDSN,44),                                 X
               MF=(E,W_WRK)
         CLC   SMFFTMEM,=CL008' '  Member name 1 ?
         BE    E76NOMEM2           . No, continue
         MVC   W_MEMBER1,SMFFTMEM  Member name 1
         CALL  DAFMC,              Member name 1                       X
               (=C'MEM=',W_MEMBER1,8),                                 X
               MF=(E,W_WRK)
E76NOMEM2 EQU   *
         MVC   W_JOB1,SMFFTSTC     Job name
         MVC   W_HOST,SMFFTHST     Host name
         CALL  DAFMC,              Host name                           X
               (=C'HST=',W_HOST,8),                                    X
               MF=(E,W_WRK)
         CALL  DAFMC,              Abnormal end information            X
               (=C'RS2=',SMFFTRS2,8),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Remote port number                  X
               (=C'SRP=',SMFFTSRP,2),                                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Local port number                   X
               (=C'SLP=',SMFFTSLP,2),                                  X
               MF=(E,W_WRK)
         CLC   SMFFTPCM(3),=CL003'REN' Rename ?
         BNE   E76NOREN            . No, continue
         MVC   W_DSN2,SMFFTDS2     Dataset name 2
         CALL  DAFMC,              Dataset name 2                      X
               (=C'DS2=',SMFFTDS2,44),                                 X
               MF=(E,W_WRK)
         CLC   SMFFTMM2,=CL008' '  Member name 2 ?
         BE    E76NOMEM3           . No, continue
         MVC   W_MEMBER2,SMFFTMM2  Member name 2
         CALL  DAFMC,              Member name 2                       X
               (=C'MM2=',W_MEMBER2,8),                                 X
               MF=(E,W_WRK)
E76NOMEM3 EQU   *
         MVC   W_CMTCLR,=C'N'      Do not clear comment area
         CALL  DAFCC               Check criteria
         MVC   W_DSN1,SMFFTDS2     New dataset name
         MVC   W_DSN2,SMFFTDSN     Old dataset name
E76NOREN EQU   *
         B     DAF1180             Exit
         DROP  R3                  SMF record dereference
*
**       Subtype 72 - FTP Server Login Failure
*
E118T72  EQU   *
         L     R3,W_SMFBAS         Address SMF record
         USING SMFFTP76,R3         SMF record reference
         $MSG  W_LOG,DAF518I       Move message template
         MVC   W_LOG+33(04),W_SYSTEM System id
         MVC   W_LOG+43(07),W_DATE Date
         MVC   W_LOG+56(11),W_TIME Time
         CALL  DAFMC,              Client User ID                      X
               (=C'PSU=',SMFFTPSU,8),                                  X
               MF=(E,W_WRK)
         LA    R7,W_LOG+68         Message address
         L     R8,W_CMT@           Next comment address
         LA    R1,W_SRTCMT         Starting comment address
         SR    R8,R1               Move length
         $VLM  (R7),W_SRTCMT,(R8)  Move it
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAF1184             Exit, no check
         DROP  R3                  SMF record dereference
DAF118   $EXIT                     Exit
.NOTCPIP5      ANOP
         AIF   ('&RT_TCPIPX' EQ '000').NOTCPIPX5
         TITLE 'DAF119 - TCP/IP Statistics'
DAF119   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(03)   FTP Client Transfer ?
         BE    E119T03             . Yes
         CLC   SMFNNSTY,=AL2(70)   FTP Server Transfer ?
         BE    E119T70             . Yes
         CLC   SMFNNSTY,=AL2(72)   FTP Server Login Failure ?
         BE    E119T72             . Yes
         B     DAF1194             Exit - No criteria check
         DROP  R3                  SMF record dereference
*
**       Subtype 03 - FTP Client Transfer
*
E119T03  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF119Header,R3     SMF record reference
         LA    R1,SMF119HDLN       Header section length
         AR    R3,R1               Address self defining section
         DROP  R3                  SMF record dereference
         USING SMF119SDefSect,R3   SMF record reference
         MVC   W_SMFSO1,SMF119IDOff TCPIP Identification offset
         MVC   W_SMFSL1,SMF119IDLen TCPIP Identification length
         MVC   W_SMFSN1,SMF119IDNum TCPIP Identification number
         L     R1,W_SMFSO1         TCPIP Identification offset
         LTR   R1,R1               TCPIP Identification offset ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSL1         TCPIP Identification length
         LTR   R1,R1               TCPIP Identification length ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSN1         TCPIP Identification number
         LTR   R1,R1               TCPIP Identification number ?
         BNP   DAF119IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add TCPIP Identification offset
         USING SMF119Ident,R4      TCPIP Identification reference
         MVC   W_SMFSO2,SMF119S1Off FTP Client offset
         MVC   W_SMFSL2,SMF119S1Len FTP Client length
         MVC   W_SMFSN2,SMF119S1Num FTP Client number
         L     R1,W_SMFSO2         FTP Client offset
         LTR   R1,R1               FTP Client offset ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSL2         FTP Client length
         LTR   R1,R1               FTP Client length ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSN2         FTP Client number
         LTR   R1,R1               FTP Client number ?
         BNP   DAF119IT            . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add FTP Client offset
         USING SMF119FT_FC,R5      FTP Client reference
         LA    R1,SMF119SDLN       Self defining section length
         AR    R3,R1               Address self defining section
         DROP  R3                  SMF record dereference
         USING SMF119SD3Triples,R3 SMF record reference
         MVC   W_SMFSO3,SMF119S2Off FTP Client Dataset offset
         MVC   W_SMFSL3,SMF119S2Len FTP Client Dataset length
         MVC   W_SMFSN3,SMF119S2Num FTP Client Dataset number
         L     R1,W_SMFSO3         Section offset
         LTR   R1,R1               Section offset ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSL3         Section length
         LTR   R1,R1               Section length ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSN3         Section number
         LTR   R1,R1               Section number ?
         BNP   DAF119IT            . No - invalid triplet
         L     R6,W_SMFBAS         Set SMF record base
         A     R6,W_SMFSO3         Add FTP Client Dataset offset
         USING SMF119FT_FCAN,R6    SMF record reference
         MVC   W_JOB1,SMF119TI_ASName Job name
         MVC   W_USER,SMF119TI_UserID User identification
         CALL  DAFMC,              Move Comment                        X
               (=C'Cmd=',SMF119FT_FCCmd,4), Subcommand                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'FT=',SMF119FT_FCFType,4), Local file type           X
               MF=(E,W_WRK)
         CLC   SMF119FT_FCDRIP(12),=XL012'00000000000000000000FFFF' V4?
         BNE   E119IP16            . No
         CALL  DAFIP4,             Data remote IP address              X
               (SMF119FT_FCDRIP+12,W_IP1),                             X
               MF=(E,W_WRK)
         B     E119IP1X            Continue
E119IP16 EQU   *
         CALL  DAFIP6,             Data remote IP address              X
               (SMF119FT_FCDRIP,W_IP1),                                X
               MF=(E,W_WRK)
         B     E119IP1X            Continue
E119IP1X EQU   *
         CALL  DAFMC,              Data remote IP address              X
               (=C'DRIP=',W_IP1,15),                                   X
               MF=(E,W_WRK)
         CLC   SMF119FT_FCDLIP(12),=XL012'00000000000000000000FFFF' V4?
         BNE   E119IP26            . No
         CALL  DAFIP4,             Data local IP address               X
               (SMF119FT_FCDLIP+12,W_IP2),                             X
               MF=(E,W_WRK)
         B     E119IP2X            Continue
E119IP26 EQU   *
         CALL  DAFIP6,             Data local IP address               X
               (SMF119FT_FCDLIP,W_IP2),                                X
               MF=(E,W_WRK)
         B     E119IP2X            Continue
E119IP2X EQU   *
         CALL  DAFMC,              Data local IP address               X
               (=C'DLIP=',W_IP2,15),                                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DRP=',SMF119FT_FCDRPort,2), Data remote port        X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DLP=',SMF119FT_FCDLPort,2), Data local port         X
               MF=(E,W_WRK)
         CLC   SMF119FT_FCCRIP(12),=XL012'00000000000000000000FFFF' V4?
         BNE   E119IP36            . No
         CALL  DAFIP4,             Control remote IP address           X
               (SMF119FT_FCCRIP+12,W_IP3),                             X
               MF=(E,W_WRK)
         B     E119IP3X            Continue
E119IP36 EQU   *
         CALL  DAFIP6,             Control remote IP address           X
               (SMF119FT_FCCRIP,W_IP3),                                X
               MF=(E,W_WRK)
         B     E119IP3X            Continue
E119IP3X EQU   *
         CALL  DAFMC,              Control remote IP address           X
               (=C'CRIP=',W_IP3,15),                                   X
               MF=(E,W_WRK)
         CLC   SMF119FT_FCCLIP(12),=XL012'00000000000000000000FFFF' V4?
         BNE   E119IP46            . No
         CALL  DAFIP4,             Control local IP address            X
               (SMF119FT_FCCLIP+12,W_IP4),                             X
               MF=(E,W_WRK)
         B     E119IP4X            Continue
E119IP46 EQU   *
         CALL  DAFIP6,             Control local IP address            X
               (SMF119FT_FCCLIP,W_IP4),                                X
               MF=(E,W_WRK)
         B     E119IP4X            Continue
E119IP4X EQU   *
         CALL  DAFMC,              Control local IP address            X
               (=C'CLIP=',W_IP4,15),                                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CRP=',SMF119FT_FCCRPort,2), Control remote port     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CLP=',SMF119FT_FCCLPort,2), Control local port      X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'RUser=',SMF119FT_FCRUser,8), Remote userid          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'LUser=',SMF119FT_FCLUser,8), Local userid           X
               MF=(E,W_WRK)
         L     R14,=A(T119TYPE)    Data type
         CALL  DAFPC,              Data type                           X
               ((R14),SMF119FT_FCType),                                X
               MF=(E,W_WRK)
         L     R14,=A(T119MODE)    Transfer mode
         CALL  DAFPC,              Transfer mode                       X
               ((R14),SMF119FT_FCMode),                                X
               MF=(E,W_WRK)
         L     R14,=A(T119STRU)    Structure
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF119FT_FCStruct), Structure                    X
               MF=(E,W_WRK)
         L     R14,=A(T119DST)     Dataset type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF119FT_FCDsType), Dataset type                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'Dur=',SMF119FT_FCDur,4), Transmission duration      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'Bytes=',SMF119FT_FCBytes,8), Transmission bytes     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'LR=',SMF119FT_FCLReply,4), Last reply               X
               MF=(E,W_WRK)
         L     R14,=A(T119LR)      Last reply
         CALL  DAFPC,              Last reply                          X
               ((R14),SMF119FT_FCLReply),                              X
               MF=(E,W_WRK)
         CLC   SMF119FT_FCM1,=CL008' ' Member present ?
         BE    E119NOMEM              . No
         MVC   W_MEMBER1,SMF119FT_FCM1 Member name
         CALL  DAFMC,              Move Comment                        X
               (=C'MEMBER=',W_MEMBER1,8), Member name                  X
               MF=(E,W_WRK)
E119NOMEM EQU   *
         MVC   W_HOST,SMF119FT_FCHostname Host name
         CALL  DAFMC,              Move Comment                        X
               (=C'HOST=',W_HOST,8), Host name                         X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'RS=',SMF119FT_FCRS,8), Abnormal end info            X
               MF=(E,W_WRK)
         LH    R7,W_SMFSL3         FTP Client Dataset length
         $VLM  W_DSN1,SMF119FT_FCFileName,(R7) Dataset
         B     DAF1190             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  TCPIP Identification dereference
         DROP  R5                  FTP Client dereference
         DROP  R6                  FTP Client Dataset dereference
*
**       Subtype 70 - FTP Server Transfer
*
E119T70  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF119Header,R3     SMF record reference
         LA    R1,SMF119HDLN       Header section length
         AR    R3,R1               Address self defining section
         DROP  R3                  SMF record dereference
         USING SMF119SDefSect,R3   SMF record reference
         MVC   W_SMFSO1,SMF119IDOff TCPIP Identification offset
         MVC   W_SMFSL1,SMF119IDLen TCPIP Identification length
         MVC   W_SMFSN1,SMF119IDNum TCPIP Identification number
         L     R1,W_SMFSO1         TCPIP Identification offset
         LTR   R1,R1               TCPIP Identification offset ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSL1         TCPIP Identification length
         LTR   R1,R1               TCPIP Identification length ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSN1         TCPIP Identification number
         LTR   R1,R1               TCPIP Identification number ?
         BNP   DAF119IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add TCPIP Identification offset
         USING SMF119Ident,R4      TCPIP Identification reference
         MVC   W_SMFSO2,SMF119S1Off FTP Server offset
         MVC   W_SMFSL2,SMF119S1Len FTP Server length
         MVC   W_SMFSN2,SMF119S1Num FTP Server number
         L     R1,W_SMFSO2         FTP Server offset
         LTR   R1,R1               FTP Server offset ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSL2         FTP Server length
         LTR   R1,R1               FTP Server length ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSN2         FTP Server number
         LTR   R1,R1               FTP Server number ?
         BNP   DAF119IT            . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add FTP Server offset
         USING SMF119FT_FS,R5      FTP Server reference
         LA    R1,SMF119SDLN       Self defining section length
         AR    R3,R1               Address self defining section
         DROP  R3                  SMF record dereference
         USING SMF119SD3Triples,R3 SMF record reference
         MVC   W_SMFSO3,SMF119S2Off FTP Server host name offset
         MVC   W_SMFSL3,SMF119S2Len FTP Server host name length
         MVC   W_SMFSN3,SMF119S2Num FTP Server host name number
         L     R1,W_SMFSO3         Section offset
         LTR   R1,R1               Section offset ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSL3         Section length
         LTR   R1,R1               Section length ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSN3         Section number
         LTR   R1,R1               Section number ?
         BNP   DAF119IT            . No - invalid triplet
         L     R6,W_SMFBAS         Set SMF record base
         A     R6,W_SMFSO3         Add FTP Server host name offset
         USING SMF119FT_FSHN,R6    FTP Server host name reference
         LA    R1,SMF119S3LN       Self defining section length
         AR    R3,R1               Address self defining section
         DROP  R3                  SMF record dereference
         USING SMF119SD4Triples,R3 SMF record reference
         MVC   W_SMFSO4,SMF119S3Off FTP Server dataset 1 offset
         MVC   W_SMFSL4,SMF119S3Len FTP Server dataset 1 length
         MVC   W_SMFSN4,SMF119S3Num FTP Server dataset 1 number
         L     R1,W_SMFSO4         Section offset
         LTR   R1,R1               Section offset ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSL4         Section length
         LTR   R1,R1               Section length ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSN4         Section number
         LTR   R1,R1               Section number ?
         BNP   DAF119IT            . No - invalid triplet
         L     R7,W_SMFBAS         Set SMF record base
         A     R7,W_SMFSO4         Add FTP Server dataset 1 offset
         USING SMF119FT_FSA1,R7    FTP Server dataset 1 reference
         LA    R1,SMF119S4LN       Self defining section length
         AR    R3,R1               Address self defining section
         DROP  R3                  SMF record dereference
         USING SMF119SD5Triples,R3 SMF record reference
         MVC   W_SMFSO5,SMF119S4Off FTP Server dataset 2 offset
         MVC   W_SMFSL5,SMF119S4Len FTP Server dataset 2 length
         MVC   W_SMFSN5,SMF119S4Num FTP Server dataset 2 number
         LH    R1,W_SMFSN5         Section number
         LTR   R1,R1               Section number ?
         BNP   FTFSNOA2            . No - do not set up addressability
         L     R1,W_SMFSO5         Section offset
         LTR   R1,R1               Section offset ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSL5         Section length
         LTR   R1,R1               Section length ?
         BNP   DAF119IT            . No - invalid triplet
         L     R8,W_SMFBAS         Set SMF record base
         A     R8,W_SMFSO5         Add FTP Server dataset 2 offset
         USING SMF119FT_FSA2,R8    FTP Server dataset 2 reference
FTFSNOA2 EQU   *
         MVC   W_JOB1,SMF119TI_ASName Job name
         MVC   W_USER,SMF119TI_UserID User identification
         CALL  DAFMC,              Move Comment                        X
               (=C'Cmd=',SMF119FT_FSCmd,4), FTP command                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'FT=',SMF119FT_FSFType,4), File type                 X
               MF=(E,W_WRK)
         CLC   SMF119FT_FSDRIP(12),=XL012'00000000000000000000FFFF' V4?
         BNE   FTFSIP16            . No
         CALL  DAFIP4,             Data remote IP address              X
               (SMF119FT_FSDRIP+12,W_IP1),                             X
               MF=(E,W_WRK)
         B     FTFSIP1X            Continue
FTFSIP16 EQU   *
         CALL  DAFIP6,             Data remote IP address              X
               (SMF119FT_FSDRIP,W_IP1),                                X
               MF=(E,W_WRK)
         B     FTFSIP1X            Continue
FTFSIP1X EQU   *
         CALL  DAFMC,              Data remote IP address              X
               (=C'DRIP=',W_IP1,15),                                   X
               MF=(E,W_WRK)
         CLC   SMF119FT_FSDLIP(12),=XL012'00000000000000000000FFFF' V4?
         BNE   FTFSIP26            . No
         CALL  DAFIP4,             Data local IP address               X
               (SMF119FT_FSDLIP+12,W_IP2),                             X
               MF=(E,W_WRK)
         B     FTFSIP2X            Continue
FTFSIP26 EQU   *
         CALL  DAFIP6,             Data local IP address               X
               (SMF119FT_FSDLIP,W_IP2),                                X
               MF=(E,W_WRK)
         B     FTFSIP2X            Continue
FTFSIP2X EQU   *
         CALL  DAFMC,              Data local IP address               X
               (=C'DLIP=',W_IP2,15),                                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DRP=',SMF119FT_FSDRPort,2), Data remote port        X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DLP=',SMF119FT_FSDLPort,2), Data local port         X
               MF=(E,W_WRK)
         CLC   SMF119FT_FSCRIP(12),=XL012'00000000000000000000FFFF' V4?
         BNE   FTFSIP36            . No
         CALL  DAFIP4,             Control remote IP address           X
               (SMF119FT_FSCRIP+12,W_IP3),                             X
               MF=(E,W_WRK)
         B     FTFSIP3X            Continue
FTFSIP36 EQU   *
         CALL  DAFIP6,             Control remote IP address           X
               (SMF119FT_FSCRIP,W_IP3),                                X
               MF=(E,W_WRK)
         B     FTFSIP3X            Continue
FTFSIP3X EQU   *
         CALL  DAFMC,              Control remote IP address           X
               (=C'CRIP=',W_IP3,15),                                   X
               MF=(E,W_WRK)
         CLC   SMF119FT_FSCLIP(12),=XL012'00000000000000000000FFFF' V4?
         BNE   FTFSIP46            . No
         CALL  DAFIP4,             Control local IP address            X
               (SMF119FT_FSCLIP+12,W_IP4),                             X
               MF=(E,W_WRK)
         B     FTFSIP4X            Continue
FTFSIP46 EQU   *
         CALL  DAFIP6,             Control local IP address            X
               (SMF119FT_FSCLIP,W_IP4),                                X
               MF=(E,W_WRK)
         B     FTFSIP4X            Continue
FTFSIP4X EQU   *
         CALL  DAFMC,              Control local IP address            X
               (=C'CLIP=',W_IP4,15),                                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CRP=',SMF119FT_FSCRPort,2), Control remote port     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CLP=',SMF119FT_FSCLPort,2), Control local port      X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SUser=',SMF119FT_FSSUser,8), Client userid          X
               MF=(E,W_WRK)
         L     R14,=A(T119TYPE)    Data type
         CALL  DAFPC,              Data type                           X
               ((R14),SMF119FT_FSType),                                X
               MF=(E,W_WRK)
         L     R14,=A(T119MODE)    Transmission mode
         CALL  DAFPC,              Transmission mode                   X
               ((R14),SMF119FT_FSMode),                                X
               MF=(E,W_WRK)
         L     R14,=A(T119STRU)    Data structure
         CALL  DAFPC,              Data structure                      X
               ((R14),SMF119FT_FSStruct),                              X
               MF=(E,W_WRK)
         L     R14,=A(T119DST)     Dataset type
         CALL  DAFPC,              Dataset type                        X
               ((R14),SMF119FT_FSDsTtype),                             X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'Dur=',SMF119FT_FSDur,4), Transmission duration      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'Bytes=',SMF119FT_FSBytes,8), Transmission bytes     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'LR=',SMF119FT_FSLReply,4), Last reply               X
               MF=(E,W_WRK)
         L     R14,=A(T119LR)      Last reply
         CALL  DAFPC,              Last reply                          X
               ((R14),SMF119FT_FSLReply),                              X
               MF=(E,W_WRK)
         CLC   SMF119FT_FSM1,=CL008' ' Member present ?
         BE    FTFSNOMEM              . No
         MVC   W_MEMBER1,SMF119FT_FSM1 Member name
         CALL  DAFMC,              Move Comment                        X
               (=C'MEMBER=',W_MEMBER1,8), Member name                  X
               MF=(E,W_WRK)
FTFSNOMEM EQU   *
         LH    R9,W_SMFSL3         FTP Server host name length
         $VLM  W_HOST,SMF119FT_FSHostname,(R9) Host name
         CALL  DAFMC,              Move Comment                        X
               (=C'HOST=',W_HOST,8), Host name                         X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'RS=',SMF119FT_FSRS,8), Abnormal end info            X
               MF=(E,W_WRK)
         LH    R9,W_SMFSL4         FTP Server dataset 1 length
         $VLM  W_DSN1,SMF119FT_FSFileName1,(R9) Dataset name
         B     DAF1190             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  TCPIP Identification dereference
         DROP  R5                  FTP Server dereference
         DROP  R6                  FTP Server host name dereference
         DROP  R7                  FTP Server dataset 1 dereference
         DROP  R8                  FTP Server dataset 2 dereference
*
**       Subtype 72 - FTP Server Login Failure
*
E119T72  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF119Header,R3     SMF record reference
         LA    R1,SMF119HDLN       Header length
         AR    R3,R1               Address self defining section
         DROP  R3                  SMF record dereference
         USING SMF119SDefSect,R3   SMF record reference
         MVC   W_SMFSO1,SMF119IDOff TCPIP Identification offset
         MVC   W_SMFSL1,SMF119IDLen TCPIP Identification length
         MVC   W_SMFSN1,SMF119IDNum TCPIP Identification number
         L     R1,W_SMFSO1         TCPIP Identification offset
         LTR   R1,R1               TCPIP Identification offset ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSL1         TCPIP Identification length
         LTR   R1,R1               TCPIP Identification length ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSN1         TCPIP Identification number
         LTR   R1,R1               TCPIP Identification number ?
         BNP   DAF119IT            . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add TCPIP Identification offset
         USING SMF119Ident,R4      TCPIP Identification reference
         MVC   W_SMFSO2,SMF119S1Off FTP Server Logon Failure offset
         MVC   W_SMFSL2,SMF119S1Len FTP Server Logon Failure length
         MVC   W_SMFSN2,SMF119S1Num FTP Server Logon Failure number
         L     R1,W_SMFSO2         FTP Server Logon Failure offset
         LTR   R1,R1               FTP Server Logon Failure offset ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSL2         FTP Server Logon Failure length
         LTR   R1,R1               FTP Server Logon Failure length ?
         BNP   DAF119IT            . No - invalid triplet
         LH    R1,W_SMFSN2         FTP Server Logon Failure number
         LTR   R1,R1               FTP Server Logon Failure number ?
         BNP   DAF119IT            . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add FTP Server Logon Failure offset
         USING SMF119FT_FF,R5      FTP Server Logon Failure reference
         DROP  R3                  SMF record dereference
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF119Header,R3     SMF record reference
         $MSG  W_LOG,DAF518I       Move message template
         MVC   W_LOG+33(04),W_SYSTEM System id
         MVC   W_LOG+43(07),W_DATE Date
         MVC   W_LOG+56(11),W_TIME Time
         CALL  DAFMC,              Client User ID                      X
               (=C'FFU=',SMF119FT_FFUserID,8),                         X
               MF=(E,W_WRK)
         L     R14,=A(T119FFR)     Logon failure reason
         CALL  DAFPC,              Logon failure reason                X
               ((R14),SMF119FT_FFReason),                              X
               MF=(E,W_WRK)
         LA    R7,W_LOG+68         Message address
         L     R8,W_CMT@           Next comment address
         LA    R1,W_SRTCMT         Starting comment address
         SR    R8,R1               Move length
         $VLM  (R7),W_SRTCMT,(R8)  Move it
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAF1194             Exit, no check
         DROP  R3                  SMF record dereference
         DROP  R4                  TCPIP Identification dereference
         DROP  R5                  FTP Server Logon Failure dereferenc
*
**       Invalid Triplet
*
DAF119IT EQU   *
         CALL  DAFIT               Invalid triplet
         B     DAF1194             Exit, no check
DAF119   $EXIT                     Exit
.NOTCPIPX5     ANOP
         AIF   ('&RT_DFPACS' EQ '000').NODFPACS5
         TITLE 'DFPACS - DFSMSdfp ACS'
DFPACS   $ENTRY AMODE=31,RMODE=24  Entry
*
**       DFSMSdfp ACS
*
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCDACS,R3        SMF record reference
         LA    R4,SMFACSROV        ACS read only variables address
         USING ACERO,R4            ACS read only variables reference
         LA    R5,SMFACSRWV        ACS read write variables address
         USING ACERW,R5            ACS read write variables reference
         CALL  DAFMC,              Unit name                           X
               (=C'UNT=',ACEROUNT,8),                                  X
               MF=(E,W_WRK)
         MVC   W_USER,ACEROUSR     User identification
         MVC   W_GROUP,ACEROGRP    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         L     R14,=A(TACEDSG)     Dataset organization
         CALL  DAFPC,              Dataset organization                X
               ((R14),ACERODSG),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TACERCG)     Record organization
         CALL  DAFPC,              Record organization                 X
               ((R14),ACERORCG),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TACEDST)     Dataset type
         CALL  DAFPC,              Dataset type                        X
               ((R14),ACERODST),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TACEXMD)     Execution mode
         CALL  DAFPC,              Execution mode                      X
               ((R14),ACEROXMD),                                       X
               MF=(E,W_WRK)
         MVC   W_JOB1,ACEROJOB     Job name
         CLC   ACERODD,=CL008' '   Blank Data definition name ?
         BE    ACSNODDN            . Yes
         MVC   W_DD,ACERODD        Data definition name
         CALL  DAFMC,              Data definition name                X
               (=C'DD=',W_DD,8),                                       X
               MF=(E,W_WRK)
ACSNODDN EQU   *
         MVC   W_PGM,ACEROPGM      Program name
         CALL  DAFMC,              Program name                        X
               (=C'PGM=',W_PGM,8),                                     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Retention period days               X
               (=C'RTP=',ACERORTP,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Environment                         X
               (=C'ENV=',ACEROENV,8),                                  X
               MF=(E,W_WRK)
         MVC   W_DSN1,ACERODSN     Dataset name
         CALL  DAFMC,              Generation number                   X
               (=C'GEN=',ACEROGEN,8),                                  X
               MF=(E,W_WRK)
         L     R14,=A(TACEDNT)     Dataset name type
         CALL  DAFPC,              Dataset name type                   X
               ((R14),ACERODNT),                                       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of volume serials            X
               (=C'NVL=',ACERONVL,2),                                  X
               MF=(E,W_WRK)
         CALL  DAFPV,              Volume Serials                      X
               (ACERONVL,2,ACEROVOL,0,6),                              X
               MF=(E,W_WRK)
         CLC   ACEROMEM,=CL008' '  Member present ?
         BE    ACSNOMEM            . No
         MVC   W_MEMBER1,ACEROMEM  Member name
         CALL  DAFMC,              Member name                         X
               (=C'MEMBER=',W_MEMBER1,8),                              X
               MF=(E,W_WRK)
ACSNOMEM EQU   *
         CALL  DAFMB,              Tape file sequence number           X
               (=C'FNO=',ACEROFNO,4),                                  X
               MF=(E,W_WRK)
         L     R14,=A(TACELBL)     Tape label type
         CALL  DAFPC,              Tape label type                     X
               ((R14),ACEROLBL),                                       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Tape library name                   X
               (=C'TLB=',ACEROTLB,8),                                  X
               MF=(E,W_WRK)
         DROP  R3                  SMF record dereference
         DROP  R4                  ACS read only variables dereference
         DROP  R5                  ACS read write variables dereference
DFPACS   $EXIT                     Exit
.NODFPACS5     ANOP
         TITLE 'DAF8XR - 8x Relocate Section'
DAF8XR   $ENTRY AMODE=31,RMODE=24  Entry
         LH    R1,W_8XREL          Relocate offset
         LTR   R1,R1               Any relocate offset ?
         BNP   DAF8XR0             . No, get out
         L     R3,W_SMFBAS         Set SMF record base
         AR    R3,R1               Add offset to relocate section
         LA    R3,4(R3)            Adjust for rdw
         USING SMF8XREL,R3         Relocate section reference
         LH    R4,W_8XCNT          Relocate sections
         LTR   R4,R4               Any relocate sections ?
         BNP   DAF8XR0             . No, get out
         MVI   W_CHKDSN,C'N'       Dataset - No
E8XDTPNX XR    R5,R5               Clear length
*
**       Datatype Selection
*
         ICM   R5,B'0001',SMF8XDLN Insert data length
         CLC   SMF8XDTP,=AL1(01)   Resource name (old resource name) ?
         BE    E8XDTP01            . Yes, process it
         CLC   SMF8XDTP,=AL1(02)   New data set name ?
         BE    E8XDTP02            . Yes, process it
         CLC   SMF8XDTP,=AL1(03)   Access requested ?
         BE    E8XDTP03            . Yes, process it
         CLC   SMF8XDTP,=AL1(04)   Access allowed ?
         BE    E8XDTP04            . Yes, process it
         CLC   SMF8XDTP,=AL1(05)   Data set level number ?
         BE    E8XDTP05            . Yes, process it
         CLC   SMF8XDTP,=AL1(06)   RACF command-related data ?
         BE    E8XDTP06            . Yes, process it
         CLC   SMF8XDTP,=AL1(07)   DATA installation-defined data ?
         BE    E8XDTP07            . Yes, process it
         CLC   SMF8XDTP,=AL1(08)   User name from ADDUSER / ALTUSER ?
         BE    E8XDTP08            . Yes, process it
         CLC   SMF8XDTP,=AL1(09)   Resource name ?
         BE    E8XDTP09            . Yes, process it
         CLC   SMF8XDTP,=AL1(10)   Volume serial ?
         BE    E8XDTP10            . Yes, process it
         CLC   SMF8XDTP,=AL1(12)   Permit ID's ?
         BE    E8XDTP12            . Yes, process it
         CLC   SMF8XDTP,=AL1(13)   FROM resource name ?
         BE    E8XDTP13            . Yes, process it
         CLC   SMF8XDTP,=AL1(14)   Volume serial ?
         BE    E8XDTP14            . Yes, process it
         CLC   SMF8XDTP,=AL1(15)   Volume serial ?
         BE    E8XDTP15            . Yes, process it
         CLC   SMF8XDTP,=AL1(16)   OLDVOL Volume serial ?
         BE    E8XDTP16            . Yes, process it
         CLC   SMF8XDTP,=AL1(17)   Class name ?
         BE    E8XDTP17            . Yes, process it
         CLC   SMF8XDTP,=AL1(18)   MENTITY model resource name ?
         BE    E8XDTP18            . Yes, process it
         CLC   SMF8XDTP,=AL1(19)   Volume serial of model resource ?
         BE    E8XDTP19            . Yes, process it
         CLC   SMF8XDTP,=AL1(20)   Application name ?
         BE    E8XDTP20            . Yes, process it
         CLC   SMF8XDTP,=AL1(21)   Current class options ?
         BE    E8XDTP21            . Yes, process it
         CLC   SMF8XDTP,=AL1(24)   Resource name ADDMEM keyword ?
         BE    E8XDTP24            . Yes, process it
         CLC   SMF8XDTP,=AL1(25)   Resource name DELMEM keyword ?
         BE    E8XDTP25            . Yes, process it
         CLC   SMF8XDTP,=AL1(26)   Class name from FCLASS ?
         BE    E8XDTP26            . Yes, process it
         CLC   SMF8XDTP,=AL1(27)   Class name from CLASSACT/NOCLASSACT?
         BE    E8XDTP27            . Yes, process it
         CLC   SMF8XDTP,=AL1(28)   Class name from CLAUTH/NOCLAUTH ?
         BE    E8XDTP28            . Yes, process it
         CLC   SMF8XDTP,=AL1(30)   RACF database status ?
         BE    E8XDTP30            . Yes, process it
         CLC   SMF8XDTP,=AL1(31)   Dataset name from RVARY ?
         BE    E8XDTP31            . Yes, process it
         CLC   SMF8XDTP,=AL1(32)   RACF status ?
         BE    E8XDTP32            . Yes, process it
         CLC   SMF8XDTP,=AL1(33)   Profile name ?
         BE    E8XDTP33            . Yes, process it
         CLC   SMF8XDTP,=AL1(34)   Class name GENERIC/NOGENERIC ?
         BE    E8XDTP34            . Yes, process it
         CLC   SMF8XDTP,=AL1(37)   Model name ?
         BE    E8XDTP37            . Yes, process it
         CLC   SMF8XDTP,=AL1(38)   Owner name ?
         BE    E8XDTP38            . Yes, process it
         CLC   SMF8XDTP,=AL1(42)   Class name RACLIST/NORACLIST ?
         BE    E8XDTP42            . Yes, process it
         CLC   SMF8XDTP,=AL1(44)   Any segment data, except BASE ?
         BE    E8XDTP44            . Yes, process it
         CLC   SMF8XDTP,=AL1(46)   Log String ?
         BE    E8XDTP46            . Yes, process it
         CLC   SMF8XDTP,=AL1(47)   Job name ?
         BE    E8XDTP47            . Yes, process it
         CLC   SMF8XDTP,=AL1(49)   User name from ACEE ?
         BE    E8XDTP49            . Yes, process it
         CLC   SMF8XDTP,=AL1(50)   Security label name added ?
         BE    E8XDTP50            . Yes, process it
         CLC   SMF8XDTP,=AL1(51)   Security label name deleted ?
         BE    E8XDTP51            . Yes, process it
         CLC   SMF8XDTP,=AL1(53)   User security token ?
         BE    E8XDTP53            . Yes, process it
         CLC   SMF8XDTP,=AL1(54)   Resource security token ?
         BE    E8XDTP54            . Yes, process it
         CLC   SMF8XDTP,=AL1(55)   Key to link audit records together ?
         BE    E8XDTP55            . Yes, process it
         CLC   SMF8XDTP,=AL1(62)   Security label change dataset name ?
         BE    E8XDTP62            . Yes, process it
         CLC   SMF8XDTP,=AL1(66)   Partitioned dataset name ?
         BE    E8XDTP66            . Yes, process it
         $MSG  W_LOG,DAF613I       Move message template
         MVC   W_LOG+09(L'W_RECTYP),W_RECTYP Record Type
         MVC   W_LOG+13(L'W_SUBTYP),W_SUBTYP Subtype
         MVC   W_LOG+17(L'W_DATE),W_DATE Record Date
         MVC   W_LOG+25(L'W_TIME),W_TIME Record Time
         MVC   W_LOG+37(22),=CL22'Unknown Datatype=x"  "'
         $HEX  W_LOG+56,SMF8XDTP,LEN=1 Datatype
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     E8XDTPIN            Next relocate section
*
**       Datatype 01 - Resource name (old resource name)
*
E8XDTP01 EQU   *
         $VLM  W_DSN1,SMF8XDTA,(R5) dataset 1
         B     E8XDTPIN            Next relocate section
*
**       Datatype 02 - New data set name
*
E8XDTP02 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 03 - Access requested
*
E8XDTP03 EQU   *
         L     R14,=A(T80AAR)      Access authority requested
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF8XDTA),   Access authority requested          X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 04 - Access allowed
*
E8XDTP04 EQU   *
         L     R14,=A(T80AAA)      Access authority allowed
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF8XDTA),   Access authority allowed            X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 05 - Data set level number
*
E8XDTP05 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 06 - RACF command-related data
*
E8XDTP06 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 07 - DATA installation-defined data
*
E8XDTP07 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 08 - User name from ADDUSER / ALTUSER
*
E8XDTP08 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 09 - Resource name
*
E8XDTP09 EQU   *
         $VLM  W_DSN1,SMF8XDTA,(R5) dataset 1
         B     E8XDTPIN            Next relocate section
*
**       Datatype 10 - Volume serial
*
E8XDTP10 EQU   *
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,SMF8XDTA,1,6),                                 X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 12 - Permit ID's
*
E8XDTP12 EQU   *
         XR    R0,R0               Clear R0
         LA    R1,1(R5)            Length
         D     R0,=F'9'            Determine number of ID's
         LR    R7,R1               Number of ID's
         LA    R8,SMF8XDTA         Input ID
E8XNXT12 $FILL W_WRK,C' '          Clear work area
         LA    R15,W_WRK           Output ID
         MVC   0(8,R15),1(R8)      Move the ID
         LA    R8,9(R8)            Next input ID
         CALL  DAFMC,              Move Comment                        X
               (=C'ID=',W_WRK,128),   ID's                             X
               MF=(E,W_WRK)
         BCT   R7,E8XNXT12         Next ID
         B     E8XDTPIN            Next relocate section
*
**       Datatype 13 - FROM resource name
*
E8XDTP13 EQU   *
         CALL  DAFMC,              FROM resource name                  X
               (=C'FROM=',SMF8XDTA,(R5)),                              X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 14 - Volume serial
*
E8XDTP14 EQU   *
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,SMF8XDTA,0,6),                                 X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 15 - Volume serial
*
E8XDTP15 EQU   *
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,SMF8XDTA,0,6),                                 X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 16 - OLDVOL Volume serial
*
E8XDTP16 EQU   *
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,SMF8XDTA,0,6),                                 X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 17 - Class name
*
E8XDTP17 EQU   *
         $VLM  W_CLASS,SMF8XDTA,(R5) Class name
         CALL  DAFMC,              Class name                          X
               (=C'CLASS=',W_CLASS,8),                                 X
               MF=(E,W_WRK)
         CLC   W_CLASS(7),=CL007'DATASET' Dataset ?
         BNE   E8XDSN17            . No
         MVI   W_CHKDSN,C'Y'       Dataset - Yes
         B     E8XDTPIN            Next relocate section
E8XDSN17 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 18 - MENTITY model resource name
*
E8XDTP18 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 19 - Volume serial of model resource
*
E8XDTP19 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 20 - Application name
*
E8XDTP20 EQU   *
         CALL  DAFMC,              Application name                    X
               (=C'APPL=',SMF8XDTA,(R5)),                              X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 21 - Current class options
*
E8XDTP21 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 24 - Resource name ADDMEM keyword
*
E8XDTP24 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 25 - Resource name DELMEM keyword
*
E8XDTP25 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 26 - Class name from FCLASS
*
E8XDTP26 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 27 - Class name from CLASSACT/NOCLASSACT
*
E8XDTP27 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 28 - Class name from CLAUTH/NOCLAUTH
*
E8XDTP28 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 30 - RACF database status
*
E8XDTP30 EQU   *
*        MVC   W_DSN1,SMF81RDS     RACF dataset
*        CALL  DAFMC,              RACF dataset                       X
*              (=C'RDS=',SMF81RDS,44),                                X
*              MF=(E,W_WRK)
*        MVC   W_VOL1,SMF81RVL     RACF volume serial
         CALL  DAFMC,              RACF volume serial                  X
               (=C'RVL=',W_VOL1,6),                                    X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'XXX=',SMF8XDTA,55),                                 X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 31 - Dataset name from RVARY
*
E8XDTP31 EQU   *
         CALL  DAFMC,              Dataset name from RVARY             X
               (=C'DSN_RVARY=',SMF8XDTA,(R5)),                         X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 32 - RACF status
*
E8XDTP32 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 33 - Profile name
*
E8XDTP33 EQU   *
         LA    R3,1(,R3)           Skip flag byte
         BCTR  R5,0                Subtract flag byte from length
         $VLM  W_DSN2,SMF8XDTA,(R5) Profile name
         BCTR  R3,0                Flag byte reset
         CALL  DAFMC,              Move Comment                        X
               (=C'PROFILE=',W_DSN2,44), Profile name                  X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 34 - Class name GENERIC/NOGENERIC
*
E8XDTP34 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 37 - Model name
*
E8XDTP37 EQU   *
         CALL  DAFMC,              Model name                          X
               (=C'MODEL=',SMF8XDTA,(R5)),                             X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 38 - Owner name
*
E8XDTP38 EQU   *
         CALL  DAFMC,              Owner name                          X
               (=C'OWNER=',SMF8XDTA,(R5)),                             X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 42 - Class name RACLIST/NORACLIST
*
E8XDTP42 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 44 - Any segment data, except BASE
*
E8XDTP44 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 46 - Log String
*
E8XDTP46 EQU   *
         CALL  DAFMC,              Log String                          X
               (=C'LOGSTR=',SMF8XDTA,(R5)),                            X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 47 - Job name
*
E8XDTP47 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 49 - User name from ACEE
*
E8XDTP49 EQU   *
         L     R8,W_TBLTRT         Set TRT table base
         USING D_TBLTRT,R8         TRT table reference
         $VLM  W_NAME,SMF8XDTA,(R5) Name
         $FILL W_TRT,X'00'         Blank TRT
         MVI   W_TRT+C' ',X'FF'    Blank TRT
E8XTRT49 LA    R6,W_NAME           Keyword start
         $VLTRT (R6),W_TRT,(R5)    Blank ?
         BZ    E8XCLI49            . No - move name
         CLI   1(R1),C' '          Double blank ?
         BE    E8XCLI49            Yes - move name
         MVI   0(R1),C'_'          Change blank to underscore
         B     E8XTRT49            Check again
E8XCLI49 CLI   W_NAME+19,C'_'      Last character underscore ?
         BNE   E8XMVC49            No - move name
         MVI   W_NAME+19,C' '      Change last underscore to blank
E8XMVC49 CALL  DAFMC,              Move Comment                        X
               (=C'NAME=',W_NAME,20), Name                             X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
         DROP  R8                  TRT table reference
*
**       Datatype 50 - Security label name added
*
E8XDTP50 EQU   *
         CALL  DAFMC,              Security label name added           X
               (=C'SECLABEL_ADDED=',SMF8XDTA,(R5)),                    X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 51 - Security label name deleted
*
E8XDTP51 EQU   *
         CALL  DAFMC,              Security label name deleted         X
               (=C'SECLABEL_DELETED=',SMF8XDTA,(R5)),                  X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
*
**       Datatype 53 - User security token
*
E8XDTP53 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 54 - Resource security token
*
E8XDTP54 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 55 - Key to link audit records together
*
E8XDTP55 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 62 - Security label change dataset name
*
         CALL  DAFMC,              Security label change dataset name  X
               (=C'DSN_SECLABEL=',SMF8XDTA,(R5)),                      X
               MF=(E,W_WRK)
E8XDTP62 EQU   *
         B     E8XDTPIN            Next relocate section
*
**       Datatype 66 - Partitioned data set name
*
E8XDTP66 EQU   *
         CALL  DAFMC,              Partitioned dataset name            X
               (=C'DSN_PDS=',SMF8XDTA,(R5)),                           X
               MF=(E,W_WRK)
         B     E8XDTPIN            Next relocate section
E8XDTPIN XR    R1,R1               Clear
         IC    R1,SMF8XDLN         Length
         AH    R1,=H'2'            SMF8XDTP+SMF8XDLN
         AR    R3,R1               Next Relocate section
         BCT   R4,E8XDTPNX         Any more relocate sections ?
         DROP  R3                  Relocate section dereference
DAF8XR   $EXIT                     Exit
         AIF   ('&RT_AO' EQ '000').NOAO5
         TITLE 'Allocation Optimizer (AO)'
AO       $ENTRY AMODE=31,RMODE=24 Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFREC,R3           SMF record reference
         CLC   SMFRECSTP,=AL2(01)  Subsystem Activity ?
         BE    AOT01               . Yes
         CLC   SMFRECSTP,=AL2(03)  Processing Activity ?
         BE    AOT03               . Yes
         B     AO4                 Exit - No criteria check
         DROP  R3                  SMF record dereference
*
**       Subtype 01 - Subsystem Activity
*
AOT01    EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFREC,R3           SMF record reference
         MVC   W_SMFSO1,SMFRECSOF  Subsystem identification offset
         MVC   W_SMFSL1,SMFRECSLN  Subsystem identification length
         MVC   W_SMFSN1,SMFRECSON  Subsystem identification number
         L     R1,W_SMFSO1         Subsystem identification offset
         LTR   R1,R1               Subsystem identification offset ?
         BNP   AOIT                . No - invalid triplet
         LH    R1,W_SMFSL1         Subsystem identification length
         LTR   R1,R1               Subsystem identification length ?
         BNP   AOIT                . No - invalid triplet
         LH    R1,W_SMFSN1         Subsystem identification number
         LTR   R1,R1               Subsystem identification number ?
         BNP   AOIT                . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Subsystem identification
         USING SMFRECSIS,R4        Subsystem identification reference
         MVC   W_SMFSO2,SMFRECAOF  Subsystem activity offset
         MVC   W_SMFSL2,SMFRECALN  Subsystem activity length
         MVC   W_SMFSN2,SMFRECAON  Subsystem activity number
         L     R1,W_SMFSO2         Subsystem activity offset
         LTR   R1,R1               Subsystem activity offset ?
         BNP   AOIT                . No - invalid triplet
         LH    R1,W_SMFSL2         Subsystem activity length
         LTR   R1,R1               Subsystem activity length ?
         BNP   AOIT                . No - invalid triplet
         LH    R1,W_SMFSN2         Subsystem activity number
         LTR   R1,R1               Subsystem activity number ?
         BNP   AOIT                . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address Subsystem activity
         USING SMFRECSAS,R5        Subsystem activity reference
         CALL  DAFMC,              Subsystem name                      X
               (=C'SSN=',SMFRECSSN,4),                                 X
               MF=(E,W_WRK)
         MVC   W_JOB1,SMFRECSTC    Started task name
         CALL  DAFMC,              Started task name                   X
               (=C'STC=',SMFRECSTC,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Active options member               X
               (=C'SOM=',SMFRECSOM,8),                                 X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMFRECSCD    Control dataset name
         B     AO0                 Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Subsystem identification dereference
         DROP  R5                  Subsystem activity dereference
*
**       Subtype 03 - Processing Activity
*
AOT03    EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFREC,R3           SMF record reference
         MVC   W_SMFSO1,SMFRECSOF  Subsystem identification offset
         MVC   W_SMFSL1,SMFRECSLN  Subsystem identification length
         MVC   W_SMFSN1,SMFRECSON  Subsystem identification number
         L     R1,W_SMFSO1         Subsystem identification offset
         LTR   R1,R1               Subsystem identification offset ?
         BNP   AOIT                . No - invalid triplet
         LH    R1,W_SMFSL1         Subsystem identification length
         LTR   R1,R1               Subsystem identification length ?
         BNP   AOIT                . No - invalid triplet
         LH    R1,W_SMFSN1         Subsystem identification number
         LTR   R1,R1               Subsystem identification number ?
         BNP   AOIT                . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Subsystem identification
         USING SMFRECSIS,R4        Subsystem identification reference
         MVC   W_SMFSO2,SMFRECJOF  Job identification offset
         MVC   W_SMFSL2,SMFRECJLN  Job identification length
         MVC   W_SMFSN2,SMFRECJON  Job identification number
         L     R1,W_SMFSO2         Job identification offset
         LTR   R1,R1               Job identification offset ?
         BNP   AOIT                . No - invalid triplet
         LH    R1,W_SMFSL2         Job identification length
         LTR   R1,R1               Job identification length ?
         BNP   AOIT                . No - invalid triplet
         LH    R1,W_SMFSN2         Job identification number
         LTR   R1,R1               Job identification number ?
         BNP   AOIT                . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address Job identification
         USING SMFRECJIS,R5        Job identification reference
         MVC   W_SMFSO3,SMFRECPOF  Processing activity offset
         MVC   W_SMFSL3,SMFRECPLN  Processing activity length
         MVC   W_SMFSN3,SMFRECPON  Processing activity number
         L     R1,W_SMFSO3         Processing activity offset
         LTR   R1,R1               Processing activity offset ?
         BNP   AOIT                . No - invalid triplet
         LH    R1,W_SMFSL3         Processing activity length
         LTR   R1,R1               Processing activity length ?
         BNP   AOIT                . No - invalid triplet
         LH    R1,W_SMFSN3         Processing activity number
         LTR   R1,R1               Processing activity number ?
         BNP   AOIT                . No - invalid triplet
         L     R6,W_SMFBAS         Address SMF record
         A     R6,W_SMFSO3         Address Processing activity
         USING SMFRECPAS,R6        Processing activity reference
         CALL  DAFMC,              Subsystem name                      X
               (=C'SSN=',SMFRECSSN,4),                                 X
               MF=(E,W_WRK)
         MVC   W_JOB1,SMFRECSTC    Started task name
         CALL  DAFMC,              Active options member               X
               (=C'SOM=',SMFRECSOM,8),                                 X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMFRECSCD    Control dataset name
         L     R14,=A(TAOSF1)      Subsystem flag 1
         CALL  DAFPT,              Subsystem flag 1                    X
               ((R14),SMFRECSF1),                                      X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         MVC   W_JOB1,SMFRECJBN    Job name
         CALL  DAFMC,              Step name                           X
               (=C'STN=',SMFRECSTN,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              PROC step name                      X
               (=C'PST=',SMFRECPST,8),                                 X
               MF=(E,W_WRK)
         MVC   W_PGM,SMFRECPGM Program name
         CALL  DAFMC,              Program name                        X
               (=C'PGM=',W_PGM,8),                                     X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMFRECDSN    Dataset name
         MVC   W_DD,SMFRECDDN      Data definition name
         CALL  DAFMC,              Data definition name                X
               (=C'DD=',W_DD,8),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TAOAST)      Address space type
         CALL  DAFPT,              Address space type                  X
               ((R14),SMFRECAST),                                      X
               MF=(E,W_WRK)
         L     R14,=A(TAODSG)      Dataset organization
         CALL  DAFPT,              Dataset organization                X
               ((R14),SMFRECDSG),                                      X
               MF=(E,W_WRK)
         L     R14,=A(TAOPF1)      Processing flag 1
         CALL  DAFPT,              Processing flag 1                   X
               ((R14),SMFRECPF1),                                      X
               MF=(E,W_WRK)
         L     R14,=A(TAOPF2)      Processing flag 2
         CALL  DAFPT,              Processing flag 2                   X
               ((R14),SMFRECPF2),                                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of tracks released           X
               (=C'TRKR=',SMFRECTRKR,4),                               X
               MF=(E,W_WRK)
         B     AO0                 Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Subsystem identification dereference
         DROP  R5                  Job identification dereference
         DROP  R6                  Processing activity dereference
*
**       Invalid Triplet
*
AOIT     EQU    *
         CALL  DAFIT               Invalid triplet
         B     AO4                 Exit, no check
AO       $EXIT                     Exit
.NOAO5   ANOP
         AIF   ('&RT_HSMFSR' EQ '000').NOHSMFSR5
         TITLE 'HSMFSR - DFSMShsm FSR Record'
**********************************************************************
*  Notes:          If full volume dump hex zeroes dsn - bypass       *
**********************************************************************
HSMFSR   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   FSRTYPE,=AL1(13)    Full volume dump ?
         BNE   HSMFSRNOC           . No, do not check dsn
         CLC   FSRDSN,=44X'00'     DSN hex zeroes ?
         BE    HSMFSR4             . Yes, bypass the record
HSMFSRNOC EQU   *
         MVC   W_DSN1,FSRDSN       Dataset name
         MVC   W_JOB1,FSRJBN       Job name
         MVC   W_USER,FSRUID       User identification
         L     R14,=A(HSMTYPE)     Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),FSRTYPE),    Type                                X
               MF=(E,W_WRK)
         MVC   W_GROUP,FSRGRP      Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         MVC   W_VOL1,FSRFVOL      From volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'FVOL=',W_VOL1,6), From volume serial                X
               MF=(E,W_WRK)
         MVC   W_VOL2,FSRTVOL      To volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'TVOL=',W_VOL2,6), To volume serial                  X
               MF=(E,W_WRK)
         CALL  DAFDSORG,           Process DSORG                       X
               (FSRDORG,W_DSORG),                                      X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DSORG=',W_DSORG,3), DSORG                           X
               MF=(E,W_WRK)
         CALL  DAFRECFM,           RECFM                               X
               (FSRRECFM,W_RECFM),                                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'RECFM=',W_RECFM),  RECFM                            X
               MF=(E,W_WRK)
         MVC   W_STORCLAS,FSRSCNAM Storage class name
         CALL  DAFMC,              Move Comment                        X
               (=C'STORCLAS=',W_STORCLAS,8),        Storage class name X
               MF=(E,W_WRK)
         MVC   W_MGMTCLAS,FSRMCNAM Management class name
         CALL  DAFMC,              Move Comment                        X
               (=C'MGMTCLAS=',W_MGMTCLAS,8),     Management class name X
               MF=(E,W_WRK)
         DROP  R3                  SMF record dereference
HSMFSR   $EXIT                     Exit
.NOHSMFSR5     ANOP
         AIF   ('&RT_NFTP' EQ '000').NONFTP5
         TITLE 'NetView FTP (NFTP)'
NFTP     $ENTRY AMODE=31,RMODE=24 Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCDXX,R3         SMF record reference
         CLC   SMFXXSTY,=AL2(01)   ADD Queue ?    x'01'
         BE    NFTPT01             . Yes
         CLC   SMFXXSTY,=AL2(34)   OBTAIN Queue ? x'22'
         BE    NFTPT34             . Yes
         CLC   SMFXXSTY,=AL2(36)   NOTIFY Queue ? x'24'
         BE    NFTPT36             . Yes
         CLC   SMFXXSTY,=AL2(81)   Server Finished Request ? x'51'
         BE    NFTPT81             . Yes
         B     NFTP4               Exit - No criteria check
         DROP  R3                  SMF record dereference
*
**       Subtype 01 x'01' - ADD Queue
*
NFTPT01  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCDXX,R3         SMF record reference
         MVC   W_SMFSO1,SMFXXPRS   Product offset
         MVC   W_SMFSL1,SMFXXPRL   Product length
         MVC   W_SMFSN1,SMFXXPRN   Product number
         L     R1,W_SMFSO1         Product offset
         LTR   R1,R1               Product offset ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSL1         Product length
         LTR   R1,R1               Product length ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSN1         Product number
         LTR   R1,R1               Product number ?
         BNP   NFTPIT              . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Product
         USING SMFXXPRO,R4         Product reference
         MVC   W_SMFSO2,SMFXXDSS   Data offset
         MVC   W_SMFSL2,SMFXXDSL   Data length
         MVC   W_SMFSN2,SMFXXDSN   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   NFTPIT              . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address Data
         USING SMFXXADD,R5         Data reference
         MVC   W_JOB1,DVGAORIG     Originator
         CALL  DAFMC,              Originator                          X
               (=C'ORIG=',DVGAORIG,8),                                 X
               MF=(E,W_WRK)
         L     R14,=A(TARORI)      Requestor identification
         CALL  DAFPC,              Requestor identification            X
               ((R14),DVGARORI),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TAXMOD)      Transfer mode
         CALL  DAFPC,              Transfer mode                       X
               ((R14),DVGAXMOD),                                       X
               MF=(E,W_WRK)
         $HEX  W_FULL1,DVGARETC,LEN=2 Return code
         CALL  DAFMC,              Return code                         X
               (=C'RETC=',W_FULL1,4),                                  X
               MF=(E,W_WRK)
         $HEX  W_FULL1,DVGAREAC,LEN=2 Reason code
         CALL  DAFMC,              Reason code                         X
               (=C'REAC=',W_FULL1,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Queuing priority (0-9)              X
               (=C'PRTY=',DVGAPRTY,1),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Request class (0-9,A-Z)             X
               (=C'CLAS=',DVGACLAS,1),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Request number                      X
               (=C'URI=',DVGAURI,4),                                   X
               MF=(E,W_WRK)
         CALL  DAFMD,              Command enter date                  X
               (=C'SDTE=',DVGASDTE),                                   X
               MF=(E,W_WRK)
         CALL  DAFMT,              Command enter time                  X
               (=C'STME=',DVGASTME),                                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Originator                          X
               (=C'ORIR=',DVGAORIR,8),                                 X
               MF=(E,W_WRK)
         MVC   W_DSN1,DVGADSNN     Local dataset name
         CALL  DAFMD,              Request receipt date                X
               (=C'RDTE=',DVGARDTE),                                   X
               MF=(E,W_WRK)
         CALL  DAFMT,              Request receipt time                X
               (=C'RTME=',DVGARTME),                                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of PDS members selected/excl X
               (=C'PDS=',DVGAPDS,4),                                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Remote node id or remote LU name    X
               (=C'RNAM=',DVGARNAM,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMD,              Not before date                     X
               (=C'BDTE=',DVGABDTE),                                   X
               MF=(E,W_WRK)
         CALL  DAFMT,              Not before time                     X
               (=C'BTME=',DVGABTME),                                   X
               MF=(E,W_WRK)
         CALL  DAFMD,              Not after date                      X
               (=C'ADTE=',DVGAADTE),                                   X
               MF=(E,W_WRK)
         CALL  DAFMT,              Not after time                      X
               (=C'ATME=',DVGAATME),                                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Member name                         X
               (=C'DMEM=',DVGADMEM,8),                                 X
               MF=(E,W_WRK)
         L     R14,=A(TATYP1)      File type primary
         CALL  DAFPC,              File type primary                   X
               ((R14),DVGATYP1),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TATYP2)      File type secondary
         CALL  DAFPC,              File type secondary                 X
               ((R14),DVGATYP2),                                       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of requests waiting          X
               (=C'WAIT=',DVGAWAIT,4),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of requests waiting restart  X
               (=C'REST=',DVGAREST,4),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of requests active           X
               (=C'ACT=',DVGAACT,4),                                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of requests finished         X
               (=C'FIN=',DVGAFIN,4),                                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of unused queue slots        X
               (=C'UQS=',DVGAUQS,4),                                   X
               MF=(E,W_WRK)
         B     NFTP0               Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Product dereference
         DROP  R5                  Data dereference
*
**       Subtype 34 x'22' - OBTAIN Queue
*
NFTPT34  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCDXX,R3         SMF record reference
         MVC   W_SMFSO1,SMFXXPRS   Product offset
         MVC   W_SMFSL1,SMFXXPRL   Product length
         MVC   W_SMFSN1,SMFXXPRN   Product number
         L     R1,W_SMFSO1         Product offset
         LTR   R1,R1               Product offset ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSL1         Product length
         LTR   R1,R1               Product length ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSN1         Product number
         LTR   R1,R1               Product number ?
         BNP   NFTPIT              . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Product
         USING SMFXXPRO,R4         Product reference
         MVC   W_SMFSO2,SMFXXDSS   Data offset
         MVC   W_SMFSL2,SMFXXDSL   Data length
         MVC   W_SMFSN2,SMFXXDSN   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   NFTPIT              . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address Data
         USING SMFXXOBT,R5         Data reference
         MVC   W_JOB1,DVGBJNAM     Jobname of the server
         CALL  DAFMC,              Jobname of the server               X
               (=C'JNAM=',DVGBJNAM,8),                                 X
               MF=(E,W_WRK)
         L     R14,=A(TBRORI)      Requestor identification
         CALL  DAFPC,              Requestor identification            X
               ((R14),DVGBRORI),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TBXMOD)      Transfer mode
         CALL  DAFPC,              Transfer mode                       X
               ((R14),DVGBXMOD),                                       X
               MF=(E,W_WRK)
         $HEX  W_FULL1,DVGBRETC,LEN=2 Return code
         CALL  DAFMC,              Return code                         X
               (=C'RETC=',W_FULL1,4),                                  X
               MF=(E,W_WRK)
         $HEX  W_FULL1,DVGBREAC,LEN=2 Reason code
         CALL  DAFMC,              Reason code                         X
               (=C'REAC=',W_FULL1,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Queuing priority (0-9)              X
               (=C'PRTY=',DVGBPRTY,1),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Request class (0-9,A-Z)             X
               (=C'CLAS=',DVGBCLAS,1),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Request number                      X
               (=C'URI=',DVGBURI,4),                                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              LU name of local server             X
               (=C'LUNA=',DVGBLUNA,8),                                 X
               MF=(E,W_WRK)
         MVC   W_DSN1,DVGBDSNN     Local dataset name
         L     R14,=A(TBCOMP)      Compression method
         CALL  DAFPC,              Compression method                  X
               ((R14),DVGBCOMP),                                       X
               MF=(E,W_WRK)
         B     NFTP0               Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Product dereference
         DROP  R5                  Data dereference
*        B     NFTP4               Exit - No criteria check
*
**       Subtype 36 x'24' - NOTIFY Queue
*
NFTPT36  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCDXX,R3         SMF record reference
         MVC   W_SMFSO1,SMFXXPRS   Product offset
         MVC   W_SMFSL1,SMFXXPRL   Product length
         MVC   W_SMFSN1,SMFXXPRN   Product number
         L     R1,W_SMFSO1         Product offset
         LTR   R1,R1               Product offset ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSL1         Product length
         LTR   R1,R1               Product length ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSN1         Product number
         LTR   R1,R1               Product number ?
         BNP   NFTPIT              . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Product
         USING SMFXXPRO,R4         Product reference
         MVC   W_SMFSO2,SMFXXDSS   Data offset
         MVC   W_SMFSL2,SMFXXDSL   Data length
         MVC   W_SMFSN2,SMFXXDSN   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   NFTPIT              . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address Data
         USING SMFXXNOT,R5         Data reference
         MVC   W_JOB1,DVGNJNAM     Jobname of the server
         CALL  DAFMC,              Jobname of the server               X
               (=C'JNAM=',DVGNJNAM,8),                                 X
               MF=(E,W_WRK)
         L     R14,=A(TNRORI)      Requestor identification
         CALL  DAFPC,              Requestor identification            X
               ((R14),DVGNRORI),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TNXMOD)      Transfer mode
         CALL  DAFPC,              Transfer mode                       X
               ((R14),DVGNXMOD),                                       X
               MF=(E,W_WRK)
         $HEX  W_FULL1,DVGNRETC,LEN=2 Return code of NOTIFY
         CALL  DAFMC,              Return code of NOTIFY               X
               (=C'RETC=',W_FULL1,4),                                  X
               MF=(E,W_WRK)
         $HEX  W_FULL1,DVGNREAC,LEN=2 Reason code of NOTIFY
         CALL  DAFMC,              Reason code of NOTIFY               X
               (=C'REAC=',W_FULL1,4),                                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Queuing priority (0-9)              X
               (=C'PRTY=',DVGNPRTY,1),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Request class (0-9,A-Z)             X
               (=C'CLAS=',DVGNCLAS,1),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Request number                      X
               (=C'URI=',DVGNURI,4),                                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              LU name of requesting server        X
               (=C'LUNA=',DVGNLUNA,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Transfer byte rate                  X
               (=C'BYTE=',DVGNBYTE,4),                                 X
               MF=(E,W_WRK)
         $HEX  W_FULL1,DVGNTRRC,LEN=2 Return code of file transfer
         CALL  DAFMC,              Return code of file transfer        X
               (=C'TRRC=',W_FULL1,4),                                  X
               MF=(E,W_WRK)
         $HEX  W_FULL1,DVGNTRSC,LEN=2 Reason code of file transfer
         CALL  DAFMC,              Reason code of file transfer        X
               (=C'TRSC=',W_FULL1,4),                                  X
               MF=(E,W_WRK)
         MVC   W_DSN1,DVGNDSNN     Local dataset name
         L     R14,=A(TNCOMP)      Compression method
         CALL  DAFPC,              Compression method                  X
               ((R14),DVGNCOMP),                                       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Compression factor                  X
               (=C'CFAC=',DVGNCFAC,1),                                 X
               MF=(E,W_WRK)
         L     R14,=A(TNTYPE)      Notify type
         CALL  DAFPC,              Notify type                         X
               ((R14),DVGNTYPE),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TNRTYP)      Restart type
         CALL  DAFPC,              Restart type                        X
               ((R14),DVGNRTYP),                                       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Remote server LU name               X
               (=C'RLUN=',DVGNRLUN,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Remote node                         X
               (=C'RNOD=',DVGNRNOD,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMD,              Request start date                  X
               (=C'SDTE=',DVGNSDTE),                                   X
               MF=(E,W_WRK)
         CALL  DAFMT,              Request start time                  X
               (=C'STME=',DVGNSTME),                                   X
               MF=(E,W_WRK)
         CALL  DAFMD,              Request end date                    X
               (=C'EDTE=',DVGNEDTE),                                   X
               MF=(E,W_WRK)
         CALL  DAFMT,              Request end time                    X
               (=C'ETME=',DVGNETME),                                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Member name                         X
               (=C'DMEM=',DVGNDMEM,8),                                 X
               MF=(E,W_WRK)
         L     R14,=A(TNTYP1)      File type primary
         CALL  DAFPC,              File type primary                   X
               ((R14),DVGNTYP1),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TNTYP2)      File type secondary
         CALL  DAFPC,              File type secondary                 X
               ((R14),DVGNTYP2),                                       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of requests waiting          X
               (=C'WAIT=',DVGNWAIT,4),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of requests waiting restart  X
               (=C'REST=',DVGNREST,4),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of requests active           X
               (=C'ACT=',DVGNACT,4),                                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of requests finished         X
               (=C'FIN=',DVGNFIN,4),                                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Number of unused queue slots        X
               (=C'UQS=',DVGNUQS,4),                                   X
               MF=(E,W_WRK)
         B     NFTP0               Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Product dereference
         DROP  R5                  Data dereference
*
**       Subtype 81 x'51' - Server Finished Request
*
NFTPT81  EQU   *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCDXX,R3         SMF record reference
         MVC   W_SMFSO1,SMFXXPRS   Product offset
         MVC   W_SMFSL1,SMFXXPRL   Product length
         MVC   W_SMFSN1,SMFXXPRN   Product number
         L     R1,W_SMFSO1         Product offset
         LTR   R1,R1               Product offset ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSL1         Product length
         LTR   R1,R1               Product length ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSN1         Product number
         LTR   R1,R1               Product number ?
         BNP   NFTPIT              . No - invalid triplet
         L     R4,W_SMFBAS         Address SMF record
         A     R4,W_SMFSO1         Address Product
         USING SMFXXPRO,R4         Product reference
         MVC   W_SMFSO2,SMFXXDSS   Data offset
         MVC   W_SMFSL2,SMFXXDSL   Data length
         MVC   W_SMFSN2,SMFXXDSN   Data number
         L     R1,W_SMFSO2         Data offset
         LTR   R1,R1               Data offset ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSL2         Data length
         LTR   R1,R1               Data length ?
         BNP   NFTPIT              . No - invalid triplet
         LH    R1,W_SMFSN2         Data number
         LTR   R1,R1               Data number ?
         BNP   NFTPIT              . No - invalid triplet
         L     R5,W_SMFBAS         Address SMF record
         A     R5,W_SMFSO2         Address Data
         USING SMFXXSFR,R5         Data reference
         MVC   W_JOB1,DVGSJNAM     Jobname of the server
         CALL  DAFMC,              Jobname of the server               X
               (=C'JNAM=',DVGSJNAM,8),                                 X
               MF=(E,W_WRK)
         L     R14,=A(TSXMOD)      Transfer mode
         CALL  DAFPC,              Transfer mode                       X
               ((R14),DVGSXMOD),                                       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Server role                         X
               (=C'ROLE=',DVGSROLE,3),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Request number                      X
               (=C'URI=',DVGSURI,4),                                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Queuing priority (0-9)              X
               (=C'PRTY=',DVGSPRTY,1),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Request class (0-9,A-Z)             X
               (=C'CLAS=',DVGSCLAS,1),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Request name                        X
               (=C'RQNM=',DVGSRQNM,8),                                 X
               MF=(E,W_WRK)
         MVC   W_USER,DVGSRORI     Originator ID
         CALL  DAFMC,              Originator ID                       X
               (=C'RORI=',DVGSRORI,10),                                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Local server LU name                X
               (=C'LUNA=',DVGSLUNA,17),                                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Remote server LU name               X
               (=C'RLUN=',DVGSRLUN,17),                                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Server group name                   X
               (=C'RNOD=',DVGSRNOD,10),                                X
               MF=(E,W_WRK)
         $HEX  W_FULL1,DVGSTRRC,LEN=2 Transfer return code
         CALL  DAFMC,              Transfer return code                X
               (=C'TRRC=',W_FULL1,4),                                  X
               MF=(E,W_WRK)
         $HEX  W_FULL1,DVGSTRSC,LEN=2 Transfer reason code
         CALL  DAFMC,              Transfer reason code                X
               (=C'TRSC=',W_FULL1,4),                                  X
               MF=(E,W_WRK)
         L     R14,=A(TSRTYP)      Automatic transfer restart
         CALL  DAFPC,              Automatic transfer restart          X
               ((R14),DVGSRTYP),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TSRPNT)      Restart point
         CALL  DAFPC,              Restart point                       X
               ((R14),DVGSRPNT),                                       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Encryption active (Y=Yes)           X
               (=C'ENCR=',DVGSENCR,1),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Data conversion used (Y=Yes)        X
               (=C'CONV=',DVGSCONV,1),                                 X
               MF=(E,W_WRK)
         L     R14,=A(TSCOMP)      Compression method
         CALL  DAFPC,              Compression method                  X
               ((R14),DVGSCOMP),                                       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Compression factor                  X
               (=C'CFAC=',DVGSCFAC,1),                                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Transfer byte rate                  X
               (=C'BYTE=',DVGSBYTE,4),                                 X
               MF=(E,W_WRK)
         CALL  DAFMD,              Transfer start date                 X
               (=C'SDTE=',DVGSSDTE),                                   X
               MF=(E,W_WRK)
         CALL  DAFMT,              Transfer start time                 X
               (=C'STME=',DVGSSTME),                                   X
               MF=(E,W_WRK)
         CALL  DAFMD,              Transfer end date                   X
               (=C'EDTE=',DVGSEDTE),                                   X
               MF=(E,W_WRK)
         CALL  DAFMT,              Transfer end time                   X
               (=C'ETME=',DVGSETME),                                   X
               MF=(E,W_WRK)
         CLC   DVGSDDNM,=CL008' '  Blank Data definition name ?
         BE    NFTP81NODD          . Yes
         MVC   W_DD,DVGSDDNM       Data definition name
         CALL  DAFMC,              Data definition name                X
               (=C'DD=',W_DD,8),                                       X
               MF=(E,W_WRK)
NFTP81NODD EQU   *
         MVC   W_DSN1,DVGSDSNN     Local dataset name
         CALL  DAFMC,              Member name                         X
               (=C'DMEM=',DVGSDMEM,8),                                 X
               MF=(E,W_WRK)
         L     R14,=A(TSTYP1)      File type primary
         CALL  DAFPC,              File type primary                   X
               ((R14),DVGSTYP1),                                       X
               MF=(E,W_WRK)
         L     R14,=A(TSTYP2)      File type secondary
         CALL  DAFPC,              File type secondary                 X
               ((R14),DVGSTYP2),                                       X
               MF=(E,W_WRK)
         B     NFTP0               Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Product dereference
         DROP  R5                  Data dereference
*
**       Invalid Triplet
*
NFTPIT   EQU    *
         CALL  DAFIT               Invalid triplet
         B     NFTP4               Exit, no check
NFTP     $EXIT                     Exit
.NONFTP5 ANOP
         AIF   ('&RT_RMDS' EQ '000').NORMDS5
         TITLE 'Report Management and Distribution System (RMDS)'
RMDS     $ENTRY AMODE=31,RMODE=24 Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         SMF record reference
         CLC   SMFNNSTY,=AL2(01)   ????????????? ?
         BE    RMDST01             . Yes
         B     RMDS4               Exit - No criteria check
         DROP  R3                  SMF record dereference
*
**       Subtype 1 - ???????????????
*
RMDST01  EQU    *
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD91,R3         SMF record reference
         MVC   W_SMFSO1,SMF91JIO   Job Information offset
         MVC   W_SMFSL1,SMF91JIL   Job Information length
         MVC   W_SMFSN1,SMF91JIN   Job Information number
         L     R1,W_SMFSO1         Job Information offset
         LTR   R1,R1               Job Information offset ?
         BNP   RMDSIT              . No - invalid triplet
         LH    R1,W_SMFSL1         Job Information length
         LTR   R1,R1               Job Information length ?
         BNP   RMDSIT              . No - invalid triplet
         LH    R1,W_SMFSN1         Job Information number
         LTR   R1,R1               Job Information number ?
         BNP   RMDSIT              . No - invalid triplet
         L     R4,W_SMFBAS         Set SMF record base
         A     R4,W_SMFSO1         Add Job Information offset
         USING SMF91JI,R4          Job Information reference
         MVC   W_SMFSO2,SMF91GDO   General Data Set Info offset
         MVC   W_SMFSL2,SMF91GDL   General Data Set Info length
         MVC   W_SMFSN2,SMF91GDN   General Data Set Info number
         L     R1,W_SMFSO2         General Data Set Info offset
         LTR   R1,R1               General Data Set Info offset ?
         BNP   RMDSIT              . No - invalid triplet
         LH    R1,W_SMFSL2         General Data Set Info length
         LTR   R1,R1               General Data Set Info length ?
         BNP   RMDSIT              . No - invalid triplet
         LH    R1,W_SMFSN2         General Data Set Info number
         LTR   R1,R1               General Data Set Info number ?
         BNP   RMDSIT              . No - invalid triplet
         L     R5,W_SMFBAS         Set SMF record base
         A     R5,W_SMFSO2         Add General Data Set Info offset
         USING SMF91GD,R5          General Data Set Info reference
*        This space left intentionally blank
         MVC   W_JOB1,SMF91JNM     Job name
         MVC   W_DSN1,SMF91DSN     Dataset name
         MVC   W_DD,SMF91DDN       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'OPN=',SMF91OPN,8), Open time/date                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'OPN=',SMF91CLS,8), Close time/date                  X
               MF=(E,W_WRK)
         B     RMDS0               Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Job Information dereference
         DROP  R5                  General Data Set Info dereference
*
**       Invalid Triplet
*
RMDSIT   EQU    *
         CALL  DAFIT               Invalid triplet
         B     RMDS4               Exit, no check
RMDS     $EXIT                     Exit
.NORMDS5 ANOP
         AIF   ('&RT_RMMAUD' EQ '000').NORMMAUD5
         TITLE 'RMMAUD - DFSMSrmm Audit Record'
**********************************************************************
*  Notes:          If changed volume blank dsn - bypass              *
**********************************************************************
RMMAUD   $ENTRY AMODE=31,RMODE=24  Entry
*
**       Subtype Selection
*
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFAR,R3            SMF record reference
         MVC   W_JOB1,SMFADJBN     Job name
         MVC   W_USER,SMFADUID     User identification
         L     R14,=A(RMMAUDAT)    Activity Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMFADACT),   Activity Type                       X
               MF=(E,W_WRK)
         CLI   SMFADREC,MDTYPEID   Dataset information ?
         BE    RMMAUDD             . Yes
         CLI   SMFADREC,MKTYPEID   VRS information ?
         BE    RMMAUDK             . Yes
         CLI   SMFADREC,MVTYPEID   Volume information ?
         BE    RMMAUDV             . Yes
         B     RMMAUD4             . No, exit - bypass the record
*
**       Subtype - Dataset information
*
RMMAUDD  EQU   *
         LA    R4,SMFADREC         Dataset information address
         USING MDREC,R4            Dataset information reference
         MVC   W_DSN1,MDDSNAME     Dataset name
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,MDVOLSER,0,6),                                 X
               MF=(E,W_WRK)
         MVC   W_MGMTCLAS,MDACSMC  Management class name
         CALL  DAFMC,              Move Comment                        X
               (=C'MGMTCLAS=',W_MGMTCLAS,8),     Management class name X
               MF=(E,W_WRK)
         MVC   W_STORCLAS,MDACSSC  Storage class name
         CALL  DAFMC,              Move Comment                        X
               (=C'STORCLAS=',W_STORCLAS,8),        Storage class name X
               MF=(E,W_WRK)
         MVC   W_DATACLAS,MDACSDC  Data class name
         CALL  DAFMC,              Move Comment                        X
               (=C'DATACLAS=',W_DATACLAS,8),           Data class name X
               MF=(E,W_WRK)
         B     RMMAUD0             Exit
         DROP  R4                  Dataset information dereference
*
**       Subtype - VRS information
*
RMMAUDK  EQU   *
         LA    R4,SMFADREC         VRS information address
         USING MKREC,R4            VRS information reference
         CLI   MKTYPE2,MKTYPDSN    Dataset VRS ?
         BNE   RMMAUD4             . No - Exit, no check
         MVC   W_DSN1,MKDSNAME     Data set name mask
         MVC   W_JOB1,MKCRTJBN     Job name
         B     RMMAUD0             Exit
         DROP  R4                  VRS information dereference
*
**       Subtype - Volume information
*
RMMAUDV  EQU   *
         LA    R4,SMFADREC         Volume information address
         USING MVREC,R4            Volume information reference
         CLI   SMFADACT,C'C'       Record changed ?
         BNE   RMMAUDVNOC          . No, do not check for valid dsn
         CLC   MVDSN1,=CL044' '    First dataset name on tape blank ?
         BE    RMMAUD4             . Yes, exit - bypass the record
         CLC   MVDSNL,=CL044' '    Last dataset name on tape blank ?
         BE    RMMAUD4             . Yes, exit - bypass the record
RMMAUDVNOC EQU   *
         MVC   W_DSN1,MVDSN1       First dataset name on tape
         MVC   W_DSN2,MVDSNL       Last dataset name on tape
         CALL  DAFMC,              Move Comment                        X
               (=C'DSNL=',MVDSNL,44), Last dataset name on tape        X
               MF=(E,W_WRK)
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,MVVOLSER,0,6),                                 X
               MF=(E,W_WRK)
         B     RMMAUD0             Exit
         DROP  R3                  SMF record dereference
         DROP  R4                  Volume information dereference
RMMAUD   $EXIT                     Exit
.NORMMAUD5     ANOP
         AIF   ('&RT_RMMSEC' EQ '000').NORMMSEC5
         TITLE 'RMMSEC - DFSMSrmm Security Record'
RMMSEC   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFSR,R3            SMF record reference
         MVC   W_DSN1,SMFSADSN     Dataset name
         MVC   W_JOB1,SMFSAJBN     Job name
         MVC   W_USER,SMFSAUID     User identification
         CALL  DAFPV,              Volume Serials                      X
               (=F'1',4,SMFSAVOL,0,6),                                 X
               MF=(E,W_WRK)
         L     R14,=A(RMMSECAT)    Activity Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMFSAACT),   Activity Type                       X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMFSACGP    Group name
         CALL  DAFMC,              Group name                          X
               (=C'GROUP=',W_GROUP,8),                                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'STP=',SMFSASTP,8), Security Type                    X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'UNT=',SMFSAUNT,8), Device Type                      X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DSQ=',SMFSADSQ,8), Dataset Sequence Number          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'VSQ=',SMFSAVSQ,8), Volume Sequence Number           X
               MF=(E,W_WRK)
         DROP  R3                  SMF record dereference
RMMSEC   $EXIT                     Exit
.NORMMSEC5     ANOP
         TITLE 'DSOTYP - Process DSORG in SMF6XTYP'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - SMF6XTYP address (R3)                  *
*                  . 04(R1) - DSORG address    (R4)                  *
*  Output:         DSORG value moved to DSORG address                *
**********************************************************************
DSOTYP   $ENTRY AMODE=31,RMODE=24  Entry
         L     R3,0(R1)            SMF6XTYP address
         L     R4,4(R1)            DSORG address
         CLI   0(R3),C'A'          NONVSAM ?
         BE    DSOTYPX             . Yes - exit
         MVC   0(3,R4),=CL003'VS ' VSAM
DSOTYP   $EXIT                     Exit
         TITLE 'SMFSNAP - SNAP current SMF Record'
SMFSNAP  $ENTRY AMODE=31,RMODE=24  Entry
         L     R14,W_SMFBAS        Set SMF record base
         USING D_SMFREC,R14        SMF record reference
         XR    R3,R3               Clear
         LH    R3,SMFNNLEN         SMF record length
         DROP  R14                 SMF record reference
         L     R0,W_SMFSNAP        SMF SNAP storage address
         LR    R1,R3               SMF record length
         L     R14,W_SMFBAS        SMF record address
         LR    R15,R3              SMF record length
         MVCL  R0,R14              Copy SMF record
         L     R14,W_SMFSNAP       SMF SNAP storage address
         BCTR  R3,0                Decrement length
         AR    R3,R14              Determine SMF record ending address
         LR    R15,R3              Determine SMF record ending address
         MVC   W_STRHDR,=AL1(100)  SNAP storage header length
         MVC   W_SNAP(L_SNAP),T_SNAP Copy SNAP parameter list
         SNAP  DCB=DAFSNAP,                                            X
               STORAGE=((R14),(R15)),                                  X
               STRHDR=W_STRHDR,                                        X
               MF=(E,W_SNAP)
         LTR   R15,R15             OK ?
         BZ    SMFSNAPX            . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,T_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=4 Return code
         MVC   W_WTOMSG+44(4),=CL004'SNAP' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
SMFSNAP  $EXIT                     Exit
         TITLE 'Tables'
*
**       Dataset Name Table
*
TBLDSN   CSECT
         DC    256X'FF'            Assume all characters are invalid
         ORG   TBLDSN+X'40'        Blank is valid
         DC    1X'00'
         ORG   TBLDSN+X'4A'        Cent sign is valid (USS)
         DC    1X'00'
         ORG   TBLDSN+X'4B'        Period is valid
         DC    1X'00'
         ORG   TBLDSN+X'4C'        Less than sign is valid (USS)
         DC    1X'00'
         ORG   TBLDSN+X'4D'        Left parenthesis is valid (RACF)
         DC    1X'00'
         ORG   TBLDSN+X'4E'        Plus sign is valid (RACF)
         DC    1X'00'
         ORG   TBLDSN+X'50'        Ampersand is valid (USS)
         DC    1X'00'
         ORG   TBLDSN+X'5A'        Exclamation point is valid (USS)
         DC    1X'00'
         ORG   TBLDSN+X'5B'        Dollar sign is valid (National)
         DC    1X'00'
         ORG   TBLDSN+X'5C'        Asterisk is valid (RACF)
         DC    1X'00'
         ORG   TBLDSN+X'5D'        Right parenthesis is valid (RACF)
         DC    1X'00'
         ORG   TBLDSN+X'5E'        Semicolon is valid (USS)
         DC    1X'00'
         ORG   TBLDSN+X'60'        Hyphen is valid (VSAM CATALOG)
         DC    1X'00'
         ORG   TBLDSN+X'61'        Slash is valid (USS)
         DC    1X'00'
         ORG   TBLDSN+X'6B'        Comma is valid (USS)
         DC    1X'00'
         ORG   TBLDSN+X'6C'        Percent sign is valid (RACF)
         DC    1X'00'
         ORG   TBLDSN+X'6D'        Underline is valid (USS)
         DC    1X'00'
         ORG   TBLDSN+X'6E'        Greater than sign is valid (USS)
         DC    1X'00'
         ORG   TBLDSN+X'6F'        Question mark is valid (JES2)
         DC    1X'00'
         ORG   TBLDSN+X'7A'        Colon is valid (USS)
         DC    1X'00'
         ORG   TBLDSN+X'7B'        Pound sign is valid (National)
         DC    1X'00'
         ORG   TBLDSN+X'7C'        At sign is valid (National)
         DC    1X'00'
         ORG   TBLDSN+X'7D'        Apostrophe is valid (USS)
         DC    1X'00'
         ORG   TBLDSN+X'7E'        Equal sign is valid (USS)
         DC    1X'00'
         ORG   TBLDSN+X'7F'        Quotation marks is valid (USS)
         DC    1X'00'
         ORG   TBLDSN+X'81'        abcdefghi are valid (USS)
         DC    9X'00'
         ORG   TBLDSN+X'91'        jklmnopqr are valid (USS)
         DC    9X'00'
         ORG   TBLDSN+X'A2'        stuvwxyz are valid (USS)
         DC    8X'00'
         ORG   TBLDSN+X'C1'        ABCDEFGHI are valid (Alphabetic)
         DC    9X'00'
         ORG   TBLDSN+X'D1'        JKLMNOPQR are valid (Alphabetic)
         DC    9X'00'
         ORG   TBLDSN+x'E2'        STUVWXYZ are valid (Alphabetic)
         DC    8X'00'
         ORG   TBLDSN+x'F0'        0123456789 are valid (Numeric)
         DC    10X'00'
*
**       Hexadecimal Table
*
TBLHEX   CSECT
         DC    256X'00'            Assume all characters are invalid
         ORG   TBLHEX+X'F0'        0 is valid
         DC    1X'F0'              0 is valid
         ORG   TBLHEX+X'F1'        1 is valid
         DC    1X'F1'              1 is valid
         ORG   TBLHEX+X'F2'        2 is valid
         DC    1X'F2'              2 is valid
         ORG   TBLHEX+X'F3'        3 is valid
         DC    1X'F3'              3 is valid
         ORG   TBLHEX+X'F4'        4 is valid
         DC    1X'F4'              4 is valid
         ORG   TBLHEX+X'F5'        5 is valid
         DC    1X'F5'              5 is valid
         ORG   TBLHEX+X'F6'        6 is valid
         DC    1X'F6'              6 is valid
         ORG   TBLHEX+X'F7'        7 is valid
         DC    1X'F7'              7 is valid
         ORG   TBLHEX+X'F8'        8 is valid
         DC    1X'F8'              8 is valid
         ORG   TBLHEX+X'F9'        9 is valid
         DC    1X'F9'              9 is valid
         ORG   TBLHEX+X'FA'        A is valid
         DC    1X'C1'              A is valid
         ORG   TBLHEX+X'FB'        B is valid
         DC    1X'C2'              B is valid
         ORG   TBLHEX+X'FC'        C is valid
         DC    1X'C3'              C is valid
         ORG   TBLHEX+X'FD'        D is valid
         DC    1X'C4'              D is valid
         ORG   TBLHEX+X'FE'        E is valid
         DC    1X'C5'              E is valid
         ORG   TBLHEX+X'FF'        F is valid
         DC    1X'C6'              F is valid
*
**       Keyword Table
*
TBLKWD   CSECT                     Keyword table
         $KWD  CATALOG,                                                X
               T=DATASET,                                              X
               LENGTH=44,                                              X
               O1=O_CATALOG,                                           X
               FORMAT=C,                                               X
               D='Catalog name',                                       X
               ALIAS1=CAT
E_TBLKWD EQU   *-TBLKWD            Keyword table entry length
         $KWD  CLASS,                                                  X
               T=GENERAL,                                              X
               LENGTH=8,                                               X
               O1=O_CLASS,                                             X
               FORMAT=C,                                               X
               D='Class name'
         $KWD  CRTDT,                                                  X
               T=GENERAL,                                              X
               LENGTH=5,                                               X
               O1=O_CRTDT,                                             X
               FORMAT=C,                                               X
               D='Creation Date - yyddd'
         $KWD  DATACLAS,                                               X
               T=GENERAL,                                              X
               LENGTH=8,                                               X
               O1=O_DATACLAS,                                          X
               FORMAT=C,                                               X
               D='Data class name',                                    X
               ALIAS1=DATACLASS
         $KWD  DATE,                                                   X
               T=GENERAL,                                              X
               LENGTH=7,                                               X
               O1=O_DATE,                                              X
               FORMAT=C,                                               X
               D='Date - yyyyddd'
         $KWD  DDNAME,                                                 X
               T=DATASET,                                              X
               LENGTH=8,                                               X
               O1=O_DD,                                                X
               FORMAT=C,                                               X
               D='Data definition name',                               X
               ALIAS1=DDN,                                             X
               ALIAS2=DD
         $KWD  DSNAME,                                                 X
               T=GENERAL,                                              X
               LENGTH=44,                                              X
               O1=O_DSN1,                                              X
               O2=O_DSN2,                                              X
               FORMAT=C,                                               X
               D='Dataset name',                                       X
               ALIAS1=DATASET,                                         X
               ALIAS2=DSN
         $KWD  DSORG,                                                  X
               T=GENERAL,                                              X
               LENGTH=3,                                               X
               O1=O_DSORG,                                             X
               FORMAT=C,                                               X
               D='Dataset organization'
         $KWD  DUP,                                                    X
               T=GENERAL,                                              X
               LENGTH=16,                                              X
               O1=O_DUP,                                               X
               FORMAT=F,                                               X
               D='Number of updates'
         $KWD  EXCP,                                                   X
               T=GENERAL,                                              X
               LENGTH=16,                                              X
               O1=O_EXCP,                                              X
               FORMAT=F,                                               X
               D='Execute Channel Program'
         $KWD  EXPDT,                                                  X
               T=GENERAL,                                              X
               LENGTH=5,                                               X
               O1=O_EXPDT,                                             X
               FORMAT=C,                                               X
               D='Expiration Date - yyddd'
         $KWD  GROUP,                                                  X
               T=GENERAL,                                              X
               LENGTH=8,                                               X
               O1=O_GROUP,                                             X
               FORMAT=C,                                               X
               D='Group identification'
         $KWD  HOST,                                                   X
               T=GENERAL,                                              X
               LENGTH=8,                                               X
               O1=O_HOST,                                              X
               FORMAT=C,                                               X
               D='Host name',                                          X
               ALIAS1=HOSTNAME
         $KWD  IP,                                                     X
               T=GENERAL,                                              X
               LENGTH=39,                                              X
               O1=O_IP1,                                               X
               O2=O_IP2,                                               X
               O3=O_IP3,                                               X
               O4=O_IP4,                                               X
               FORMAT=C,                                               X
               D='IP address',                                         X
               ALIAS1=IPADDRESS
         $KWD  JOBNAME,                                                X
               T=GENERAL,                                              X
               LENGTH=8,                                               X
               O1=O_JOB1,                                              X
               O2=O_JOB2,                                              X
               O3=O_JOB3,                                              X
               O4=O_JOB4,                                              X
               O5=O_JOB5,                                              X
               FORMAT=C,                                               X
               D='Job name',                                           X
               ALIAS1=JOB
         $KWD  LOGSTREAM,                                              X
               T=GENERAL,                                              X
               LENGTH=26,                                              X
               O1=O_LOGSTREAM,                                         X
               FORMAT=C,                                               X
               D='Logstream name'
         $KWD  LRECL,                                                  X
               T=GENERAL,                                              X
               LENGTH=5,                                               X
               O1=O_LRECL,                                             X
               FORMAT=F,                                               X
               D='Logical record length'
         $KWD  MAJOR,                                                  X
               T=ENQUEUE,                                              X
               LENGTH=8,                                               X
               O1=O_MAJOR,                                             X
               FORMAT=C,                                               X
               D='Major enqueue name'
         $KWD  MGMTCLAS,                                               X
               T=GENERAL,                                              X
               LENGTH=8,                                               X
               O1=O_MGMTCLAS,                                          X
               FORMAT=C,                                               X
               D='Management class name',                              X
               ALIAS1=MANAGEMENTCLASS
         $KWD  MEMBER,                                                 X
               T=DATASET,                                              X
               LENGTH=8,                                               X
               O1=O_MEMBER1,                                           X
               O2=O_MEMBER2,                                           X
               FORMAT=C,                                               X
               D='Member name',                                        X
               ALIAS1=MEM
         $KWD  MINOR,                                                  X
               T=ENQUEUE,                                              X
               LENGTH=44,                                              X
               O1=O_MINOR,                                             X
               FORMAT=C,                                               X
               D='Minor enqueue name'
         $KWD  NUP,                                                    X
               T=GENERAL,                                              X
               LENGTH=16,                                              X
               O1=O_NUP,                                               X
               FORMAT=F,                                               X
               D='Number of updates'
         $KWD  PORT,                                                   X
               T=GENERAL,                                              X
               LENGTH=4,                                               X
               O1=O_PORT1,                                             X
               O2=O_PORT2,                                             X
               O3=O_PORT3,                                             X
               O4=O_PORT4,                                             X
               FORMAT=C,                                               X
               D='Port number',                                        X
               ALIAS1=PORTNUMBER
         $KWD  PGM,                                                    X
               T=GENERAL,                                              X
               LENGTH=8,                                               X
               O1=O_PGM,                                               X
               FORMAT=C,                                               X
               D='Program name',                                       X
               ALIAS1=PROGRAM
         $KWD  RECFM,                                                  X
               T=GENERAL,                                              X
               LENGTH=5,                                               X
               O1=O_RECFM,                                             X
               FORMAT=C,                                               X
               D='Record format'
         $KWD  RECORD,                                                 X
               T=GENERAL,                                              X
               LENGTH=3,                                               X
               O1=O_RTY,                                               X
               FORMAT=F,                                               X
               D='SMF Record type',                                    X
               ALIAS1=REC
         $KWD  SUBTYPE,                                                X
               T=GENERAL,                                              X
               LENGTH=3,                                               X
               O1=O_STY,                                               X
               FORMAT=F,                                               X
               D='SMF Record subtype',                                 X
               ALIAS1=STY
         $KWD  STORCLAS,                                               X
               T=GENERAL,                                              X
               LENGTH=8,                                               X
               O1=O_STORCLAS,                                          X
               FORMAT=C,                                               X
               D='Storage class name',                                 X
               ALIAS1=STORAGECLASS
         $KWD  SYSTEM,                                                 X
               T=GENERAL,                                              X
               LENGTH=4,                                               X
               O1=O_SYSTEM,                                            X
               FORMAT=C,                                               X
               D='System identification',                              X
               ALIAS1=SYSID
         $KWD  TIME,                                                   X
               T=GENERAL,                                              X
               LENGTH=11,                                              X
               O1=O_TIME,                                              X
               FORMAT=C,                                               X
               D='Time - hh.mm.ss.hh'
         $KWD  USERID,                                                 X
               T=GENERAL,                                              X
               LENGTH=8,                                               X
               O1=O_USER,                                              X
               FORMAT=C,                                               X
               D='User identification',                                X
               ALIAS1=USER
         $KWD  VOLUME,                                                 X
               T=GENERAL,                                              X
               LENGTH=6,                                               X
               O1=O_VOL1,                                              X
               O2=O_VOL2,                                              X
               O3=O_VOL3,                                              X
               O4=O_VOL4,                                              X
               O5=O_VOL5,                                              X
               O6=O_VOL6,                                              X
               O7=O_VOL7,                                              X
               O8=O_VOL8,                                              X
               O9=O_VOL9,                                              X
               OA=O_VOLA,                                              X
               FORMAT=C,                                               X
               D='Volume serial',                                      X
               ALIAS1=VOL,                                             X
               ALIAS2=VOLSER
         $KWD  VVDS,                                                   X
               T=DATASET,                                              X
               LENGTH=44,                                              X
               O1=O_VVDS,                                              X
               FORMAT=C,                                               X
               D='VSAM volume dataset name'
         $KWD  WTX,                                                    X
               T=GENERAL,                                              X
               LENGTH=4,                                               X
               O1=O_WTX,                                               X
               FORMAT=C,                                               X
               D='Wait Time Max'
#_TBLKWD EQU   ((*-TBLKWD)/E_TBLKWD)  Keyword table count
         $KWD  DSECT=YES
*
**       Major Enqueue Table
*
TBLMAJOR CSECT                     Major Enqueue Table
         TBLMAJOR                  Major Enqueue Table
*
**       Module Table
*
TBLMOD   CSECT
         $MOD                      Module table generation
         DC    12X'FF'             End of module table
*
**       Message Table
*
TBLMSG   CSECT
*                           1         2         3         4         5
*                 0123456789012345678901234567890123456789012345678901
DAF000I  DC CL100'DAF000I '
DAF500I  DC CL133' DAF500I Valid keywords are:  '
DAF501I  DC CL133' DAF501I Valid operators are:  '
DAF502I  DC CL133' DAF502I Control Statements Follow:'
DAF503I  DC CL133' DAF503I No Control Statements Specified'
DAF504I  DC CL133' DAF504I '
DAF505I  DC CL133' DAF505I Parameter Processed PARM= '
DAF510I  DS 0CL133
         DC CL038' DAF510I IPL              System=SSSS '
         DC CL095'Date=YYYYDDD Time=HH.MM.SS.HH '
DAF511I  DS 0CL133
         DC CL038' DAF511I SMF Dump Header  System=SSSS '
         DC CL095'Date=YYYYDDD Time=HH.MM.SS.HH '
DAF512I  DS 0CL133
         DC CL038' DAF512I SMF Dump Trailer System=SSSS '
         DC CL095'Date=YYYYDDD Time=HH.MM.SS.HH '
DAF513W  DS 0CL133
         DC CL038' DAF513W SMF Data Lost on System=SSSS '
         DC CL025'From=YYYYDDD/HH.MM.SS.HH '
         DC CL023'To=YYYYDDD/HH.MM.SS.HH '
         DC CL047'Count= '
DAF514I  DS 0CL133
         DC CL038' DAF514I Halt EOD         System=SSSS '
         DC CL030'Date=YYYYDDD Time=HH.MM.SS.HH '
         DC CL065'IPL=YYYYDDD/HH.MM.SS.HH '
DAF515I  DS 0CL133
         DC CL038' DAF515I IPL SMF          System=SSSS '
         DC CL095'Date=YYYYDDD Time=HH.MM.SS.HH '
DAF516I  DS 0CL133
         DC CL038' DAF516I JESx Start       System=SSSS '
         DC CL095'Date=YYYYDDD Time=HH.MM.SS.HH '
DAF517I  DS 0CL133
         DC CL038' DAF517I JESx Stop        System=SSSS '
         DC CL095'Date=YYYYDDD Time=HH.MM.SS.HH '
DAF518I  DS 0CL133
         DC CL038' DAF518I FTP Logon Failed System=SSSS '
         DC CL095'Date=YYYYDDD Time=HH.MM.SS.HH '
DAF520I  DC CL133' DAF520I Beginning Processing - __________'
DAF521I  DC CL133' DAF521I Completed Processing - __________'
DAF530W  DC CL133' DAF530W Executing system not recording SMF'
DAF531W  DC CL133' DAF531W RMFMON III not collecting HFSNAME data'
DAF540I  DC CL133' DAF540I DAFPV Vol=___ RRR YYYYDDD HH.MM.SS.HH DSN='
DAF550I  DS 0CL133
         DC CL048' DAF550I STORAGE OBTAIN   RC=__ Address=________'
         DC CL085' Length=________ '
DAF551I  DS 0CL133
         DC CL048' DAF551I STORAGE RELEASE  RC=__ Address=________'
         DC CL085' Length=________ '
DAF552T  DC CL133' DAF552T       //xxxxxxxx JCL DD Statement Missing'
DAF553I  DC CL133' DAF553I OPEN    xxxxxxxx RC=__ '
DAF554I  DC CL133' DAF554I CLOSE   xxxxxxxx RC=__ '
DAF555I  DC CL133' DAF555I DAFSMF '
DAF560I  DC CL133' DAF560I Executing on SMF System ID     ____'
DAF561I  DC CL133' DAF561I Executing on Hardware Name ________'
DAF562I  DC CL133' DAF562I Executing on LPAR Name     ________'
DAF563I  DC CL133' DAF563I Executing on VM Userid     ________'
DAF564I  DC CL133' DAF564I Executing on CPU Type      ____-___'
DAF565I  DC CL133' DAF565I Executing on CPU Serial      ______'
DAF566I  DC CL133' DAF566I Executing on Architecture Level   _'
DAF567I  DC CL133' DAF567I Executing on ______ ______ 00.00.00'
DAF568I  DC CL133' DAF568I Region Size Requested 0,000,000,000'
DAF569I  DC CL133' DAF569I Region Limit Below    0,000,000,000'
DAF570I  DC CL133' DAF570I Region Size  Below    0,000,000,000'
DAF571I  DC CL133' DAF571I Region Limit Above    0,000,000,000'
DAF572I  DC CL133' DAF572I Region Size  Above    0,000,000,000'
DAF573I  DS 0CL133
         DC CL058' DAF573I DSN= '
         DC CL075'VOL= '
DAF600I  DS 0CL133
         DC CL025' DAF600I Entering XXXXXX '
         DC CL108'R14=RRRRRRRR R15=RRRRRRRR '
DAF601I  DS 0CL133
         DC CL025' DAF601I Exiting  XXXXXX '
         DC CL108'R14=RRRRRRRR R15=RRRRRRRR '
DAF610I  DC CL133' DAF610I Invalid RRR YYYYDDD HH.MM.SS.HH DSN='
DAF611I  DC CL133' DAF611I Invalid DSN In DAFSMF Record'
DAF612I  DC CL133' DAF612I RRR SSS YYYYDDD HH.MM.SS.HH Invalid Triplet'
DAF613I  DC CL133' DAF613I RRR SSS YYYYDDD HH.MM.SS.HH '
DAF620I  DC CL133' DAF620I KWD=__________ OP=_____ VAL=__________'
DAF621I  DC CL133' DAF621I Original '
DAF622I  DC CL133' DAF622I Resolved '
DAF623I  DC CL133' DAF623I CS=__ CC=__ '
DAF624I  DC CL133' DAF624I CS=__ CC=__ RT=___ DSN=______'
DAF630I  DC CL133' DAF630I Possible Dataset Enqueue QNM=________ RNM='
DAF704W  DC CL133' DAF704W No DAFSMF Records Selected'
DAF708E  DC CL133' DAF708E No DAFSMF Records Provided'
DAF712S  DC CL133' DAF712S Control Statement Problem'
DAF716T  DC CL133' DAF716T Sort Problem'
*
**       Operator Table
*
TBLOP    CSECT                     Operator table
         $OP   EQ,L=0,E=1,H=0,DES='Equal to'
L_TBLOP  EQU   *-TBLOP             Operator table entry length
         $OP   GE,L=0,E=1,H=1,DES='Greater than or equal to'
         $OP   GT,L=0,E=0,H=1,DES='Greater than'
         $OP   LE,L=1,E=1,H=0,DES='Less than or equal to'
         $OP   LT,L=1,E=0,H=0,DES='Less than'
         $OP   NE,L=1,E=0,H=1,DES='Not equal to'
@_TBLOP  EQU    *-TBLOP            Operator table size
#_TBLOP  EQU   (*-TBLOP)/L_TBLOP   Operator table count
         $OP   DSECT=YES
*
**       SMF Table
*
TBLSMF   CSECT                     SMF table
 $SMF 000,000,DAF000,'IPL'
E_TBLSMF EQU   *-TBLSMF            Operator table entry length
 $SMF 002,000,DAF002,'Dump Header'
 $SMF 003,000,DAF003,'Dump Trailer'
 $SMF 007,000,DAF007,'Data Lost'
 $SMF 014,000,DAF014,'INPUT or RDBACK Data Set Activity'
 $SMF 015,000,DAF014,'OUTPUT UPDAT INOUT or OUTIN Data Set Activity'
         AIF   (NOT D'ICERTYP).NODFSORT9
 $SMF 016,000,DAF016,'DFSORT Statistics'
.NODFSORT9     ANOP
 $SMF 017,000,DAF017,'Scratch Data Set Status'
 $SMF 018,000,DAF018,'Rename Non-VSAM Data Set Status'
 $SMF 019,000,DAF019,'Direct Access Volume'
 $SMF 022,000,DAF022,'Configuration'
 $SMF 022,009,DAF022,'- Activate'
 $SMF 024,000,DAF024,'JES2 Spool Offload'
 $SMF 024,001,DAF024,'- Job transmitted'
 $SMF 024,002,DAF024,'- Job received'
 $SMF 024,003,DAF024,'- SYSOUT transmitted'
 $SMF 024,004,DAF024,'- SYSOUT received'
 $SMF 036,000,DAF036,'Integrated Catalog Facility Catalog'
         AIF   ('&RT_DFSMS' EQ '000').NODFSMS9
 $SMF 042,000,DAF042,'DFSMS Statistics and Configuration'
         AIF   ('&ST_DFSMS03' EQ 'NO').NODFSMS039
 $SMF 042,003,DAF042,'- SMS Configuration'
.NODFSMS039    ANOP
         AIF   ('&ST_DFSMS06' EQ 'NO').NODFSMS069
 $SMF 042,006,DAF042,'- Dataset Statistics'
.NODFSMS069    ANOP
         AIF   ('&ST_DFSMS07' EQ 'NO').NODFSMS079
 $SMF 042,007,DAF042,'- File Timeout Statistics'
.NODFSMS079    ANOP
         AIF   ('&ST_DFSMS09' EQ 'NO').NODFSMS099
 $SMF 042,009,DAF042,'- X37 Abend'
.NODFSMS099    ANOP
         AIF   ('&ST_DFSMS10' EQ 'NO').NODFSMS109
 $SMF 042,010,DAF042,'- Volume Selection Failure'
.NODFSMS109    ANOP
         AIF   ('&ST_DFSMS16' EQ 'NO').NODFSMS169
 $SMF 042,016,DAF042,'- Dataset Response Time Summary'
.NODFSMS169    ANOP
         AIF   ('&ST_DFSMS20' EQ 'NO').NODFSMS209
 $SMF 042,020,DAF042,'- STOW Initialize'
.NODFSMS209    ANOP
         AIF   ('&ST_DFSMS21' EQ 'NO').NODFSMS219
 $SMF 042,021,DAF042,'- Member Delete'
.NODFSMS219    ANOP
.NODFSMS9      ANOP
 $SMF 043,000,DAF043,'JESx Start'
 $SMF 045,000,DAF045,'JESx Stop'
         AIF   (NOT D'SMF59RTY).NOBDT9
 $SMF 059,000,DAF059,'Bulk Data Transfer (BDT)'
.NOBDT9        ANOP
 $SMF 060,000,DAF060,'VSAM Volume Data Set Updated'
 $SMF 061,000,DAF061,'Integrated Catalog Facility Define Activity'
 $SMF 062,000,DAF062,'VSAM Component or Cluster Opened'
 $SMF 063,000,DAF063,'VSAM Catalog Entry Defined'
 $SMF 064,000,DAF064,'VSAM Component or Cluster Status'
 $SMF 065,000,DAF065,'Integrated Catalog Facility Delete Activity'
 $SMF 066,000,DAF066,'Integrated Catalog Facility Alter Activity'
 $SMF 067,000,DAF067,'VSAM Catalog Entry Deleted'
 $SMF 068,000,DAF068,'VSAM Catalog Entry Renamed'
 $SMF 069,000,DAF069,'VSAM Data Space Defined, Extended or Deleted'
         AIF   ('&RT_RMF' EQ '000').NORMF9
 $SMF 073,000,DAF073,'RMF Channel Path Activity'
 $SMF 073,001,DAF073,'- Channel Path Activity'
 $SMF 074,000,DAF074,'RMF Activity of Several Resources'
 $SMF 074,001,DAF074,'- Device Activity'
 $SMF 074,006,DAF074,'- Hierarchical File System Statistics'
 $SMF 074,007,DAF074,'- FICON Director Statistics'
 $SMF 075,000,DAF075,'RMF Page Data Set Activity'
 $SMF 075,001,DAF075,'- Page Data Set Activity'
 $SMF 077,000,DAF077,'RMF Enqueue Activity'
 $SMF 077,001,DAF077,'- Enqueue Activity'
 $SMF 078,000,DAF078,'RMF Virtual Storage and I/O Queuing Activity'
 $SMF 078,003,DAF078,'- I/O Queuing Activity'
 $SMF 079,000,DAF079,'RMF Monitor II Activity'
 $SMF 079,006,DAF079,'- Reserve Data'
 $SMF 079,007,DAF079,'- Enqueue Contention Data'
 $SMF 079,011,DAF079,'- Page Data Set Activity'
.NORMF9        ANOP
         AIF   ('&RT_RACFPROC' EQ '000').NORACFPROC9
 $SMF 080,000,DAF080,'RACF Processing'
.NORACFPROC9   ANOP
         AIF   ('&RT_RACFPROC' EQ '000').NORACFINIT9
 $SMF 081,000,DAF081,'RACF Initialization'
.NORACFINIT9   ANOP
         AIF   ('&RT_ICSF' EQ '000').NOICSF9
 $SMF 082,000,DAF082,'Integrated Cryptographic Service Facility (ICSF)'
 $SMF 082,001,DAF082,'- Initialization'
 $SMF 082,007,DAF082,'- KEU Key Part Entry'
 $SMF 082,008,DAF082,'- CKDS Refresh'
 $SMF 082,009,DAF082,'- Dynamic CKDS Update'
 $SMF 082,013,DAF082,'- Dynamic PKDS Update'
 $SMF 082,021,DAF082,'- ICSF Sysplex Group Change Section'
.NOICSF9       ANOP
         AIF   ('&RT_RACFAUDIT' EQ '000').NORACFAUDIT9
 $SMF 083,000,DAF083,'RACF Audit'
 $SMF 083,001,DAF083,'- Security Label Audit'
 $SMF 083,002,DAF083,'- Enterprise Identity Mapping (EIM) Audit'
.NORACFAUDIT9   ANOP
 $SMF 088,000,DAF088,'System Logger Data'
 $SMF 088,001,DAF088,'- Log Stream Activity'
 $SMF 090,000,DAF090,'System Status'
 $SMF 090,005,DAF090,'- Set SMF'
 $SMF 090,006,DAF090,'- Switch SMF'
 $SMF 090,007,DAF090,'- Halt EOD'
 $SMF 090,009,DAF090,'- IPL SMF'
 $SMF 090,013,DAF090,'- SETSMF'
 $SMF 090,015,DAF090,'- Set SMF (Restart SMF)'
 $SMF 090,026,DAF090,'- IPL LOGREC'
         AIF   (NOT D'SMF91RTY).NOBATCHPIPES9
 $SMF 091,000,DAF091,'BatchPipes/MVS Statistics'
 $SMF 091,021,DAF091,'- Dataset Close'
.NOBATCHPIPES9 ANOP
         AIF   ('&RT_USS' EQ '000').NOUSS9
 $SMF 092,000,DAF092,'OpenMVS File System Activity'
 $SMF 092,001,DAF092,'- File System Mount'
 $SMF 092,002,DAF092,'- File System Quiesced'
 $SMF 092,004,DAF092,'- File System Unquiesced'
 $SMF 092,005,DAF092,'- File System Unmounted'
 $SMF 092,006,DAF092,'- File System Remounted'
 $SMF 092,007,DAF092,'- File System Move'
.NOUSS9        ANOP
         AIF   ('&RT_TCPIP' EQ '000').NOTCPIP9
 $SMF 118,000,DAF118,'TCP/IP Statistics'
 $SMF 118,&ST_FTPCLIENT,DAF118,'- FTP Client'
 $SMF 118,&ST_FTPAPPE,DAF118,'- FTP Server Append'
 $SMF 118,&ST_FTPDEL,DAF118,'- FTP Server Delete'
 $SMF 118,&ST_FTPLOGN,DAF118,'- FTP Server Logon Failure'
 $SMF 118,&ST_FTPREN,DAF118,'- FTP Server Rename'
 $SMF 118,&ST_FTPRETR,DAF118,'- FTP Server Retrieve'
 $SMF 118,&ST_FTPSTOR,DAF118,'- FTP Server Store'
.NOTCPIP9      ANOP
         AIF   ('&RT_TCPIPX' EQ '000').NOTCPIPX9
 $SMF 119,000,DAF119,'TCP/IP Statistics'
 $SMF 119,003,DAF119,'- FTP Client'
 $SMF 119,070,DAF119,'- FTP Server'
 $SMF 119,072,DAF119,'- FTP Server Logon Failure'
.NOTCPIPX9     ANOP
         AIF   ('&RT_DFPACS' EQ '000').NODFPACS9
 $SMF &RT_DFPACS,000,DFPACS,'DFSMSdfp ACS'
.NODFPACS9 ANOP
         AIF   ('&RT_AO' EQ '000').NOAO9
 $SMF &RT_AO,000,AO,'Allocation Optimizer (AO)'
 $SMF &RT_AO,001,AO,'- Subsystem Activity'
 $SMF &RT_AO,003,AO,'- Processing Activity'
.NOAO9   ANOP
         AIF   ('&RT_RMDS' EQ '000').NORMDS9
 $SMF &RT_RMDS,000,RMDS,                                               X
               'Report Management and Distribution System (RMDS)'
.NORMDS9 ANOP
         AIF   ('&RT_RMMAUD' EQ '000').NORMMAUD9
 $SMF &RT_RMMAUD,000,RMMAUD,'DFSMSrmm Audit'
.NORMMAUD9     ANOP
         AIF   ('&RT_RMMSEC' EQ '000').NORMMSEC9
 $SMF &RT_RMMSEC,000,RMMSEC,'DFSMSrmm Security'
.NORMMSEC9     ANOP
         AIF   ('&RT_HSMFSR' EQ '000').NOHSMFSR9
 $SMF &RT_HSMFSR,000,HSMFSR,'DFSMShsm FSR'
.NOHSMFSR9     ANOP
         AIF   ('&RT_NFTP' EQ '000').NONFTP9
 $SMF &RT_NFTP,000,NFTP,'NetView FTP (NFTP)'
 $SMF &RT_NFTP,001,NFTP,'- ADD Queue x"01"'
 $SMF &RT_NFTP,034,NFTP,'- OBTAIN Queue x"22"'
 $SMF &RT_NFTP,036,NFTP,'- NOTIFY Queue x"24"'
 $SMF &RT_NFTP,081,NFTP,'- Server Finished Request x"51"'
.NONFTP9 ANOP
* $SMF 997,000,DAFAPF,'APFLST'
* $SMF 998,000,DAFLPA,'LPALST'
* $SMF 999,000,DAFLNK,'LNKLST'
#_TBLSMF EQU   ((*-TBLSMF)/E_TBLSMF)  SMF table count
         $SMF DSECT=YES
*
**       HSMTYPE Compare Table
*
HSMTYPE  CSECT
         $COMP TYPE=INIT
         $COMP AL1(01),'Primary_to_level_1_migration'
         $COMP AL1(02),'Level_x_to_level_x_migration'
         $COMP AL1(03),'Primary_to_level_2_migration'
         $COMP AL1(04),'Recall_from_level_1_to_primary'
         $COMP AL1(05),'Recall_from_level_2_to_primary'
         $COMP AL1(06),'Delete_a_migrated_data_set'
         $COMP AL1(07),'Daily_backup'
         $COMP AL1(08),'Spill_backup'
         $COMP AL1(09),'Recovery'
         $COMP AL1(10),'Recycle_backup_volume'
         $COMP AL1(11),'Data_set_deletion_by_age'
         $COMP AL1(12),'Recycle_migration_volume'
         $COMP AL1(13),'Full_volume_dump'
         $COMP AL1(14),'Volume_or_data_set_restore'
         $COMP AL1(15),'ABACKUP_function'
         $COMP AL1(16),'ARECOVER_function'
         $COMP AL1(17),'Expire_primary_or_migrated_data_sets'
         $COMP AL1(18),'Partrel_function'
         $COMP AL1(19),'Expire_or_roll_off_incremental_backup_version'
         $COMP AL1(20),'(H)BDELETE_an_incremental_backup_version'
         $COMP AL1(21),'Fast_replication_backup_function'
         $COMP AL1(22),'Fast_replication_recover_function'
         $COMP AL1(23),'Fast_replication_delete_function'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=Function
*
**       SMFADACT Compare Table
*
RMMAUDAT CSECT
         $COMP TYPE=INIT
         $COMP CL001'C','Record_Changed'
         $COMP CL001'D','Record_Deleted'
         $COMP CL001'A','Record_Added'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=AUDAT
*
**       SMFSAACT Compare Table
*
RMMSECAT CSECT
         $COMP TYPE=INIT
         $COMP CL001'C','Dataset_Create'
         $COMP CL001'E','Dataset_Extend'
         $COMP CL001'U','Dataset_Update'
         $COMP CL001'R','Dataset_Read_Access'
         $COMP CL001'D','Dataset_Delete'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=SECAT
*
**       DSORG Compare Table
*
T14DSO   CSECT
         $COMP TYPE=INIT
         $COMP X'0008','VS'
         $COMP X'0009','VSU'
         $COMP X'0200','PO'
         $COMP X'0300','POU'
         $COMP X'2000','DA'
         $COMP X'2100','DAU'
         $COMP X'4000','PS'
         $COMP X'4100','PSU'
         $COMP X'8000','IS'
         $COMP X'8100','ISU'
         $COMP X'0000','Reserved'
         $COMP TYPE=BUILD,LENGTH=2,LABEL=DSORG
*
**       DISP Compare Table
*
T14DSP   CSECT
         $COMP TYPE=INIT
         $COMP X'08','Shr'
         $COMP X'40','Old'
         $COMP X'48','OldShr'
         $COMP X'80','Mod'
         $COMP X'88','ModShr'
         $COMP X'C0','New'
         $COMP X'C8','NewShr'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=DISP
*
**       Label Type Compare Table
*
T14LTP   CSECT
         $COMP TYPE=INIT
         $COMP X'01','NL'
         $COMP X'02','SL'
         $COMP X'04','NSL'
         $COMP X'0A','SUL'
         $COMP X'10','BLP'
         $COMP X'20','LTM'
         $COMP X'40','AL'
         $COMP X'48','AUL'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=LTYP
*
**       CTRI Compare Table
*
T14SPC   CSECT
         $COMP TYPE=INIT
         $COMP X'C0','CYL'
         $COMP X'80','TRK'
         $COMP X'40','BLK'
         $COMP X'00','ABSTR'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=CTRI
*
**       ICExxAMB TM Table (Access Method Flags)
*
T16AMB   CSECT
         DC    C'AMB='             Label
         $TM   CL032'EXCP'
         $TM   CL032'VSAM'
         $TM   CL032'BSAM'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       ICECSFLG TM Table (Control Statement Flags)
*
T16CSF   CSECT
         DC    C'CSF='             Label
         $TM   CL032'Altseq'
         $TM   CL032'Inrec'
         $TM   CL032'Include'
         $TM   CL032'Omit'
         $TM   CL032'Outrec'
         $TM   CL032'Sum'
         $TM   CL032'Outfil'
         $TM   CL032'Reserved'
*
**       ICExxFL1 TM Table (Flag Byte 1)
*
T16FL1   CSECT
         DC    C'FL1='             Label
         $TM   CL032'BatchPipes'
         $TM   CL032'Striped'
         $TM   CL032'Compressed'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       ICEFLBY2 TM Table (Type of Operation)
*
T16TOO   CSECT
         DC    C'TYPE='            Label
         $TM   CL032'Sort'
         $TM   CL032'Merge'
         $TM   CL032'Copy'
         $TM   CL032'Icetool'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMF19DEV Compare Table
*
T19DEV   CSECT
         $COMP TYPE=INIT
         $COMP X'0F','3390'
         $COMP X'0E','3380'
         $COMP X'0D','3330-11'
         $COMP X'0C','3375'
         $COMP X'0B','3350'
         $COMP X'0A','3340'
         $COMP X'09','3330'
         $COMP X'07','2305-2'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=DEV
*
**       SMF19VTI TM Table
*
T19VTI   CSECT
         DC    C'VTI='             Label
         $TM   CL032'FORMAT5_DSCB_Missing_or_Error'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'VTOC_Does_Not_Begin_on_Record_1'
         $TM   CL032'Accurate_FORMAT5/FORMAT6_DSCBs'
         $TM   CL032'Possible_VTOC_or_VTOCIX_Error'
         $TM   CL032'VTOC_Error_has_been_Fixed'
         $TM   CL032'Indexed_VTOC'
*
**       SMF22FNC Compare Table
*
T22FNC   CSECT
         $COMP TYPE=INIT
         $COMP X'01','Activate'
         $COMP X'02','Recover'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=FNC
*
**       SMF24BCF TM Table
*
T24BCF   CSECT
         DC    C'BCF='             Label
         $TM   CL032'First'
         $TM   CL032'Continuation'
         $TM   CL032'Last'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMF24EOJ TM Table
*
T24EOJ   CSECT
         DC    C'EOJ='             Label
         $TM   CL032'Completed_job'
         $TM   CL032'Completed_with_skipped'
         $TM   CL032'Uncompleted_job'
         $TM   CL032'Cancelled'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMF24SUB Compare Table
*
T24SUB   CSECT
         $COMP TYPE=INIT
         $COMP X'0001','Job_transmitter'
         $COMP X'0002','Job_receiver'
         $COMP X'0003','SYSOUT_transmitter'
         $COMP X'0004','SYSOUT_receiver'
         $COMP TYPE=BUILD,LENGTH=2,LABEL=SUB
*
**       SMF36EIN Compare Table
*
T36EIN   CSECT
         $COMP TYPE=INIT
         $COMP C'AE','Aliases_were_exported'
         $COMP C'NE','No_aliases_exported'
         $COMP TYPE=BUILD,LENGTH=2,LABEL=EIN
*
**       S42DSFL1 TM Table
*
T42DSFL1 CSECT
         DC    C'DSFL1='           Label
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'EXCP_processing'
         $TM   CL032'Non-VSAM_fixed_length_records'
         $TM   CL032'Program_library'
         $TM   CL032'Extended_format'
         $TM   CL032'Compressed_format'
*
**       S42DSTYP Compare Table
*
T42DSTYP CSECT
         $COMP TYPE=INIT
         $COMP AL1(00),'Other'
         $COMP AL1(01),'PS'
         $COMP AL1(02),'PDS'
         $COMP AL1(03),'PDSE'
         $COMP AL1(04),'DA'
         $COMP AL1(05),'ISAM'
         $COMP AL1(06),'EXCP'
         $COMP AL1(07),'Extended_format'
         $COMP AL1(10),'HFS'
         $COMP AL1(16),'KSDS_data_component'
         $COMP AL1(17),'KSDS_index_component'
         $COMP AL1(18),'Variable_RRDS_data component'
         $COMP AL1(19),'Variable_RRDS_index component'
         $COMP AL1(20),'Fixed_length_RRDS'
         $COMP AL1(21),'LDS'
         $COMP AL1(22),'ESDS'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=DSTYP
*
**       SMF42FFS Compare Table
*
T42FFS   CSECT
         $COMP TYPE=INIT
         $COMP AL1(01),'HFS'
         $COMP AL1(02),'MVS'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=FFS
*
**       S42FLAGS TM Table
*
T42FLAGS CSECT
         DC    C'ABEND='           Label
         $TM   CL032'B37'
         $TM   CL032'D37'
         $TM   CL032'E37'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMF42FTM Compare Table
*
T42FTM   CSECT
         $COMP TYPE=INIT
         $COMP AL1(00),'Unknown_MVS_file_type'
         $COMP AL1(01),'Sequential_(BSAM)_file'
         $COMP AL1(02),'Partitioned_(BPAM)'
         $COMP AL1(03),'Direct_Access_file'
         $COMP AL1(04),'ISAM_is_not_supported'
         $COMP AL1(05),'Virtual_Sequential_Access'
         $COMP AL1(06),'VSAM_Entry_Sequenced'
         $COMP AL1(07),'VSAM_Relative_Record'
         $COMP AL1(08),'VSAM_Keyed_access'
         $COMP AL1(09),'Dummy_index_level_file_block'
         $COMP AL1(10),'HFS_file_type'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=FTM
*
**       SMF42FTY Compare Table
*
T42FTY   CSECT
         $COMP TYPE=INIT
         $COMP AL1(00),'Non-file'
         $COMP AL1(01),'Regular_file'
         $COMP AL1(02),'Directory'
         $COMP AL1(03),'Block_special_device'
         $COMP AL1(04),'Character_special_device'
         $COMP AL1(05),'Symbolic_link'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=FTY
*
**       S42JDCOD Compare Table
*
T42JDCOD CSECT
         $COMP TYPE=INIT
         $COMP X'00','Close'
         $COMP X'01','Interval'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=JDCOD
*
**       SMF43OPT TM Table
*
T43OPT   CSECT
         DC    C'OPT='             Label
         $TM   CL032'FORMAT'
         $TM   CL032'COLD'
         $TM   CL032'REQ'
         $TM   CL032'LIST'
         $TM   CL032'LOG'
         $TM   CL032'RECONFIG'
         $TM   CL032'CONSOLE'
         $TM   CL032'QUICK'
*
**       SMF6xFNC Compare Table
*
T6XFNC   CSECT
         $COMP TYPE=INIT
         $COMP C'R','Rename'
         $COMP C'S','Scratch'
         $COMP C'U','Uncatalog'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=FNC
*
**       SMF6xIOD TM Table
*
T6XIOD   CSECT
         DC    C'IOD='             Label
         $TM   CL032'VSAM_cluster'
         $TM   CL032'VSAM_data'
         $TM   CL032'VSAM_index'
         $TM   CL032'VSAM_CATALOGg'
         $TM   CL032'NonVSAM'
         $TM   CL032'GDG'
         $TM   CL032'Alias'
         $TM   CL032'Reserved'
*
**       SMF6xSUB Compare Table
*
T6XSUB   CSECT
         $COMP TYPE=INIT
         $COMP C'DE','Delete'
         $COMP C'IN','Insert'
         $COMP C'UP','Update'
         $COMP TYPE=BUILD,LENGTH=2,LABEL=SUB
*
**       SMF6xTYP Compare Table
*
T6XTYP   CSECT
         $COMP TYPE=INIT
         $COMP C'A','NonVSAM_Dataset'
         $COMP C'B','GDG_Base'
         $COMP C'C','Cluster'
         $COMP C'D','Data'
         $COMP C'E','VSAM_Extension'
         $COMP C'F','Free_Space'
         $COMP C'G','Alternate_Index'
         $COMP C'H','Active_GDS'
         $COMP C'I','Index'
         $COMP C'J','GDG_Extension'
         $COMP C'K','VVR'
         $COMP C'L','Tape_Library'
         $COMP C'M','Mastercat'
         $COMP C'N','NonVSAM_Header'
         $COMP C'O','OAM'
         $COMP C'P','Page'
         $COMP C'Q','VVR_Header_Secondary'
         $COMP C'R','Path'
         $COMP C'T','True'
         $COMP C'U','Usercat'
         $COMP C'V','Volume'
         $COMP C'W','Tape_Volume'
         $COMP C'X','Alias'
         $COMP C'Y','Upgrade'
         $COMP C'Z','VVR_Header_Primary'
         $COMP X'00','NonVSAM'
         $COMP X'01','JES3'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=TYP
*
**       SMF62IND TM Table
*
T62IND   CSECT
         DC    C'IND='             Label
         $TM   CL032'Successfully_opened'
         $TM   CL032'Incorrect_password'
         $TM   CL032'Catalog_or_CRA'
         $TM   CL032'VVDS_or_ICF_CATALOGg'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       Record creator TM table
*
T63FDT   CSECT
         DC    C'FDT='             Label
         $TM   CL032'New_definition'
         $TM   CL032'Altered_definition'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Path_define/alter'
         $TM   CL032'AIX_define/alter'
*
**       SMF64DTY TM Table
*
T64DTY   CSECT
         DC    C'DTY='             Label
         $TM   CL032'Data'
         $TM   CL032'Index'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMF64MC1 TM Table
*
T64MC1   CSECT
         DC    C'MC1='             Label
         $TM   CL032'Key_access'
         $TM   CL032'RBA_access'
         $TM   CL032'CI'
         $TM   CL032'Sequential'
         $TM   CL032'Direct'
         $TM   CL032'Input'
         $TM   CL032'Output'
         $TM   CL032'User_buffers'
*
**       SMF64MC2 TM Table
*
T64MC2   CSECT
         DC    C'MC2='             Label
         $TM   CL032'JES_output'
         $TM   CL032'Control_characters'
         $TM   CL032'Reserved'
         $TM   CL032'Skip_sequential'
         $TM   CL032'VTAM_LOGON'
         $TM   CL032'Set_to_empty'
         $TM   CL032'Shared_control_blocks'
         $TM   CL032'Path_AIX'
*
**       SMF64MC3 TM Table
*
T64MC3   CSECT
         DC    C'MC3='             Label
         $TM   CL032'Reserved'
         $TM   CL032'LSR'
         $TM   CL032'GSR'
         $TM   CL032'ICIP'
         $TM   CL032'Deferred_write'
         $TM   CL032'Sequential_insert'
         $TM   CL032'Fixed_control_blocks'
         $TM   CL032'31_bit_buffers'
*
**       SMF64RIN TM Table
*
T64RIN   CSECT
         DC    C'RIN='             Label
         $TM   CL032'Close'
         $TM   CL032'EOV'
         $TM   CL032'No_space'
         $TM   CL032'Catalog/CRA'
         $TM   CL032'Close/TYPE=T'
         $TM   CL032'Abend'
         $TM   CL032'CAT/VVDS'
         $TM   CL032'Reserved'
*
**       SMF67FDT TM Table
*
T67FDT   CSECT
         DC    C'FDT='             Label
         $TM   CL032'Uncataloged'
         $TM   CL032'Scratched'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Path_deleted'
         $TM   CL032'AIX_created'
*
**       SMFRECAST TM Table
*
TAOAST   CSECT
         DC    C'AST='             Label
         $TM   CL032'Job'
         $TM   CL032'Started_task'
         $TM   CL032'TSO_User'
         $TM   CL032'APPC_transaction'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMFRECDSG TM Table
*
TAODSG   CSECT
         DC    C'DSG='             Label
         $TM   CL032'Physical_sequential'
         $TM   CL032'Partitioned'
         $TM   CL032'Direct_access'
         $TM   CL032'VSAM'
         $TM   CL032'Non-VSAM'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMFRECPF1 TM Table
*
TAOPF1   CSECT
         DC    C'PF1='             Label
         $TM   CL032'INSUFFICIENT_INITIAL_PRIMARY_SPACE_RECOVERED'
         $TM   CL032'INSUFFICIENT_SUBSEQUENT_PRIMARY_SPACE_RECOVERED'
         $TM   CL032'SECONDARY_SPACE_REQUIRED,_BUT_NONE_SPECIFIED_RE'
         $TM   CL032'INSUFFICIENT_SECONDARY_SPACE_RECOVERED'
         $TM   CL032'SECONDARY_SPACE_ALLOCATION_FAILURE_RECOVERED'
         $TM   CL032'EXCESSIVE_SECONDARY_EXTENT_RECOVERED'
         $TM   CL032'INSUFFICIENT_VOLUMES_RECOVERED'
         $TM   CL032'INSUFFICIENT_PDS_DIRECTORY_BLOCKS_RECOVERED'
*
**       SMFRECPF2 TM Table
*
TAOPF2   CSECT
         DC    C'PF2='             Label
         $TM   CL032'Space_release_added'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMFRECSF1 TM Table
*
TAOSF1   CSECT
         DC    C'SF1='             Label
         $TM   CL032'Subsystem_is_enabled'
         $TM   CL032'Product_intercepts_are_enabled'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       DVGARORI Compare Table
*
TARORI   CSECT
         $COMP TYPE=INIT
         $COMP CL001'A','Batch_API'
         $COMP CL001'T','TSO_API'
         $COMP CL001'B','Batch'
         $COMP CL001'I','ISPF'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=RORI
*
**       DVGATYP1 Compare Table
*
TATYP1   CSECT
         $COMP TYPE=INIT
         $COMP CL001'V','VSAM'
         $COMP CL001'S','Sequential'
         $COMP CL001'O','Partitioned'
         $COMP CL001'U','User'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=TYP1
*
**       DVGATYP2 Compare Table
*
TATYP2   CSECT
         $COMP TYPE=INIT
         $COMP CL001' ','Reserved'
         $COMP CL001'P','PDS'
         $COMP CL001'L','Labeled_tape'
         $COMP CL001'U','Unlabeled_tape'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=TYP2
*
**       DVGAXMOD Compare Table
*
TAXMOD   CSECT
         $COMP TYPE=INIT
         $COMP CL001'S','Sending'
         $COMP CL001'R','Receiving'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=XMOD
*
**       DVGBCOMP Compare Table
*
TBCOMP   CSECT
         $COMP TYPE=INIT
         $COMP XL001'00','Reserved'
         $COMP CL001'N','None'
         $COMP CL001'S','Standard_SNA'
         $COMP CL001'A','Adaptive'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=COMP
*
**       DVGBRORI Compare Table
*
TBRORI   CSECT
         $COMP TYPE=INIT
         $COMP CL001'S','Server'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=RORI
*
**       DVGBXMOD Compare Table
*
TBXMOD   CSECT
         $COMP TYPE=INIT
         $COMP XL001'00','Reserved'
         $COMP CL001'S','Sending'
         $COMP CL001'R','Receiving'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=XMOD
*
**       SMFFTCDT Compare Table
*
TFTCDT   CSECT
         $COMP TYPE=INIT
         $COMP CL001' ','Sequential' PQ83055
         $COMP CL001'S','Sequential'
         $COMP CL001'P','PDS'
         $COMP CL001'H','HFS'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=CDT
*
**       SMFFTCFM Compare Table
*
TFTCFM   CSECT
         $COMP TYPE=INIT
         $COMP CL001'A','ASCII'
         $COMP CL001'E','EBCDIC'
         $COMP CL001'I','Image'
         $COMP CL001'B','DBCS'
         $COMP CL001'U','UCS-2'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=CFM
*
**       SMFFTCMO Compare Table
*
TFTCMO   CSECT
         $COMP TYPE=INIT
         $COMP CL001'B','Block'
         $COMP CL001'C','Compressed'
         $COMP CL001'S','Stream'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=CMO
*
**       SMFFTCST Compare Table
*
TFTCST   CSECT
         $COMP TYPE=INIT
         $COMP CL001'F','File'
         $COMP CL001'R','Record'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=CST
*
**       SMFFTCXD Compare Table
*
TFTCXD   CSECT
         $COMP TYPE=INIT
         $COMP CL001'C','Client'
         $COMP CL001'S','Server'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=CXD
*
**       SMFFTPDT Compare Table
*
TFTPDT   CSECT
         $COMP TYPE=INIT
         $COMP CL001' ','Sequential' PQ83055
         $COMP CL001'S','Sequential'
         $COMP CL001'P','PDS'
         $COMP CL001'H','HFS'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=PDT
*
**       SMFFTPFM Compare Table
*
TFTPFM   CSECT
         $COMP TYPE=INIT
         $COMP CL001'A','ASCII'
         $COMP CL001'E','EBCDIC'
         $COMP CL001'I','Image'
         $COMP CL001'B','DBCS'
         $COMP CL001'U','UCS-2'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=PFM
*
**       SMFFTPMO Compare Table
*
TFTPMO   CSECT
         $COMP TYPE=INIT
         $COMP CL001'B','Block'
         $COMP CL001'C','Compressed'
         $COMP CL001'S','Stream'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=PMO
*
**       SMFFTPST Compare Table
*
TFTPST   CSECT
         $COMP TYPE=INIT
         $COMP CL001'F','File'
         $COMP CL001'R','Record'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=PST
*
**       SMFFTPXD Compare Table
*
TFTPXD   CSECT
         $COMP TYPE=INIT
         $COMP CL001'C','Client'
         $COMP CL001'S','Server'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=PXD
*
**       SMFFTSLR Compare Table (from RFC 959 - FTP)
*
TFTSLR   CSECT
         $COMP TYPE=INIT
 $COMP C'110','Restart_marker_reply'
 $COMP C'120','Service_ready_in_nnn_minutes'
 $COMP C'125','Data_connection_already_open;_transfer_starting'
 $COMP C'150','File_status_okay;_about_to_open_data_connection'
 $COMP C'200','Command_okay'
 $COMP C'202','Command_not_implemented,_superfluous_at_this_site'
 $COMP C'211','System_status,_or_system_help_reply'
 $COMP C'212','Directory_status'
 $COMP C'213','File_status'
 $COMP C'214','Help_message'
 $COMP C'215','NAME_system_type'
 $COMP C'220','Service_ready_for_new_user'
 $COMP C'221','Service_closing_control_connection'
 $COMP C'225','Data_connection_open;_no_transfer_in_progress'
 $COMP C'226','Closing_data_connection;_requested_action_successful'
 $COMP C'227','Entering_Passive_Mode_(h1,h2,h3,h4,p1,p2)'
 $COMP C'230','User_logged_in,_proceed'
 $COMP C'250','Requested_file_action_okay,_completed'
 $COMP C'257','PATHNAME_created'
 $COMP C'331','User_name_okay,_need_password'
 $COMP C'332','Need_account_for_login'
 $COMP C'350','Requested_file_action_pending_further_information'
 $COMP C'421','Service_not_available,_closing_control_connection'
 $COMP C'425','Cannot_open_data_connection'
 $COMP C'426','Connection_closed;_transfer_aborted'
 $COMP C'450','Requested_file_action_not_taken;_file_busy'
 $COMP C'451','Requested_action_aborted:_local_error_in_processing'
 $COMP C'452','Requested_action_not_taken;_no_system_space'
 $COMP C'500','Syntax_error,_command_unrecognized'
 $COMP C'501','Syntax_error_in_parameters_or_arguments'
 $COMP C'502','Command_not_implemented'
 $COMP C'503','Bad_sequence_of_commands'
 $COMP C'504','Command_not_implemented_for_that_parameter'
 $COMP C'530','Not_logged_in'
 $COMP C'532','Need_account_for_storing_files'
 $COMP C'550','Requested_action_not_taken;_file_not_found/no_access'
 $COMP C'551','Requested_action_aborted:_page_type_unknown'
 $COMP C'552','Requested_file_action_aborted;_no_dir/file_space'
 $COMP C'553','Requested_action_not_taken;_file_name_not_allowed'
         $COMP TYPE=BUILD,LENGTH=3,LABEL=SLR
*
**       DVGNCOMP Compare Table
*
TNCOMP   CSECT
         $COMP TYPE=INIT
         $COMP CL001'N','None'
         $COMP CL001'S','Standard_SNA'
         $COMP CL001'A','Adaptive'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=COMP
*
**       DVGNRORI Compare Table
*
TNRORI   CSECT
         $COMP TYPE=INIT
         $COMP CL001'S','Server'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=RORI
*
**       DVGNRTYP Compare Table
*
TNRTYP   CSECT
         $COMP TYPE=INIT
         $COMP XL001'00','Reserved'
         $COMP CL001'A','Automatic_Restart'
         $COMP CL001'M','Manual_Restart'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=RTYP
*
**       DVGNTYP1 Compare Table
*
TNTYP1   CSECT
         $COMP TYPE=INIT
         $COMP CL001'V','VSAM'
         $COMP CL001'S','Sequential'
         $COMP CL001'O','Partitioned'
         $COMP CL001'U','User'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=TYP1
*
**       DVGNTYP2 Compare Table
*
TNTYP2   CSECT
         $COMP TYPE=INIT
         $COMP CL001' ','Reserved'
         $COMP CL001'P','PDS'
         $COMP CL001'L','Labeled_tape'
         $COMP CL001'U','Unlabeled_tape'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=TYP2
*
**       DVGNTYPE Compare Table
*
TNTYPE   CSECT
         $COMP TYPE=INIT
         $COMP CL001'S','Transfer_Start'
         $COMP CL001'F','Transfer_Finish'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=TYPE
*
**       DVGNXMOD Compare Table
*
TNXMOD   CSECT
         $COMP TYPE=INIT
         $COMP CL001'S','Sending'
         $COMP CL001'R','Receiving'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=XMOD
*
**       DVGSCOMP Compare Table
*
TSCOMP   CSECT
         $COMP TYPE=INIT
         $COMP CL001'N','None'
         $COMP CL001'S','Standard_SNA'
         $COMP CL001'A','Adaptive'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=COMP
*
**       DVGSRPNT Compare Table
*
TSRPNT   CSECT
         $COMP TYPE=INIT
         $COMP CL001'B','Beginning'
         $COMP CL001'C','Checkpoint'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=RPNT
*
**       DVGSRTYP Compare Table
*
TSRTYP   CSECT
         $COMP TYPE=INIT
         $COMP CL001' ','Reserved'
         $COMP CL001'Y','Requested'
         $COMP CL001'N','Not_requested'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=RTYP
*
**       DVGSTYP1 Compare Table
*
TSTYP1   CSECT
         $COMP TYPE=INIT
         $COMP CL001'V','VSAM'
         $COMP CL001'S','Sequential'
         $COMP CL001'O','Partitioned'
         $COMP CL001'U','User'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=TYP1
*
**       DVGSTYP2 Compare Table
*
TSTYP2   CSECT
         $COMP TYPE=INIT
         $COMP CL001' ','Reserved'
         $COMP CL001'P','PDS'
         $COMP CL001'L','Labeled_tape'
         $COMP CL001'U','Unlabeled_tape'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=TYP2
*
**       DVGSXMOD Compare Table
*
TSXMOD   CSECT
         $COMP TYPE=INIT
         $COMP CL001'S','Sending'
         $COMP CL001'R','Receiving'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=XMOD
*
**       SMF73CFL TM Table
*
T73CFL   CSECT
         DC    C'CFL='             Label
         $TM   CL032'Configuration_Changed'
         $TM   CL032'Configuration_Changed_Since_POR'
         $TM   CL032'POR_IODF_Dynamic'
         $TM   CL032'Token_Is_Valid'
         $TM   CL032'Record_May_Be_Invalid'
         $TM   CL032'CPMF_Available'
         $TM   CL032'Reserved'
         $TM   CL032'CPMF_Mode_Has_Changed'
*
**       SMF73CMI TM Table
*
T73CMI   CSECT
         DC    C'CMI='             Label
         $TM   CL032'CPMF_Is_Not_Active'
         $TM   CL032'Compatibility_Mode'
         $TM   CL032'Extended_Mode'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMF73SFL TM Table
*
T73SFL   CSECT
         DC    C'SFL='             Label
         $TM   CL032'DCM_Supported_By_Hardware'
         $TM   CL032'DCM_Managed_Channels_Configured'
         $TM   CL032'Multiple_Logical_Channels'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       R747CSFL TM Table
*
T747CSFL CSECT
         DC    C'CSFL='            Label
         $TM   CL032'Port_type_is_not_unique'
         $TM   CL032'ID_is_not_unique_or_not_known'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Port_status_changed'
         $TM   CL032'Port_has_been_removed'
         $TM   CL032'Port_has_been_activated'
         $TM   CL032'No_measurement_data_available'
*
**       R747CTFL TM Table
*
T747CTFL CSECT
         DC    C'CTFL='            Label
         $TM   CL032'Port_type_is_single_CU'
         $TM   CL032'Port_type_is_multiple_CU'
         $TM   CL032'Port_type_is_CHPID'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       R747GCFL TM Table
*
T747GCFL CSECT
         DC    C'GCFL='            Label
         $TM   CL032'Configuration_changed_during_interval'
         $TM   CL032'Configuration_changed_since_IPL'
         $TM   CL032'System_IPLed_via_IODF'
         $TM   CL032'I/O_configuration_token_is_valid'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       R747PSFL TM Table
*
T747PSFL CSECT
         DC    C'PSFL='            Label
         $TM   CL032'Port_type_is_not_unique'
         $TM   CL032'ID_is_not_unique_or_not_known'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Port_status_changed'
         $TM   CL032'Port_has_been_removed'
         $TM   CL032'Port_has_been_activated'
         $TM   CL032'No_measurement_data_available'
*
**       R747PTFL TM Table
*
T747PTFL CSECT
         DC    C'PTFL='            Label
         $TM   CL032'Port_type_is_single_CU'
         $TM   CL032'Port_type_is_multiple_CU'
         $TM   CL032'Port_type_is_CHPID'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       R747SPFL TM Table
*
T747SPFL CSECT
         DC    C'SPFL='            Label
         $TM   CL032'Status_of_switch_has_changed'
         $TM   CL032'Number_of_ports_has_changed'
         $TM   CL032'Switch_is_offline'
         $TM   CL032'Switch_is_now_online'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMF75FL2 TM Table
*
T75FL2   CSECT
         DC    C'FL2='             Label
         $TM   CL032'VIO'
         $TM   CL032'Multiple_exposure_device'
         $TM   CL032'Alternate_control_unit'
         $TM   CL032'Device_Name_Valid'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMF75PST TM Table
*
T75PST   CSECT
         DC    C'PST='             Label
         $TM   CL032'PLPA'
         $TM   CL032'Common'
         $TM   CL032'Duplex'
         $TM   CL032'Local'
         $TM   CL032'Swap'
         $TM   CL032'Unusable'
         $TM   CL032'Brought_online'
         $TM   CL032'Brought_offline'
*
**       R783CFL TM Table
*
T783CFL  CSECT
         DC    C'CFL='             Label
         $TM   CL032'Configuration_Changed'
         $TM   CL032'Configuration_Changed_Since_POR'
         $TM   CL032'POR_IODF_Contains_Token'
         $TM   CL032'Token_Is_Valid'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       R797FLG TM Table
*
T796FLG  CSECT
         DC    C'FLG='             Label
         $TM   CL032'Device_Reserved_This_Processor'
         $TM   CL032'Minor_Name_Truncated'
         $TM   CL032'Global_Resource'
         $TM   CL032'Reserve_Converted_To_Enqueue'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       R797FLG TM Table
*
T797FLG  CSECT
         DC    C'FLG='             Label
         $TM   CL032'Detail_Data'
         $TM   CL032'Major_Name_Specified'
         $TM   CL032'Minor_Name_Specified'
         $TM   CL032'Minor_Name_Truncated'
         $TM   CL032'Global_Resource'
         $TM   CL032'Specified_System'
         $TM   CL032'Specified_System_Exclusive'
         $TM   CL032'Reserved'
*
**       R79BFLG TM Table
*
T79BFLG  CSECT
         DC    C'FLG='             Label
         $TM   CL032'Bad'
         $TM   CL032'PLPA'
         $TM   CL032'Common'
         $TM   CL032'Duplex'
         $TM   CL032'Local'
         $TM   CL032'Page'
         $TM   CL032'Swap'
         $TM   CL032'VIO'
*
**       R79BFL2 TM Table
*
T79BFL2  CSECT
         DC    C'FL2='             Label
         $TM   CL032'Reserved'
         $TM   CL032'Alternate_Control_Unit'
         $TM   CL032'Device_Name_Valid'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMF77DFG TM Table
*
T77DFG   CSECT
         DC    C'DFG='             Label
         $TM   CL032'Resource_in_contention'
         $TM   CL032'Scope_of_system'
         $TM   CL032'Exclusive_owner'
         $TM   CL032'Waiting_job_1_exclusive_usage'
         $TM   CL032'Waiting_job_2_exclusive_usage'
         $TM   CL032'Global'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMF80AAA TM Table
*
T80AAA   CSECT
         DC    C'ALLOWED='         Label
         $TM   CL032'ALTER'
         $TM   CL032'CONTROL'
         $TM   CL032'UPDATE'
         $TM   CL032'READ'
         $TM   CL032'NONE'
         $TM   CL032'EXECUTE'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMF80AAR TM Table
*
T80AAR   CSECT
         DC    C'INTENT='          Label
         $TM   CL032'ALTER'
         $TM   CL032'CONTROL'
         $TM   CL032'UPDATE'
         $TM   CL032'READ'
         $TM   CL032'NONE'
         $TM   CL032'Reserved'
         $TM   CL032'WRITE'
         $TM   CL032'Reserved'
*
**       SMF80ATH TM Table
*
T80ATH   CSECT
         DC    C'ATH='             Authorities used
         $TM   CL032'NORMAL'
         $TM   CL032'SPECIAL'
         $TM   CL032'OPERATIONS'
         $TM   CL032'AUDITOR'
         $TM   CL032'EXIT'
         $TM   CL032'FAILSOFT'
         $TM   CL032'BYPASSED'
         $TM   CL032'TRUSTED'
*
**       SMF80AU2 TM Table
*
T80AU2   CSECT
         DC    C'AU2='             Authorities used continued
         $TM   CL032'z/OS_UNIX_superuser'
         $TM   CL032'z/OS_UNIX_system_function'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMF80DES TM Table
*
T80DES   CSECT
         DC    C'DESCRIPTOR='      Label
         $TM   CL032'VIOLATION'
         $TM   CL032'UNDEFINED'
         $TM   CL032'Reserved'
         $TM   CL032'WARNING'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
*
**       SMF80EVT Compare Table
*
T80EVENT CSECT
         $COMP TYPE=INIT
         $COMP X'01','JOBINIT'
         $COMP X'02','ACCESS'
         $COMP X'03','ADDVOL'
         $COMP X'04','RENAMEDS'
         $COMP X'05','DELRES'
         $COMP X'06','DELVOL'
         $COMP X'07','DEFINE'
         $COMP X'08','ADDSD'
         $COMP X'09','ADDGROUP'
         $COMP X'0A','ADDUSER'
         $COMP X'0B','ALTDSD'
         $COMP X'0C','ALTGROUP'
         $COMP X'0D','ALTUSER'
         $COMP X'0E','CONNECT'
         $COMP X'0F','DELDSD'
         $COMP X'10','DELGROUP'
         $COMP X'11','DELUSER'
         $COMP X'12','PASSWORD'
         $COMP X'13','PERMIT'
         $COMP X'14','RALTER'
         $COMP X'15','RDEFINE'
         $COMP X'16','RDELETE'
         $COMP X'17','REMOVE'
         $COMP X'18','SETROPTS'
         $COMP X'19','RVARY'
         $COMP X'1A','APPCLU'
         $COMP X'1B','GENERAL'
         $COMP X'1C','DIRSRCH'
         $COMP X'1D','DACCESS'
         $COMP X'1E','FACCESS'
         $COMP X'1F','CHAUDIT'
         $COMP X'20','CHDIR'
         $COMP X'21','CHMOD'
         $COMP X'22','CHOWN'
         $COMP X'23','CLRSETID'
         $COMP X'24','EXESETID'
         $COMP X'25','GETPSENT'
         $COMP X'26','INITOEDP'
         $COMP X'27','TERMOEDP'
         $COMP X'28','KILL'
         $COMP X'29','LINK'
         $COMP X'2A','MKDIR'
         $COMP X'2B','MKNOD'
         $COMP X'2C','MNTFSYS'
         $COMP X'2D','OPENFILE'
         $COMP X'2E','PTRACE'
         $COMP X'2F','RENAMEF'
         $COMP X'30','RMDIR'
         $COMP X'31','SETEGID'
         $COMP X'32','SETEUID'
         $COMP X'33','SETGID'
         $COMP X'34','SETUID'
         $COMP X'35','SYMLINK'
         $COMP X'36','UNLINK'
         $COMP X'37','UMNTFSYS'
         $COMP X'38','CHKFOWN'
         $COMP X'39','CHKPRIV'
         $COMP X'3A','OPENSTTY'
         $COMP X'3B','RACLINK'
         $COMP X'3C','IPCCHK'
         $COMP X'3D','IPCGET'
         $COMP X'3E','IPCCTL'
         $COMP X'3F','SETGROUP'
         $COMP X'40','CKOWN2'
         $COMP X'41','R_AUDIT'
         $COMP X'42','RACDCERT'
         $COMP X'43','INITACEE'
         $COMP X'44','KTICKET'
         $COMP X'45','RPKIGENC'
         $COMP X'46','RPKIEXPT'
         $COMP X'47','PDACCESS'
         $COMP X'48','READATA'
         $COMP X'49','UPDATEREQ'
         $COMP X'4A','UPDATECERT'
         $COMP X'4B','SETFACL'
         $COMP X'4C','DELFACL'
         $COMP X'4D','SETFSECL'
         $COMP X'4E','WRITEDOWN'
         $COMP X'4F','PKIDPUBR'
         $COMP X'50','RPKIRESP'
         $COMP X'51','PTEVAL'
         $COMP X'52','PTCREATE'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=EVENT
*
**       SMF80EVQ Compare Table
**       (Descriptions do not contain:  HAS/HAS BEEN/IS
*
T80QUAL  CSECT
 $COMP TYPE=INIT
*$COMP X'01','JOBINIT'
 $COMP X'0100','Successful_Initiation'
 $COMP X'0101','Password_not_valid'
 $COMP X'0102','Group_not_valid'
 $COMP X'0103','OIDCARD_not_valid'
 $COMP X'0104','Terminal/console_not_valid'
 $COMP X'0105','Application_not_valid'
 $COMP X'0106','Revoked_user_attempting_access'
 $COMP X'0107','User ID automatically_revoked'
 $COMP X'0108','Successful_termination'
 $COMP X'0109','Undefined_user ID'
 $COMP X'010A','Insufficient_SECLABEL_authority'
 $COMP X'010B','Not_authorized_to_SECLABEL'
 $COMP X'010C','Successful_RACINIT_initiation'
 $COMP X'010D','Successful_RACINIT_delete'
 $COMP X'010E','System_now_requires_more_authority'
 $COMP X'010F','Remote_job_entry_-_job_not_authorized'
 $COMP X'0110','SURROGAT_class_inactive'
 $COMP X'0111','Submitter_not_authorized_by_user'
 $COMP X'0112','Submitter_not_authorized_to_SECLABEL'
 $COMP X'0113','User not_authorized_to_job'
 $COMP X'0114','WARNING-Insufficient_SECLABEL_authoriy'
 $COMP X'0115','WARNING-SECLABEL_missing_from_user/job/profile'
 $COMP X'0116','WARNING-Not_authorized_to_SECLABEL'
 $COMP X'0117','SECLABELs_not_compatible'
 $COMP X'0118','WARNING-SECLABELs_not_compatible'
 $COMP X'0119','Current_PASSWORD_expired'
 $COMP X'011A','Invalid_new_PASSWORD'
 $COMP X'011B','Verification_failed_by_installation'
 $COMP X'011C','Group_access_revoked'
 $COMP X'011D','OIDCARD_required'
 $COMP X'011E','Network_job_entry_-_job_not_authorized'
 $COMP X'011F','WARNING-Unknown_user_from_trusted_node_propagated'
 $COMP X'0120','Successful_initiation_using_PassTicket'
 $COMP X'0121','Attempted_replay_of_PassTicket'
 $COMP X'0122','Client_SECLABEL_not_equivalent_to_server'
*$COMP X'02','ACCESS'
 $COMP X'0200','Successful'
 $COMP X'0201','Insufficient_authority'
 $COMP X'0202','Profile_not_found_-_RACFIND_specified_on_macro'
 $COMP X'0203','Access_permitted_due_to_warning'
 $COMP X'0204','Failed_due_to_PROTECTALL'
 $COMP X'0205','WARNING_issued_due_to_PROTECTALL'
 $COMP X'0206','Insufficient_CATEGORY/SECLEVEL'
 $COMP X'0207','Insufficient_SECLABEL_authority'
 $COMP X'0208','WARNING-SECLABEL_missing_from_job/user/profile'
 $COMP X'0209','WARNING-Insufficient_SECLABEL_authority'
 $COMP X'020A','WARNING-Data_set_not_cataloged'
 $COMP X'020B','Data_set_not_cataloged'
 $COMP X'020C','Profile_not_found_-_required_for_authority_checking'
 $COMP X'020D','WARNING-Insufficient_CATEGORY/SECLEVEL'
 $COMP X'020E','WARNING-Non-MAIN_execution_environment_detected'
 $COMP X'020F','Conditional_access/use_of_EXECUTE-controlled_PGM'
*$COMP X'03','ADDVOL'
 $COMP X'0300','Successful'
 $COMP X'0301','Insufficient_authority_(DATASET_only)'
 $COMP X'0302','Insufficient_SECLABEL_authority'
 $COMP X'0303','Less_specific_profile_exists_with_different_SECLABEL'
*$COMP X'04','RENAMEDS'
 $COMP X'0400','Successful'
 $COMP X'0401','Group_not_valid'
 $COMP X'0402','User_not_in_group'
 $COMP X'0403','Insufficient_authority'
 $COMP X'0404','Resource_name_already_defined'
 $COMP X'0405','User_not_defined_to_RACF'
 $COMP X'0406','Resource_not_protected'
 $COMP X'0407','WARNING-Resource_not_protected'
 $COMP X'0408','User_in_second_qualifier_not_RACF-defined'
 $COMP X'0409','Less_specific_profile_exists_with_different_SECLABEL'
 $COMP X'040A','Insufficient_SECLABEL_authority'
 $COMP X'040B','Resource_not_protected_by_SECLABEL'
 $COMP X'040C','New_name_not_protected_by_SECLABEL'
 $COMP X'040D','New_SECLABEL_must_dominate_old_SECLABEL'
 $COMP X'040E','Insufficient_SECLABEL_authority'
 $COMP X'040F','WARNING-Resource_not_protected_by_SECLABEL'
 $COMP X'0410','WARNING_New_name_not_protected_by_SECLABEL'
 $COMP X'0411','WARNING-New_SECLABEL_must_dominate_old_SECLABEL'
*$COMP X'05','DELRES'
 $COMP X'0500','Successful'
 $COMP X'0501','Resource_not_found'
 $COMP X'0502','Invalid_volume_identification_(DATASET_only)'
*$COMP X'06','DELVOL'
 $COMP X'0600','Successful'
*$COMP X'07','DEFINE'
 $COMP X'0700','Successful'
 $COMP X'0701','Group_undefined'
 $COMP X'0702','User_not_in_group'
 $COMP X'0703','Insufficient_authority'
 $COMP X'0704','Resource_name_already_defined'
 $COMP X'0705','User_not_defined_to_RACF'
 $COMP X'0706','Resource_not_protected'
 $COMP X'0707','WARNING-Resource_not_protected'
 $COMP X'0708','WARNING-SECLABEL_missing_from_job/user/profile'
 $COMP X'0709','WARNING-Insufficient_SECLABEL_authority'
 $COMP X'070A','User_in_second_qualifier_not_RACF-defined'
 $COMP X'070B','Insufficient_SECLABEL_authority'
 $COMP X'070C','Less_specific_profile_exists_with_different_SECLABEL'
*$COMP X'08','ADDSD'
 $COMP X'0800','Successful'
 $COMP X'0801','Insufficient_authority'
 $COMP X'0802','Keyword_violations_detected'
 $COMP X'0803','SUCCESSFUL_RETRIEVAL_OF_DSNS_FOR_SECLABEL'
 $COMP X'0804','ERROR_DURING_RETRIEVAL_OF_DSNS_FOR_SECLABEL'
*$COMP X'09','ADDGROUP'
 $COMP X'0900','Successful'
 $COMP X'0901','Insufficient_authority'
 $COMP X'0902','Keyword_violations_detected'
*$COMP X'0A','ADDUSER'
 $COMP X'0A00','Successful'
 $COMP X'0A01','Insufficient_authority'
 $COMP X'0A02','Keyword_violations_detected'
*$COMP X'0B','ALTDSD'
 $COMP X'0B00','Successful'
 $COMP X'0B01','Insufficient_authority'
 $COMP X'0B02','Keyword_violations_detected'
 $COMP X'0B03','SUCCESSFUL_RETRIEVAL_OF_DSNS_FOR_SECLABEL'
 $COMP X'0B04','ERROR_DURING_RETRIEVAL_OF_DSNS_FOR_SECLABEL'
*$COMP X'0C','ALTGROUP'
 $COMP X'0C00','Successful'
 $COMP X'0C01','Insufficient_authority'
 $COMP X'0C02','Keyword_violations_detected'
*$COMP X'0F','DELDSD'
 $COMP X'0D00','Successful'
 $COMP X'0D01','Insufficient_authority'
 $COMP X'0D02','Keyword_violations_detected'
*$COMP X'0E','CONNECT'
 $COMP X'0E00','Successful'
 $COMP X'0E01','Insufficient_authority'
 $COMP X'0E02','Keyword_violations_detected'
*$COMP X'0D','ALTUSER'
 $COMP X'0F00','Successful'
 $COMP X'0F01','Insufficient_authority'
 $COMP X'0F02','Keyword_violations_detected'
 $COMP X'0F03','SUCCESSFUL_RETRIEVAL_OF_DSNS_FOR_SECLABEL'
 $COMP X'0F04','ERROR_DURING_RETRIEVAL_OF_DSNS_FOR_SECLABEL'
*$COMP X'10','DELGROUP'
 $COMP X'1000','Successful'
 $COMP X'1001','Insufficient_authority'
 $COMP X'1002','Keyword_violations_detected'
*$COMP X'11','DELUSER'
 $COMP X'1100','Successful'
 $COMP X'1101','Insufficient_authority'
 $COMP X'1102','Keyword_violations_detected'
*$COMP X'12','PASSWORD'
 $COMP X'1200','Successful'
 $COMP X'1201','Insufficient_authority'
 $COMP X'1202','Keyword_violations_detected'
*$COMP X'13','PERMIT'
 $COMP X'1300','Successful'
 $COMP X'1301','Insufficient_authority'
 $COMP X'1302','Insufficient_authority'
*$COMP X'14','RALTER'
 $COMP X'1400','Successful'
 $COMP X'1401','Insufficient_authority'
 $COMP X'1402','Keyword_violations_detected'
*$COMP X'15','RDEFINE'
 $COMP X'1500','Successful'
 $COMP X'1501','Insufficient_authority'
 $COMP X'1502','Keyword_violations_detected'
*$COMP X'16','RDELETE'
 $COMP X'1600','Successful'
 $COMP X'1601','Insufficient_authority'
 $COMP X'1602','Keyword_violations_detected'
*$COMP X'17','REMOVE'
 $COMP X'1700','Successful'
 $COMP X'1701','Insufficient_authority'
 $COMP X'1702','Keyword_violations_detected'
*$COMP X'18','SETROPTS'
 $COMP X'1800','Successful'
 $COMP X'1801','Insufficient_authority'
 $COMP X'1802','Keyword_violations_detected'
*$COMP X'19','RVARY'
 $COMP X'1900','Successful'
 $COMP X'1901','Insufficient_authority'
 $COMP X'1902','Keyword_violations_detected'
*$COMP X'1A','APPCLU'
 $COMP X'1A00','Partner_verification_was_successful'
 $COMP X'1A01','Session_established_without_verification'
 $COMP X'1A02','Local_LU_key_will_expire_in_<=_5_days'
 $COMP X'1A03','Partner_LU_access_has_been_revoked'
 $COMP X'1A04','Partner_LU_key_does_not_match_this_LU_key'
 $COMP X'1A05','Session_terminated_for_security_reason'
 $COMP X'1A06','Required_SESSION_KEY_not_defined'
 $COMP X'1A07','Possible_security_attack_by_partner_LU'
 $COMP X'1A08','SESSION_KEY_not_defined_for_partner_LU'
 $COMP X'1A09','SESSION_KEY_not_defined_for_this_LU'
 $COMP X'1A0A','SNA_security-related_protocol_error'
 $COMP X'1A0B','Profile_change_during_verification'
 $COMP X'1A0C','Expired_SESSION_KEY'
*$COMP X'1B','GENERAL'
 $COMP X'1B00','Successful'
*$COMP X'1C','DIRSRCH'
 $COMP X'1C00','Successful'
 $COMP X'1C01','Insufficient_authority'
 $COMP X'1C02','SECLABEL_failure'
*$COMP X'1D','DACCESS'
 $COMP X'1D00','Successful'
 $COMP X'1D01','Insufficient_authority'
 $COMP X'1D02','SECLABEL_failure'
*$COMP X'1E','FACCESS'
 $COMP X'1E00','Successful'
 $COMP X'1E01','Insufficient_authority'
 $COMP X'1E02','SECLABEL_failure'
*$COMP X'1F','CHAUDIT'
 $COMP X'1F00','Successful'
 $COMP X'1F01','Insufficient_authority_to_change_user_audit_options'
 $COMP X'1F02','Insufficient_authority_to_change_auditor_audit_options'
 $COMP X'1F03','SECLABEL_failure'
*$COMP X'20','CHDIR'
 $COMP X'2000','Successful'
 $COMP X'2001','Insufficient_authority'
 $COMP X'2002','SECLABEL_failure'
*$COMP X'21','CHMOD'
 $COMP X'2100','Successful'
 $COMP X'2101','Insufficient_authority'
 $COMP X'2102','SECLABEL_failure'
*$COMP X'22','CHOWN'
 $COMP X'2200','Successful'
 $COMP X'2201','Insufficient_authority'
 $COMP X'2202','SECLABEL_failure'
*$COMP X'23','CLRSETID'
 $COMP X'2300','Successful'
*$COMP X'24','EXESETID'
 $COMP X'2400','Successful'
*$COMP X'25','GETPSENT'
 $COMP X'2500','Successful'
 $COMP X'2501','Insufficient_authority'
*$COMP X'26','INITOEDP'
 $COMP X'2600','Successful'
 $COMP X'2601','No_user_profile_or_no_OMVS_segment'
 $COMP X'2602','No_UID'
 $COMP X'2603','No_GID'
*$COMP X'27','TERMOEDP'
 $COMP X'2700','Successful'
*$COMP X'28','KILL'
 $COMP X'2800','Successful'
 $COMP X'2801','Insufficient_authority'
 $COMP X'2802','SECLABEL_failure'
*$COMP X'29','LINK'
 $COMP X'2900','Successful'
 $COMP X'2901','Insufficient_authority'
 $COMP X'2902','SECLABEL_failure'
*$COMP X'2A','MKDIR'
 $COMP X'2A00','Successful'
 $COMP X'2A01','Insufficient_authority'
 $COMP X'2A02','SECLABEL_failure'
*$COMP X'2B','MKNOD'
 $COMP X'2B00','Successful'
 $COMP X'2B01','Insufficient_authority'
 $COMP X'2B02','SECLABEL_failure'
*$COMP X'2C','MNTFSYS'
 $COMP X'2C00','Successful'
 $COMP X'2C01','Insufficient_authority'
*$COMP X'2D','OPENFILE'
 $COMP X'2D00','Successful'
 $COMP X'2D01','Insufficient_authority'
 $COMP X'2D02','SECLABEL_failure'
*$COMP X'2E','PTRACE'
 $COMP X'2E00','Successful'
 $COMP X'2E01','Insufficient_authority'
 $COMP X'2E02','SECLABEL_failure'
*$COMP X'2F','RENAMEF'
 $COMP X'2F00','Successful'
 $COMP X'2F01','Insufficient_authority'
 $COMP X'2F02','SECLABEL_failure'
*$COMP X'30','RMDIR'
 $COMP X'3000','Successful'
 $COMP X'3001','Insufficient_authority'
 $COMP X'3002','SECLABEL_failure'
*$COMP X'31','SETEGID'
 $COMP X'3100','Successful'
 $COMP X'3101','Insufficient_authority'
*$COMP X'32','SETEUID'
 $COMP X'3200','Successful'
 $COMP X'3201','Insufficient_authority'
*$COMP X'33','SETGID'
 $COMP X'3300','Successful'
 $COMP X'3301','Insufficient_authority'
*$COMP X'34','SETUID'
 $COMP X'3400','Successful'
 $COMP X'3401','Insufficient_authority'
*$COMP X'35','SYMLINK'
 $COMP X'3500','Successful'
 $COMP X'3501','Insufficient_authority'
 $COMP X'3502','SECLABEL_failure'
*$COMP X'36','UNLINK'
 $COMP X'3600','Successful'
 $COMP X'3601','Insufficient_authority'
 $COMP X'3602','SECLABEL_failure'
*$COMP X'37','UMNTFSYS'
 $COMP X'3700','Successful'
 $COMP X'3701','Insufficient_authority'
*$COMP X'38','CHKFOWN'
 $COMP X'3800','Successful'
 $COMP X'3801','User_is_not_the_owner'
 $COMP X'3802','SECLABEL_failure'
*$COMP X'39','CHKPRIV'
 $COMP X'3900','Successful'
 $COMP X'3901','Insufficient_authority'
*$COMP X'3A','OPENSTTY'
 $COMP X'3A00','Successful'
 $COMP X'3A01','Insufficient_authority'
*$COMP X'3B','RACLINK'
 $COMP X'3B00','Successful'
 $COMP X'3B01','Insufficient_authority'
 $COMP X'3B02','Keyword_violation_detected'
 $COMP X'3B03','Association_already_defined'
 $COMP X'3B04','Association_already_approved'
 $COMP X'3B05','Association_does_not_match'
 $COMP X'3B06','Association_does_not_exist'
 $COMP X'3B07','Password_not_valid_or_user_ID_is_revoked'
*$COMP X'3C','IPCCHK'
 $COMP X'3C00','Successful'
 $COMP X'3C01','Insufficient_authority'
 $COMP X'3C02','SECLABEL_failure'
*$COMP X'3D','IPCGET'
 $COMP X'3D00','Successful'
 $COMP X'3D01','SECLABEL_failure'
*$COMP X'3E','IPCCTL'
 $COMP X'3E00','Successful'
 $COMP X'3E01','Insufficient_authority'
 $COMP X'3E02','SECLABEL_failure'
*$COMP X'3F','SETGROUP'
 $COMP X'3F00','Successful'
 $COMP X'3F01','Insufficient_authority'
*$COMP X'40','CKOWN2'
 $COMP X'4000','Successful'
 $COMP X'4001','User_is_not_the_owner'
 $COMP X'4002','SECLABEL_failure'
*$COMP X'41','R_AUDIT'
 $COMP X'4100','Successful'
*$COMP X'42','RACDCERT'
 $COMP X'4200','Successful'
 $COMP X'4201','Insufficient_authority'
*$COMP X'43','INITACEE'
 $COMP X'4300','Successful_certificate_registration'
 $COMP X'4301','Successful_certificate_deregistration'
 $COMP X'4302','Not_authorized_to_register_the_certificate'
 $COMP X'4303','Not_authorized_to_deregister_the_certificate'
 $COMP X'4304','No_user_ID_found_for_the_certificate'
 $COMP X'4305','The_certificate_is_not_trusted'
 $COMP X'4306','Successful_CERTAUTH_certificate_registration'
 $COMP X'4307','Insufficient_authority_CERTAUTH_registration'
 $COMP X'4308','Client_security_label_not_equivalent_to_server'
*$COMP X'44','KTICKET'
 $COMP X'4400','Successful'
 $COMP X'4401','Failure'
*$COMP X'45','RPKIGENC'
 $COMP X'4500','Successful_GENCERT'
 $COMP X'4501','Insufficient_authority_GENCERT'
 $COMP X'4502','Successful_REQCERT'
 $COMP X'4503','Insufficient_authority_REQCERT'
 $COMP X'4504','Successful_GENRENEW'
 $COMP X'4505','Insufficient_authority_GENRENEW'
 $COMP X'4506','Successful_REQRENEW'
 $COMP X'4507','Insufficient_authority_REQRENEW'
*$COMP X'46','RPKIEXPT'
 $COMP X'4600','Successful'
 $COMP X'4601','Insufficient_authority'
 $COMP X'4602','Incorrect_pass_phrase'
*$COMP X'47','PDACCESS'
 $COMP X'4700','Successful'
 $COMP X'4701','WARNING-Insufficient_authority'
 $COMP X'4702','WARNING-Insufficient_traverse_authority'
 $COMP X'4703','WARNING-Insufficient_time-of-day_authority'
 $COMP X'4704','Insufficient_authority'
 $COMP X'4705','Insufficient_traverse_authority'
 $COMP X'4706','Insufficient_time-of-day_authority'
*$COMP X'48','READATA'
 $COMP X'4800','Successful_admin_QUERY_or_DETAILS'
 $COMP X'4801','Insufficient_authority_for_admin_QUERY_or_DETAILS'
 $COMP X'4802','Successful_VERIFY'
 $COMP X'4803','Insufficient_authority_for_VERIFY'
 $COMP X'4804','Incorrect_VERIFY_certificate,_no_record_found'
*$COMP X'49','UPDATEREQ'
 $COMP X'4900','Successful'
 $COMP X'4901','Insufficient_authority'
*$COMP X'4A','UPDATECERT'
 $COMP X'4A00','Successful_admin_UPDATECERT'
 $COMP X'4A01','Insufficient_authority_for_admin_UPDATECERT'
 $COMP X'4A02','Successful_REVOKE'
 $COMP X'4A03','Insufficient_authority_for_REVOKE'
*$COMP X'4B','SETFACL'
 $COMP X'4B00','Successful'
 $COMP X'4B01','Insufficient_authority'
 $COMP X'4B02','SECLABEL_failure'
*$COMP X'4C','DELFACL'
 $COMP X'4C00','Successful'
 $COMP X'4C01','Insufficient_authority'
 $COMP X'4C02','SECLABEL_failure'
*$COMP X'4D','SETFSECL'
 $COMP X'4D00','Successful'
 $COMP X'4D01','Insufficient_authority'
*$COMP X'4E','WRITEDOWN'
 $COMP X'4E00','Successful'
 $COMP X'4E01','Insufficient_authority'
*$COMP X'4F','PKIDPUBR'
 $COMP X'4F01','Successful'
*$COMP X'50','RPKIRESP'
 $COMP X'5000','Successful'
 $COMP X'5001','Insufficient_authority'
*$COMP X'51','PTEVAL'
 $COMP X'5100','Success'
 $COMP X'5101','Failure'
*$COMP X'52','PTCREATE'
 $COMP X'5200','Success'
 $COMP X'5201','Failure'
 $COMP TYPE=BUILD,LENGTH=2,LABEL=QUALIFIER
*
**       SMF80REA TM Table
*
T80REA   CSECT
         DC    C'REA='             Reason for logging
         $TM   CL032'CLASS'
         $TM   CL032'USER'
         $TM   CL032'SPECIAL_USERS'
         $TM   CL032'RESOURCE/EXIT/FAILSOFT'
         $TM   CL032'RACINIT'
         $TM   CL032'COMMAND'
         $TM   CL032'CMDVIOL'
         $TM   CL032'GLOBALAUDIT'
*
**       SMF80RE2 TM Table
*
T80RE2   CSECT
         DC    C'RE2='             Reason for logging continued
         $TM   CL032'SECLEVEL'
         $TM   CL032'VMEVENT'
         $TM   CL032'LOGOPTIONS'
         $TM   CL032'SECLABELAUDIT'
         $TM   CL032'COMPATMODE'
         $TM   CL032'APPLAUDIT'
         $TM   CL032'Undefined_user_to_z/OS_UNIX'
         $TM   CL032'Insufficient_authority_in_z/OS_UNIX'
*
**       SMF81D30 Compare Table
*
T81D30   CSECT
         $COMP TYPE=INIT
         $COMP X'80','Active_RACF_Dataset'
         $COMP X'C0','Backup_RACF_Dataset'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=NONE
*
**       SMF82VES TM Table
*
T82VES   CSECT
         DC    C'VES='             Label
         $TM   CL032'Special_security_mode_allowed'
         $TM   CL032'Special_security_mode_enabled'
         $TM   CL032'Reserved'
         $TM   CL032'Key_authentication'
         $TM   CL032'Reserved'
         $TM   CL032'Reserved'
         $TM   CL032'RACF_checking_supervisor_state'
         $TM   CL032'Reserved'
*
**       SMF90TID Compare Table
*
T90TID   CSECT
         $COMP TYPE=INIT
         $COMP H'5','SET_SMF'
         $COMP H'6','Switch_SMF'
         $COMP H'7','HALT_EOD'
         $COMP H'9','IPL_SMF'
         $COMP H'13','SETSMF'
         $COMP H'15','SET_SMF_(Restart_SMF)'
         $COMP H'26','IPL_LOGREC'
         $COMP TYPE=BUILD,LENGTH=2,LABEL=TID
*
**       SMF92MFT Compare Table
*
T92MFT   CSECT
         $COMP TYPE=INIT
         $COMP AL4(1),'MVS_Local_File_System'
         $COMP AL4(2),'Remote_File_System'
         $COMP AL4(3),'Pipe_File_System'
         $COMP AL4(4),'Socket_File_System'
         $COMP AL4(5),'Cross_System_PFS_(XPFS)'
         $COMP TYPE=BUILD,LENGTH=4,LABEL=MFT
*
**       SMF92STP Compare Table
*
T92STP   CSECT
         $COMP TYPE=INIT
         $COMP AL2(01),'File_system_mount'
         $COMP AL2(02),'File_system_quiesce'
         $COMP AL2(04),'File_system_unquiesce'
         $COMP AL2(05),'File_system_unmount'
         $COMP AL2(06),'File_system_remount'
         $COMP AL2(07),'File_system_move'
         $COMP AL2(10),'File_open'
         $COMP AL2(11),'File_close'
         $COMP TYPE=BUILD,LENGTH=2,LABEL=STP
*
**       SMF119FT_FxDSType Compare Table
*
T119DST  CSECT
         $COMP TYPE=INIT
         $COMP CL001'S','Sequential'
         $COMP CL001'P','PDS'
         $COMP CL001'H','HFS'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=DST
*
**       SMF119FT_FFReason Compare Table
*
T119FFR  CSECT
         $COMP TYPE=INIT
         $COMP XL001'01','Password_is_not_valid'
         $COMP XL001'02','Password_has_expired'
         $COMP XL001'03','User_ID_has_been_revoked'
         $COMP XL001'04','User_does_not_have_server_access'
         $COMP XL001'05','FTCHKPWD_User_exit_reject_login'
         $COMP XL001'06','Excessive_bad_passwords'
         $COMP XL001'07','Group_ID_process_failed'
         $COMP XL001'08','User_ID_is_unknown'
         $COMP XL001'09','Certificate_is_not_valid'
         $COMP XL001'0A','Client_name_mismatch'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=FFR
*
**       SMF119FT_FxLReply Compare Table (from RFC 959 - FTP)
*
T119LR   CSECT
         $COMP TYPE=INIT
 $COMP C'110','Restart_marker_reply'
 $COMP C'120','Service_ready_in_nnn_minutes'
 $COMP C'125','Data_connection_already_open;_transfer_starting'
 $COMP C'150','File_status_okay;_about_to_open_data_connection'
 $COMP C'200','Command_okay'
 $COMP C'202','Command_not_implemented,_superfluous_at_this_site'
 $COMP C'211','System_status,_or_system_help_reply'
 $COMP C'212','Directory_status'
 $COMP C'213','File_status'
 $COMP C'214','Help_message'
 $COMP C'215','NAME_system_type'
 $COMP C'220','Service_ready_for_new_user'
 $COMP C'221','Service_closing_control_connection'
 $COMP C'225','Data_connection_open;_no_transfer_in_progress'
 $COMP C'226','Closing_data_connection;_requested_action_successful'
 $COMP C'227','Entering_Passive_Mode_(h1,h2,h3,h4,p1,p2)'
 $COMP C'230','User_logged_in,_proceed'
 $COMP C'250','Requested_file_action_okay,_completed'
 $COMP C'257','PATHNAME_created'
 $COMP C'331','User_name_okay,_need_password'
 $COMP C'332','Need_account_for_login'
 $COMP C'350','Requested_file_action_pending_further_information'
 $COMP C'421','Service_not_available,_closing_control_connection'
 $COMP C'425','Cannot_open_data_connection'
 $COMP C'426','Connection_closed;_transfer_aborted'
 $COMP C'450','Requested_file_action_not_taken;_file_busy'
 $COMP C'451','Requested_action_aborted:_local_error_in_processing'
 $COMP C'452','Requested_action_not_taken;_no_system_space'
 $COMP C'500','Syntax_error,_command_unrecognized'
 $COMP C'501','Syntax_error_in_parameters_or_arguments'
 $COMP C'502','Command_not_implemented'
 $COMP C'503','Bad_sequence_of_commands'
 $COMP C'504','Command_not_implemented_for_that_parameter'
 $COMP C'530','Not_logged_in'
 $COMP C'532','Need_account_for_storing_files'
 $COMP C'550','Requested_action_not_taken;_file_not_found/no_access'
 $COMP C'551','Requested_action_aborted:_page_type_unknown'
 $COMP C'552','Requested_file_action_aborted;_no_dir/file_space'
 $COMP C'553','Requested_action_not_taken;_file_name_not_allowed'
         $COMP TYPE=BUILD,LENGTH=3,LABEL=LR
*
**       SMF119FT_FxMode Compare Table
*
T119MODE CSECT
         $COMP TYPE=INIT
         $COMP CL001'B','Block'
         $COMP CL001'C','Compressed'
         $COMP CL001'S','Stream'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=Mode
*
**       SMF119FT_FxStruct Compare Table
*
T119STRU CSECT
         $COMP TYPE=INIT
         $COMP CL001'F','File'
         $COMP CL001'R','Record'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=Struct
*
**       SMF119FT_FxType Compare Table
*
T119TYPE CSECT
         $COMP TYPE=INIT
         $COMP CL001'A','ASCII'
         $COMP CL001'E','EBCDIC'
         $COMP CL001'I','Image'
         $COMP CL001'B','DBCS'
         $COMP CL001'U','UCS-2'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=Type
*
**       ACERODNT Compare Table
*
TACEDNT  CSECT
         $COMP TYPE=INIT
         $COMP AL4(0),'Reserved'
         $COMP AL4(1),'PDSE'
         $COMP AL4(2),'PDS'
         $COMP AL4(3),'HFS'
         $COMP AL4(4),'PIPE'
         $COMP AL4(5),'EXR'
         $COMP AL4(6),'EXC'
         $COMP AL4(7),'BASIC'
         $COMP AL4(8),'LARGE'
         $COMP TYPE=BUILD,LENGTH=4,LABEL=DNT
*
**       ACERODSG Compare Table
*
TACEDSG  CSECT
         $COMP TYPE=INIT
         $COMP AL4(0),'Reserved'
         $COMP AL4(1),'PS'
         $COMP AL4(2),'PO'
         $COMP AL4(3),'VS'
         $COMP AL4(4),'DA'
         $COMP AL4(5),'EXC'
         $COMP AL4(6),'EXR'
         $COMP TYPE=BUILD,LENGTH=4,LABEL=DSG
*
**       ACERODST Compare Table
*
TACEDST  CSECT
         $COMP TYPE=INIT
         $COMP AL4(0),'Reserved'
         $COMP AL4(1),'GDS'
         $COMP AL4(2),'Permanent'
         $COMP AL4(3),'Temporary'
         $COMP TYPE=BUILD,LENGTH=4,LABEL=DST
*
**       ACEROLBL Compare Table
*
TACELBL  CSECT
         $COMP TYPE=INIT
         $COMP AL4(0),'Reserved'
         $COMP AL4(1),'NL'
         $COMP AL4(2),'SL'
         $COMP AL4(3),'AL'
         $COMP AL4(4),'NSL'
         $COMP AL4(5),'SUL'
         $COMP AL4(6),'AUL'
         $COMP AL4(7),'BLP'
         $COMP AL4(8),'LTM'
         $COMP TYPE=BUILD,LENGTH=4,LABEL=LBL
*
**       ACERORCG Compare Table
*
TACERCG  CSECT
         $COMP TYPE=INIT
         $COMP AL4(0),'Reserved'
         $COMP AL4(1),'KSDS'
         $COMP AL4(2),'ESDS'
         $COMP AL4(3),'RRDS'
         $COMP AL4(4),'LDS'
         $COMP TYPE=BUILD,LENGTH=4,LABEL=RCG
*
**       ACEROXMD Compare Table
*
TACEXMD  CSECT
         $COMP TYPE=INIT
         $COMP AL4(0),'Reserved'
         $COMP AL4(1),'BAT'
         $COMP AL4(2),'TSO'
         $COMP AL4(3),'STC'
         $COMP TYPE=BUILD,LENGTH=4,LABEL=XMD
         TITLE 'Table Mapping'
*
**       Printer Control Table
*
D_PRTCTL DSECT                     Printer Control Table
D_PRTHDR DS    F                   Print header address
D_PRTPGE DS    PL003               Current page number
D_PRTLNE DS    PL002               Current line number
D_MAXLPP DS    PL002               Maximum lines per page
*
**       DAFPT
*
D_DAFPT  DSECT                     DAFPT
W_DAFPT1 DS    CL032               DAFPT work area
W_DAFPT2 DS    CL032               DAFPT work area
W_DAFPT3 DS    CL032               DAFPT work area
W_DAFPT4 DS    CL032               DAFPT work area
*
**       RACF Relocate section
*
SMF8XREL DSECT                     RACF Relocate section
SMF8XDTP DS    BL001               Data type
SMF8XDLN DS    BL001               Length of data that follows
SMF8XDTA DS    CL255               Data
*
**       Translate and test table
*
D_TBLTRT DSECT                     Translate and test table
W_TRT    DS    XL256               Translate and test table
*        ABEND X'BAD',DUMP,,SYSTEM
         END
//HEWL    EXEC PGM=HEWL,PARM='MAP,LET,LIST,EP=DAF'
//SYSLIN    DD DISP=(OLD,DELETE),DSN=&&OBJECT,
//             DCB=BUFNO=25
//SYSLMOD   DD DISP=SHR,DSN=ZTGP01.MJCUTIL.LINKLIB(DAFN) <=== Dest
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSPRINT  DD SYSOUT=*,OUTPUT=*.JESDS
